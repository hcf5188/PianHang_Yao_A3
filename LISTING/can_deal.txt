; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\can_deal.o --asm_dir=..\LISTING\ --list_dir=..\LISTING\ --depend=.\can_deal.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\inc_h -IC:\ti\TivaWare_C_Series-2.1.0.12573\inc -IC:\ti\TivaWare_C_Series-2.1.0.12573\utils -IC:\ti\TivaWare_C_Series-2.1.0.12573\grlib -IC:\ti\TivaWare_C_Series-2.1.0.12573\IQmath -IC:\ti\TivaWare_C_Series-2.1.0.12573\nfclib -IC:\ti\TivaWare_C_Series-2.1.0.12573\driverlib -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\TI\TM4C123 -Drvmdk -DPART_TM4C123GH6PM -DTARGET_IS_TM4C123_RA3 -DTM4C123GH6PM --omf_browse=.\can_deal.crf ..\DEAL\CAN_Deal.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  InterFaceDeal PROC
;;;92     }
;;;93     static void InterFaceDeal(void)
000000  b510              PUSH     {r4,lr}
;;;94     {
;;;95     	switch(can1RxDatas[1])
000002  488a              LDR      r0,|L1.556|
000004  7840              LDRB     r0,[r0,#1]  ; can1RxDatas
000006  2850              CMP      r0,#0x50
000008  d037              BEQ      |L1.122|
00000a  2855              CMP      r0,#0x55
00000c  d002              BEQ      |L1.20|
00000e  2880              CMP      r0,#0x80
000010  d134              BNE      |L1.124|
000012  e021              B        |L1.88|
                  |L1.20|
;;;96     	{
;;;97     		case 0x55:    //收到回复指令
;;;98     			can1RxDatas[0] = 0x02;
000014  2002              MOVS     r0,#2
000016  4985              LDR      r1,|L1.556|
000018  7008              STRB     r0,[r1,#0]
;;;99     			can1RxDatas[1] = 0x55;
00001a  2055              MOVS     r0,#0x55
00001c  7048              STRB     r0,[r1,#1]
;;;100    			can1RxDatas[2] = M1_state.byte;
00001e  4884              LDR      r0,|L1.560|
000020  7800              LDRB     r0,[r0,#0]  ; M1_state
000022  7088              STRB     r0,[r1,#2]
;;;101    			can1RxDatas[3] = M2_state.byte;
000024  4883              LDR      r0,|L1.564|
000026  7800              LDRB     r0,[r0,#0]  ; M2_state
000028  70c8              STRB     r0,[r1,#3]
;;;102    			can1RxDatas[4] = HARDWAREVERSION;
00002a  2014              MOVS     r0,#0x14
00002c  7108              STRB     r0,[r1,#4]
;;;103    			can1RxDatas[5] = (uint8_t)(SOFTWAREVERSION>>8);
00002e  2000              MOVS     r0,#0
000030  7148              STRB     r0,[r1,#5]
;;;104    			can1RxDatas[6] = (uint8_t)(SOFTWAREVERSION&0x00FF);
000032  2014              MOVS     r0,#0x14
000034  7188              STRB     r0,[r1,#6]
;;;105    			can1RxDatas[7] = 0x00;
000036  2000              MOVS     r0,#0
000038  71c8              STRB     r0,[r1,#7]
;;;106    			Can1DatasSend(can1RxDatas,8,0x100);
00003a  f44f7280          MOV      r2,#0x100
00003e  2108              MOVS     r1,#8
000040  487a              LDR      r0,|L1.556|
000042  f7fffffe          BL       Can1DatasSend
;;;107    			Cmd_55_Flag	 = 1;break;
000046  487c              LDR      r0,|L1.568|
000048  6800              LDR      r0,[r0,#0]  ; Flagbits
00004a  f4206080          BIC      r0,r0,#0x400
00004e  f5006080          ADD      r0,r0,#0x400
000052  4979              LDR      r1,|L1.568|
000054  6008              STR      r0,[r1,#0]  ; Flagbits
000056  e012              B        |L1.126|
                  |L1.88|
;;;108    		case 0x80:
;;;109    			can1RxDatas[0] = 0x02;
000058  2002              MOVS     r0,#2
00005a  4974              LDR      r1,|L1.556|
00005c  7008              STRB     r0,[r1,#0]
;;;110    			can1RxDatas[1] = 0x81;
00005e  2081              MOVS     r0,#0x81
000060  7048              STRB     r0,[r1,#1]
;;;111    			can1RxDatas[4] = 0x00;
000062  2000              MOVS     r0,#0
000064  7108              STRB     r0,[r1,#4]
;;;112    			can1RxDatas[5] = 0x00;
000066  7148              STRB     r0,[r1,#5]
;;;113    			can1RxDatas[6] = 0x00;
000068  7188              STRB     r0,[r1,#6]
;;;114    			can1RxDatas[7] = 0x00;
00006a  71c8              STRB     r0,[r1,#7]
;;;115    			Can1DatasSend(can1RxDatas,8,0x100);break;
00006c  f44f7280          MOV      r2,#0x100
000070  2108              MOVS     r1,#8
000072  486e              LDR      r0,|L1.556|
000074  f7fffffe          BL       Can1DatasSend
000078  e001              B        |L1.126|
                  |L1.122|
;;;116    		case 0x50:break;//升级指令   未完待续。。。
00007a  e000              B        |L1.126|
                  |L1.124|
;;;117    		default:break;
00007c  bf00              NOP      
                  |L1.126|
00007e  bf00              NOP                            ;107
;;;118    	}
;;;119    }
000080  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  DataToMotor2 PROC
;;;60     }
;;;61     static void DataToMotor2(void )
000082  b510              PUSH     {r4,lr}
;;;62     {
;;;63     	switch(can1RxDatas[1])
000084  4869              LDR      r0,|L1.556|
000086  7840              LDRB     r0,[r0,#1]  ; can1RxDatas
000088  28f3              CMP      r0,#0xf3
00008a  d037              BEQ      |L1.252|
00008c  28f4              CMP      r0,#0xf4
00008e  d139              BNE      |L1.260|
;;;64     	{
;;;65     		case 0xF4:                   //0xF4指令
;;;66     			if(Cmd_IsNew2 != can1RxDatas[6])
000090  4866              LDR      r0,|L1.556|
000092  7980              LDRB     r0,[r0,#6]  ; can1RxDatas
000094  4969              LDR      r1,|L1.572|
000096  7809              LDRB     r1,[r1,#0]  ; Cmd_IsNew2
000098  4288              CMP      r0,r1
00009a  d02e              BEQ      |L1.250|
;;;67     			{
;;;68     				Cmd_IsNew2 = can1RxDatas[6];
00009c  4863              LDR      r0,|L1.556|
00009e  7980              LDRB     r0,[r0,#6]  ; can1RxDatas
0000a0  4966              LDR      r1,|L1.572|
0000a2  7008              STRB     r0,[r1,#0]
;;;69     				Given_Fre2.byte[1] = can1RxDatas[2];
0000a4  4861              LDR      r0,|L1.556|
0000a6  7880              LDRB     r0,[r0,#2]  ; can1RxDatas
0000a8  4965              LDR      r1,|L1.576|
0000aa  7048              STRB     r0,[r1,#1]
;;;70     				Given_Fre2.byte[0] = can1RxDatas[3];
0000ac  485f              LDR      r0,|L1.556|
0000ae  78c0              LDRB     r0,[r0,#3]  ; can1RxDatas
0000b0  7008              STRB     r0,[r1,#0]
;;;71     				Given_Step2.byte[1] = can1RxDatas[4];
0000b2  485e              LDR      r0,|L1.556|
0000b4  7900              LDRB     r0,[r0,#4]  ; can1RxDatas
0000b6  4963              LDR      r1,|L1.580|
0000b8  7048              STRB     r0,[r1,#1]
;;;72     				Given_Step2.byte[0] = can1RxDatas[5];
0000ba  485c              LDR      r0,|L1.556|
0000bc  7940              LDRB     r0,[r0,#5]  ; can1RxDatas
0000be  7008              STRB     r0,[r1,#0]
;;;73     				Step_Num_Cur2.byte[0] = 0x00;//已走步数清零
0000c0  2000              MOVS     r0,#0
0000c2  4961              LDR      r1,|L1.584|
0000c4  7008              STRB     r0,[r1,#0]
;;;74     				Step_Num_Cur2.byte[1] = 0x00;//已走步数清零
0000c6  7048              STRB     r0,[r1,#1]
;;;75     				if(can1RxDatas[7] == 0x00)
0000c8  4858              LDR      r0,|L1.556|
0000ca  79c0              LDRB     r0,[r0,#7]  ; can1RxDatas
0000cc  b930              CBNZ     r0,|L1.220|
;;;76     					Motor_Direction2 = 0;
0000ce  485a              LDR      r0,|L1.568|
0000d0  6800              LDR      r0,[r0,#0]  ; Flagbits
0000d2  f0200080          BIC      r0,r0,#0x80
0000d6  4958              LDR      r1,|L1.568|
0000d8  6008              STR      r0,[r1,#0]  ; Flagbits
0000da  e006              B        |L1.234|
                  |L1.220|
;;;77     				else 
;;;78     					Motor_Direction2 = 1;
0000dc  4856              LDR      r0,|L1.568|
0000de  6800              LDR      r0,[r0,#0]  ; Flagbits
0000e0  f0200080          BIC      r0,r0,#0x80
0000e4  3080              ADDS     r0,r0,#0x80
0000e6  4954              LDR      r1,|L1.568|
0000e8  6008              STR      r0,[r1,#0]  ; Flagbits
                  |L1.234|
;;;79     				Motor_New_Cmd2 = 1;
0000ea  4853              LDR      r0,|L1.568|
0000ec  6800              LDR      r0,[r0,#0]  ; Flagbits
0000ee  f4207000          BIC      r0,r0,#0x200
0000f2  f5007000          ADD      r0,r0,#0x200
0000f6  4950              LDR      r1,|L1.568|
0000f8  6008              STR      r0,[r1,#0]  ; Flagbits
                  |L1.250|
;;;80     			}break;
0000fa  e004              B        |L1.262|
                  |L1.252|
;;;81     		case 0xF3: 
;;;82     			can1RxDatas[1] = 0xF3;break;
0000fc  20f3              MOVS     r0,#0xf3
0000fe  494b              LDR      r1,|L1.556|
000100  7048              STRB     r0,[r1,#1]
000102  e000              B        |L1.262|
                  |L1.260|
;;;83     		default:break;
000104  bf00              NOP      
                  |L1.262|
000106  bf00              NOP                            ;80
;;;84     	}		
;;;85     	can1RxDatas[0] = MOTOR2 + 1;
000108  2031              MOVS     r0,#0x31
00010a  4948              LDR      r1,|L1.556|
00010c  7008              STRB     r0,[r1,#0]
;;;86     	can1RxDatas[2] = Step_Num_Cur2.byte[1];//返回当前所走步数
00010e  484e              LDR      r0,|L1.584|
000110  7840              LDRB     r0,[r0,#1]  ; Step_Num_Cur2
000112  7088              STRB     r0,[r1,#2]
;;;87     	can1RxDatas[3] = Step_Num_Cur2.byte[0];//
000114  484c              LDR      r0,|L1.584|
000116  7800              LDRB     r0,[r0,#0]  ; Step_Num_Cur2
000118  70c8              STRB     r0,[r1,#3]
;;;88     	can1RxDatas[4] = M2_state.byte;	       //返回当前限位状态
00011a  4846              LDR      r0,|L1.564|
00011c  7800              LDRB     r0,[r0,#0]  ; M2_state
00011e  7108              STRB     r0,[r1,#4]
;;;89     	can1RxDatas[5] = 0;can1RxDatas[6] = 0;
000120  2000              MOVS     r0,#0
000122  7148              STRB     r0,[r1,#5]
000124  7188              STRB     r0,[r1,#6]
;;;90     	can1RxDatas[7] = Cmd_IsNew2;
000126  4845              LDR      r0,|L1.572|
000128  7800              LDRB     r0,[r0,#0]  ; Cmd_IsNew2
00012a  71c8              STRB     r0,[r1,#7]
;;;91     	Can1DatasSend(can1RxDatas,8,0x100);
00012c  f44f7280          MOV      r2,#0x100
000130  2108              MOVS     r1,#8
000132  483e              LDR      r0,|L1.556|
000134  f7fffffe          BL       Can1DatasSend
;;;92     }
000138  bd10              POP      {r4,pc}
;;;93     static void InterFaceDeal(void)
                          ENDP

                  DataToMotor1 PROC
;;;28     
;;;29     static void DataToMotor1(void )
00013a  b510              PUSH     {r4,lr}
;;;30     {
;;;31     	switch(can1RxDatas[1])
00013c  483b              LDR      r0,|L1.556|
00013e  7840              LDRB     r0,[r0,#1]  ; can1RxDatas
000140  28f3              CMP      r0,#0xf3
000142  d037              BEQ      |L1.436|
000144  28f4              CMP      r0,#0xf4
000146  d139              BNE      |L1.444|
;;;32     	{
;;;33     		case 0xF4:                //0xF4指令
;;;34     			if(Cmd_IsNew1 != can1RxDatas[6])
000148  4838              LDR      r0,|L1.556|
00014a  7980              LDRB     r0,[r0,#6]  ; can1RxDatas
00014c  493f              LDR      r1,|L1.588|
00014e  7809              LDRB     r1,[r1,#0]  ; Cmd_IsNew1
000150  4288              CMP      r0,r1
000152  d02e              BEQ      |L1.434|
;;;35     			{
;;;36     				Cmd_IsNew1 = can1RxDatas[6];
000154  4835              LDR      r0,|L1.556|
000156  7980              LDRB     r0,[r0,#6]  ; can1RxDatas
000158  493c              LDR      r1,|L1.588|
00015a  7008              STRB     r0,[r1,#0]
;;;37     				Given_Fre1.byte[1] = can1RxDatas[2];//给定频率
00015c  4833              LDR      r0,|L1.556|
00015e  7880              LDRB     r0,[r0,#2]  ; can1RxDatas
000160  493b              LDR      r1,|L1.592|
000162  7048              STRB     r0,[r1,#1]
;;;38     				Given_Fre1.byte[0] = can1RxDatas[3];
000164  4831              LDR      r0,|L1.556|
000166  78c0              LDRB     r0,[r0,#3]  ; can1RxDatas
000168  7008              STRB     r0,[r1,#0]
;;;39     				Given_Step1.byte[1] = can1RxDatas[4];//给定步数
00016a  4830              LDR      r0,|L1.556|
00016c  7900              LDRB     r0,[r0,#4]  ; can1RxDatas
00016e  4939              LDR      r1,|L1.596|
000170  7048              STRB     r0,[r1,#1]
;;;40     				Given_Step1.byte[0] = can1RxDatas[5];
000172  482e              LDR      r0,|L1.556|
000174  7940              LDRB     r0,[r0,#5]  ; can1RxDatas
000176  7008              STRB     r0,[r1,#0]
;;;41     				Step_Num_Cur1.byte[0] = 0x00;//已走步数清零
000178  2000              MOVS     r0,#0
00017a  4937              LDR      r1,|L1.600|
00017c  7008              STRB     r0,[r1,#0]
;;;42     				Step_Num_Cur1.byte[1] = 0x00;//已走步数清零
00017e  7048              STRB     r0,[r1,#1]
;;;43     				if(can1RxDatas[7] == 0x00)
000180  482a              LDR      r0,|L1.556|
000182  79c0              LDRB     r0,[r0,#7]  ; can1RxDatas
000184  b930              CBNZ     r0,|L1.404|
;;;44     					Motor_Direction1 = 0;
000186  482c              LDR      r0,|L1.568|
000188  6800              LDR      r0,[r0,#0]  ; Flagbits
00018a  f0200040          BIC      r0,r0,#0x40
00018e  492a              LDR      r1,|L1.568|
000190  6008              STR      r0,[r1,#0]  ; Flagbits
000192  e006              B        |L1.418|
                  |L1.404|
;;;45     				else 
;;;46     					Motor_Direction1 = 1;
000194  4828              LDR      r0,|L1.568|
000196  6800              LDR      r0,[r0,#0]  ; Flagbits
000198  f0200040          BIC      r0,r0,#0x40
00019c  3040              ADDS     r0,r0,#0x40
00019e  4926              LDR      r1,|L1.568|
0001a0  6008              STR      r0,[r1,#0]  ; Flagbits
                  |L1.418|
;;;47     				Motor_New_Cmd1 = 1;
0001a2  4825              LDR      r0,|L1.568|
0001a4  6800              LDR      r0,[r0,#0]  ; Flagbits
0001a6  f4207080          BIC      r0,r0,#0x100
0001aa  f5007080          ADD      r0,r0,#0x100
0001ae  4922              LDR      r1,|L1.568|
0001b0  6008              STR      r0,[r1,#0]  ; Flagbits
                  |L1.434|
;;;48     			}break;
0001b2  e004              B        |L1.446|
                  |L1.436|
;;;49     		case 0xF3: 
;;;50     			can1RxDatas[1] = 0xF3;break;
0001b4  20f3              MOVS     r0,#0xf3
0001b6  491d              LDR      r1,|L1.556|
0001b8  7048              STRB     r0,[r1,#1]
0001ba  e000              B        |L1.446|
                  |L1.444|
;;;51     		default:break;
0001bc  bf00              NOP      
                  |L1.446|
0001be  bf00              NOP                            ;48
;;;52     	}		
;;;53     	can1RxDatas[0] = MOTOR1 + 1;
0001c0  2091              MOVS     r0,#0x91
0001c2  491a              LDR      r1,|L1.556|
0001c4  7008              STRB     r0,[r1,#0]
;;;54     	can1RxDatas[2] = Step_Num_Cur1.byte[1];//返回当前所走步数
0001c6  4824              LDR      r0,|L1.600|
0001c8  7840              LDRB     r0,[r0,#1]  ; Step_Num_Cur1
0001ca  7088              STRB     r0,[r1,#2]
;;;55     	can1RxDatas[3] = Step_Num_Cur1.byte[0];//
0001cc  4822              LDR      r0,|L1.600|
0001ce  7800              LDRB     r0,[r0,#0]  ; Step_Num_Cur1
0001d0  70c8              STRB     r0,[r1,#3]
;;;56     	can1RxDatas[4] = M1_state.byte;		   //返回当前限位状态	
0001d2  4817              LDR      r0,|L1.560|
0001d4  7800              LDRB     r0,[r0,#0]  ; M1_state
0001d6  7108              STRB     r0,[r1,#4]
;;;57     	can1RxDatas[5] = 0;can1RxDatas[6] = 0;
0001d8  2000              MOVS     r0,#0
0001da  7148              STRB     r0,[r1,#5]
0001dc  7188              STRB     r0,[r1,#6]
;;;58     	can1RxDatas[7] = Cmd_IsNew1;
0001de  481b              LDR      r0,|L1.588|
0001e0  7800              LDRB     r0,[r0,#0]  ; Cmd_IsNew1
0001e2  71c8              STRB     r0,[r1,#7]
;;;59     	Can1DatasSend(can1RxDatas,8,0x100);
0001e4  f44f7280          MOV      r2,#0x100
0001e8  2108              MOVS     r1,#8
0001ea  4810              LDR      r0,|L1.556|
0001ec  f7fffffe          BL       Can1DatasSend
;;;60     }
0001f0  bd10              POP      {r4,pc}
;;;61     static void DataToMotor2(void )
                          ENDP

                  Can1_DataDeal PROC
;;;13     
;;;14     bool Can1_DataDeal(void)
0001f2  b510              PUSH     {r4,lr}
;;;15     {
;;;16     	bool isRxNull = CanFifo_Request(&can1RxFifo,can1RxDatas);//向接收队列提取数据
0001f4  490d              LDR      r1,|L1.556|
0001f6  4819              LDR      r0,|L1.604|
0001f8  f7fffffe          BL       CanFifo_Request
0001fc  4604              MOV      r4,r0
;;;17     	if(!isRxNull)           //缓冲区没有数据直接返回
0001fe  b90c              CBNZ     r4,|L1.516|
;;;18     		return false;
000200  2000              MOVS     r0,#0
                  |L1.514|
;;;19     	switch(can1RxDatas[0])
;;;20     	{
;;;21     		case MOTOR1:DataToMotor1();break;//电机1的数据包
;;;22     		case MOTOR2:DataToMotor2();break;//电机2的数据包
;;;23     		case INTERFACE:	InterFaceDeal();break;	//升级、调试等指令。
;;;24     		default:	break;
;;;25     	}
;;;26     	return true;
;;;27     }
000202  bd10              POP      {r4,pc}
                  |L1.516|
000204  4809              LDR      r0,|L1.556|
000206  7800              LDRB     r0,[r0,#0]            ;19  ; can1RxDatas
000208  b148              CBZ      r0,|L1.542|
00020a  2830              CMP      r0,#0x30              ;19
00020c  d004              BEQ      |L1.536|
00020e  2890              CMP      r0,#0x90              ;19
000210  d108              BNE      |L1.548|
000212  f7fffffe          BL       DataToMotor1
000216  e006              B        |L1.550|
                  |L1.536|
000218  f7fffffe          BL       DataToMotor2
00021c  e003              B        |L1.550|
                  |L1.542|
00021e  f7fffffe          BL       InterFaceDeal
000222  e000              B        |L1.550|
                  |L1.548|
000224  bf00              NOP                            ;24
                  |L1.550|
000226  bf00              NOP                            ;21
000228  2001              MOVS     r0,#1                 ;26
00022a  e7ea              B        |L1.514|
;;;28     
                          ENDP

                  |L1.556|
                          DCD      can1RxDatas
                  |L1.560|
                          DCD      M1_state
                  |L1.564|
                          DCD      M2_state
                  |L1.568|
                          DCD      Flagbits
                  |L1.572|
                          DCD      Cmd_IsNew2
                  |L1.576|
                          DCD      Given_Fre2
                  |L1.580|
                          DCD      Given_Step2
                  |L1.584|
                          DCD      Step_Num_Cur2
                  |L1.588|
                          DCD      Cmd_IsNew1
                  |L1.592|
                          DCD      Given_Fre1
                  |L1.596|
                          DCD      Given_Step1
                  |L1.600|
                          DCD      Step_Num_Cur1
                  |L1.604|
                          DCD      can1RxFifo

                          AREA ||.data||, DATA, ALIGN=0

                  can1RxDatas
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
