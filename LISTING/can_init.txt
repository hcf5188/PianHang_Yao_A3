; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\can_init.o --asm_dir=..\LISTING\ --list_dir=..\LISTING\ --depend=.\can_init.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\inc_h -IC:\ti\TivaWare_C_Series-2.1.0.12573\inc -IC:\ti\TivaWare_C_Series-2.1.0.12573\utils -IC:\ti\TivaWare_C_Series-2.1.0.12573\grlib -IC:\ti\TivaWare_C_Series-2.1.0.12573\IQmath -IC:\ti\TivaWare_C_Series-2.1.0.12573\nfclib -IC:\ti\TivaWare_C_Series-2.1.0.12573\driverlib -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\TI\TM4C123 -Drvmdk -DPART_TM4C123GH6PM -DTARGET_IS_TM4C123_RA3 -DTM4C123GH6PM --omf_browse=.\can_init.crf ..\DRIVE\Can_Init.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CAN1_Handler PROC
;;;99     
;;;100    void CAN1_Handler (void)
000000  b570              PUSH     {r4-r6,lr}
;;;101    {
000002  b088              SUB      sp,sp,#0x20
;;;102        tCANMsgObject   MsgObjectBuf;
;;;103        uint32_t   ulMsgObjID;
;;;104        uint32_t   ulNewData = 0;
000004  2500              MOVS     r5,#0
;;;105    	unsigned char   ucTemp[8];
;;;106        unsigned char   i = 0;
000006  2400              MOVS     r4,#0
;;;107    	
;;;108    	ulMsgObjID = CANIntStatus( CAN1_BASE, CAN_INT_STS_CAUSE );
000008  2100              MOVS     r1,#0
00000a  4857              LDR      r0,|L1.360|
00000c  f7fffffe          BL       CANIntStatus
000010  4606              MOV      r6,r0
;;;109    	CANIntClear(CAN1_BASE, CAN_INT_INTID_STATUS );
000012  f44f4100          MOV      r1,#0x8000
000016  4854              LDR      r0,|L1.360|
000018  f7fffffe          BL       CANIntClear
;;;110    
;;;111    	CLEAE_CAN( CAN1_BASE );
00001c  2000              MOVS     r0,#0
00001e  4952              LDR      r1,|L1.360|
000020  6088              STR      r0,[r1,#8]
;;;112    	if( ulMsgObjID != 0 )
000022  b1fe              CBZ      r6,|L1.100|
;;;113    	{       		
;;;114    		ulNewData  = CANStatusGet( CAN1_BASE, CAN_STS_NEWDAT );
000024  2102              MOVS     r1,#2
000026  4850              LDR      r0,|L1.360|
000028  f7fffffe          BL       CANStatusGet
00002c  4605              MOV      r5,r0
;;;115    		MsgObjectBuf.pui8MsgData = ucTemp;
00002e  a801              ADD      r0,sp,#4
000030  9007              STR      r0,[sp,#0x1c]
;;;116    		if( ulNewData != 0 )
000032  b1bd              CBZ      r5,|L1.100|
;;;117    		{		
;;;118    			for( i = 0; i < 32; i ++ )
000034  bf00              NOP      
000036  e013              B        |L1.96|
                  |L1.56|
;;;119    			{
;;;120    				if( ulNewData &( 1 << i ) )
000038  2001              MOVS     r0,#1
00003a  40a0              LSLS     r0,r0,r4
00003c  4228              TST      r0,r5
00003e  d00d              BEQ      |L1.92|
;;;121    				{                         
;;;122    					CANMessageGet(CAN1_BASE,1+i,&MsgObjectBuf, true ); 	
000040  1c61              ADDS     r1,r4,#1
000042  2301              MOVS     r3,#1
000044  aa03              ADD      r2,sp,#0xc
000046  4848              LDR      r0,|L1.360|
000048  f7fffffe          BL       CANMessageGet
;;;123    					CanFifo_Post(&can1RxFifo,ucTemp);
00004c  a901              ADD      r1,sp,#4
00004e  4847              LDR      r0,|L1.364|
000050  f7fffffe          BL       CanFifo_Post
;;;124    					CANIntClear( CAN1_BASE,i + 1 );
000054  1c61              ADDS     r1,r4,#1
000056  4844              LDR      r0,|L1.360|
000058  f7fffffe          BL       CANIntClear
                  |L1.92|
00005c  1c60              ADDS     r0,r4,#1              ;118
00005e  b2c4              UXTB     r4,r0                 ;118
                  |L1.96|
000060  2c20              CMP      r4,#0x20              ;118
000062  dbe9              BLT      |L1.56|
                  |L1.100|
;;;125    				}
;;;126    			}		
;;;127    		}
;;;128    	} 
;;;129    }
000064  b008              ADD      sp,sp,#0x20
000066  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP

                  CAN1_Init PROC
;;;20     
;;;21     void CAN1_Init(void)
000068  b570              PUSH     {r4-r6,lr}
;;;22     {
;;;23     	int id_can1rx = 0;
00006a  2400              MOVS     r4,#0
;;;24     	
;;;25     	CanFifo_Init(&can1RxFifo,rxMsg,15,rxFifo);
00006c  4b40              LDR      r3,|L1.368|
00006e  220f              MOVS     r2,#0xf
000070  4940              LDR      r1,|L1.372|
000072  483e              LDR      r0,|L1.364|
000074  f7fffffe          BL       CanFifo_Init
;;;26     	
;;;27     	SysCtlPeripheralEnable( SYSCTL_PERIPH_GPIOA );				
000078  483f              LDR      r0,|L1.376|
00007a  f7fffffe          BL       SysCtlPeripheralEnable
;;;28     	GPIOPinConfigure(GPIO_PA0_CAN1RX);
00007e  2008              MOVS     r0,#8
000080  f7fffffe          BL       GPIOPinConfigure
;;;29     	GPIOPinConfigure(GPIO_PA1_CAN1TX);						 
000084  f44f6081          MOV      r0,#0x408
000088  f7fffffe          BL       GPIOPinConfigure
;;;30     	GPIOPinTypeCAN( GPIO_PORTA_BASE, GPIO_PIN_1 | GPIO_PIN_0 );
00008c  2103              MOVS     r1,#3
00008e  f04f2040          MOV      r0,#0x40004000
000092  f7fffffe          BL       GPIOPinTypeCAN
;;;31     	SysCtlPeripheralEnable(SYSCTL_PERIPH_CAN1);
000096  4839              LDR      r0,|L1.380|
000098  f7fffffe          BL       SysCtlPeripheralEnable
;;;32     	CANInit(CAN1_BASE);
00009c  4832              LDR      r0,|L1.360|
00009e  f7fffffe          BL       CANInit
;;;33     	
;;;34     	// Set up the bit rate for the CAN bus.  This function sets up the CAN
;;;35     	// bus timing for a nominal configuration.  You can achieve more control
;;;36     	// over the CAN bus timing by using the function CANBitTimingSet() instead
;;;37     	// of this one, if needed.
;;;38     	// In this example, the CAN bus is set to 500 kHz.
;;;39     	CANBitRateSet(CAN1_BASE, ROM_SysCtlClockGet(), 500000);
0000a2  f04f7180          MOV      r1,#0x1000000
0000a6  6c49              LDR      r1,[r1,#0x44]
0000a8  6e08              LDR      r0,[r1,#0x60]
0000aa  4780              BLX      r0
0000ac  4605              MOV      r5,r0
0000ae  4a34              LDR      r2,|L1.384|
0000b0  4629              MOV      r1,r5
0000b2  482d              LDR      r0,|L1.360|
0000b4  f7fffffe          BL       CANBitRateSet
;;;40     	// Enable interrupts on the CAN peripheral.  This example uses static
;;;41     	// allocation of interrupt handlers which means the name of the handler
;;;42     	// is in the vector table of startup code.
;;;43     	CANIntEnable(CAN1_BASE, CAN_INT_MASTER | CAN_INT_ERROR | CAN_INT_STATUS);
0000b8  210e              MOVS     r1,#0xe
0000ba  482b              LDR      r0,|L1.360|
0000bc  f7fffffe          BL       CANIntEnable
;;;44     	// Enable the CAN interrupt on the processor (NVIC).
;;;45     	IntEnable(INT_CAN1);
0000c0  2038              MOVS     r0,#0x38
0000c2  f7fffffe          BL       IntEnable
;;;46     	// Enable the CAN for operation.
;;;47     	CANEnable(CAN1_BASE);
0000c6  4828              LDR      r0,|L1.360|
0000c8  f7fffffe          BL       CANEnable
;;;48     	// Initialize a message object to be used for receiving CAN messages with
;;;49     	// any CAN ID.  In order to receive any CAN ID, the ID and mask must both
;;;50     	// be set to 0, and the ID filter enabled.
;;;51     	can1RxMessage.ui32MsgID     = CAN1RXID;
0000cc  f2401001          MOV      r0,#0x101
0000d0  492c              LDR      r1,|L1.388|
0000d2  6008              STR      r0,[r1,#0]  ; can1RxMessage
;;;52     	can1RxMessage.ui32MsgIDMask = 0xFFFFF;
0000d4  482c              LDR      r0,|L1.392|
0000d6  6048              STR      r0,[r1,#4]  ; can1RxMessage
;;;53     	can1RxMessage.ui32Flags     = (MSG_OBJ_RX_INT_ENABLE | MSG_OBJ_USE_ID_FILTER | MSG_OBJ_FIFO);
0000d8  f240200a          MOV      r0,#0x20a
0000dc  6088              STR      r0,[r1,#8]  ; can1RxMessage
;;;54     	can1RxMessage.ui32MsgLen    = sizeof(Ui8RxMsgDataCAN1);
0000de  2008              MOVS     r0,#8
0000e0  60c8              STR      r0,[r1,#0xc]  ; can1RxMessage
;;;55     	// Now load the message object into the CAN peripheral.  Once loaded the
;;;56     	// CAN will receive any message on the bus, and an interrupt will occur.
;;;57     	// Use message object RX1BJECT for receiving messages (this is not the
;;;58     	// same as the CAN ID which can be any value in this example).				
;;;59     	// CANMessageSet(CAN1_BASE, RX1BJECT, &can1RxMessage, MSG_OBJ_TYPE_RX);		
;;;60     	for(id_can1rx = 0;id_can1rx < 16;id_can1rx ++)
0000e2  bf00              NOP      
0000e4  e006              B        |L1.244|
                  |L1.230|
;;;61     		CANMessageSet( CAN1_BASE, id_can1rx+1, 
0000e6  2302              MOVS     r3,#2
0000e8  4a26              LDR      r2,|L1.388|
0000ea  1c61              ADDS     r1,r4,#1
0000ec  481e              LDR      r0,|L1.360|
0000ee  f7fffffe          BL       CANMessageSet
0000f2  1c64              ADDS     r4,r4,#1              ;60
                  |L1.244|
0000f4  2c10              CMP      r4,#0x10              ;60
0000f6  dbf6              BLT      |L1.230|
;;;62     			&can1RxMessage, MSG_OBJ_TYPE_RX );
;;;63     	// Initialize the message object that will be used for sending CAN
;;;64     	// messages.  The message will be 1 bytes that will contain the character
;;;65     	// received from the other controller. Initially it will be set to 0.
;;;66     	can1TxMessage.ui32MsgID = CAN1TXID;
0000f8  f44f7080          MOV      r0,#0x100
0000fc  4923              LDR      r1,|L1.396|
0000fe  6008              STR      r0,[r1,#0]  ; can1TxMessage
;;;67     	can1TxMessage.ui32MsgIDMask = 0;
000100  2000              MOVS     r0,#0
000102  6048              STR      r0,[r1,#4]  ; can1TxMessage
;;;68     	can1TxMessage.ui32Flags = MSG_OBJ_FIFO;
000104  f44f7000          MOV      r0,#0x200
000108  6088              STR      r0,[r1,#8]  ; can1TxMessage
;;;69     	can1TxMessage.ui32MsgLen = sizeof(Ui8TxMsgDataCAN1);
00010a  2008              MOVS     r0,#8
00010c  60c8              STR      r0,[r1,#0xc]  ; can1TxMessage
;;;70     	can1TxMessage.pui8MsgData = Ui8TxMsgDataCAN1;
00010e  4820              LDR      r0,|L1.400|
000110  6108              STR      r0,[r1,#0x10]  ; can1TxMessage
;;;71     	CANIntRegister(CAN1_BASE, CAN1_Handler);
000112  f2af1113          ADR      r1,CAN1_Handler + 1
000116  4814              LDR      r0,|L1.360|
000118  f7fffffe          BL       CANIntRegister
;;;72     }
00011c  bd70              POP      {r4-r6,pc}
;;;73     
                          ENDP

                  Can1DatasSend PROC
;;;74     int Can1DatasSend( unsigned char *pSend1Buffer,
00011e  b570              PUSH     {r4-r6,lr}
;;;75     				   unsigned char send1Len ,
;;;76     			       unsigned long msgID1)
;;;77     {
000120  b086              SUB      sp,sp,#0x18
000122  4605              MOV      r5,r0
000124  460c              MOV      r4,r1
000126  4616              MOV      r6,r2
;;;78     	static unsigned char u1TxMsgObjNr = 17;
;;;79     	tCANMsgObject MsgObjectTx;
;;;80     	
;;;81     	u1TxMsgObjNr ++;   
000128  481a              LDR      r0,|L1.404|
00012a  7800              LDRB     r0,[r0,#0]  ; u1TxMsgObjNr
00012c  1c40              ADDS     r0,r0,#1
00012e  4919              LDR      r1,|L1.404|
000130  7008              STRB     r0,[r1,#0]
;;;82     	if( u1TxMsgObjNr >32 )
000132  4608              MOV      r0,r1
000134  7800              LDRB     r0,[r0,#0]  ; u1TxMsgObjNr
000136  2820              CMP      r0,#0x20
000138  dd01              BLE      |L1.318|
;;;83     		u1TxMsgObjNr = 17;
00013a  2011              MOVS     r0,#0x11
00013c  7008              STRB     r0,[r1,#0]
                  |L1.318|
;;;84     	
;;;85     	MsgObjectTx.ui32Flags     = MSG_OBJ_FIFO;		
00013e  f44f7000          MOV      r0,#0x200
000142  9003              STR      r0,[sp,#0xc]
;;;86     	MsgObjectTx.ui32MsgIDMask = 0;
000144  2000              MOVS     r0,#0
000146  9002              STR      r0,[sp,#8]
;;;87     	MsgObjectTx.ui32MsgID	  = msgID1;
000148  9601              STR      r6,[sp,#4]
;;;88     	
;;;89     	MsgObjectTx.ui32MsgLen	= send1Len;
00014a  9404              STR      r4,[sp,#0x10]
;;;90     	MsgObjectTx.pui8MsgData	= pSend1Buffer;
00014c  9505              STR      r5,[sp,#0x14]
;;;91     	
;;;92     	CLEAE_CAN( CAN1_BASE );
00014e  4906              LDR      r1,|L1.360|
000150  6088              STR      r0,[r1,#8]
;;;93     	
;;;94     	CANMessageSet( CAN1_BASE,u1TxMsgObjNr, 
000152  2300              MOVS     r3,#0
000154  aa01              ADD      r2,sp,#4
000156  480f              LDR      r0,|L1.404|
000158  7801              LDRB     r1,[r0,#0]  ; u1TxMsgObjNr
00015a  4803              LDR      r0,|L1.360|
00015c  f7fffffe          BL       CANMessageSet
;;;95     						&MsgObjectTx, MSG_OBJ_TYPE_TX); 
;;;96         
;;;97     	return send1Len;
000160  4620              MOV      r0,r4
;;;98     }
000162  b006              ADD      sp,sp,#0x18
000164  bd70              POP      {r4-r6,pc}
;;;99     
                          ENDP

000166  0000              DCW      0x0000
                  |L1.360|
                          DCD      0x40041000
                  |L1.364|
                          DCD      can1RxFifo
                  |L1.368|
                          DCD      rxFifo
                  |L1.372|
                          DCD      rxMsg
                  |L1.376|
                          DCD      0xf0000800
                  |L1.380|
                          DCD      0xf0003401
                  |L1.384|
                          DCD      0x0007a120
                  |L1.388|
                          DCD      can1RxMessage
                  |L1.392|
                          DCD      0x000fffff
                  |L1.396|
                          DCD      can1TxMessage
                  |L1.400|
                          DCD      Ui8TxMsgDataCAN1
                  |L1.404|
                          DCD      u1TxMsgObjNr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  can1RxMessage
                          %        20
                  can1TxMessage
                          %        20
                  can1RxFifo
                          %        20
                  rxMsg
                          %        60
                  rxFifo
                          %        120

                          AREA ||.data||, DATA, ALIGN=0

                  Ui8TxMsgDataCAN1
000000  03114433          DCB      0x03,0x11,0x44,0x33
000004  66558877          DCB      0x66,0x55,0x88,0x77
                  Ui8RxMsgDataCAN1
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  u1TxMsgObjNr
000010  11                DCB      0x11
