L 1 "..\DRIVE\fifo.c"
N/*********************************************************
N*文    件：               fifo.c
N*功能描述：循环队列，用于存储接收自CAN的数据包
N*作    者：洪春峰
N*时    间：2017.7.17
N***********************************************************/
N
N#include "fifo.h"
L 1 "..\inc_h\fifo.h" 1
N
N#ifndef __FIFO_H
N#define __FIFO_H
N
N
N#include "system.h"
L 1 "..\inc_h\system.h" 1
N#ifndef __SYSTEM_H__
N#define __SYSTEM_H__
N
N#include <cstdlib>
L 1 "D:\Keil_v4\ARM\ARMCC\bin\..\include\cstdlib" 1
N/*
N * C++ header for C header stdlib.h
N * Copyright 1997 ARM Limited. All rights reserved.
N */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: pwright $
N */
N
N#ifndef __cstdlib
N#define __cstdlib
N#define __ARMCLIB_VERSION 5030076
N
N  #define __STDLIB_NO_EXPORTS 1
N  #include <stdlib.h>
L 1 "D:\Keil_v4\ARM\ARMCC\bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.            */
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5030076
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __pure
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X    #if 0L || (1L && 199901L <= 199409L)
S      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  typedef unsigned int size_t;
N#elif !defined(__size_t)
S  #define __size_t 1
S  typedef unsigned int size_t;   /* see <stddef.h> */
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N   #if defined(__WCHAR32)
X   #if 0L
S    typedef unsigned int wchar_t; /* see <stddef.h> */
N   #else
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N   #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Ntypedef struct lldiv_t { __int64 quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI __int64 atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) __int64 atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __int64 strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) __int64 strtoll(const char * __restrict  ,
N                               char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __int64 strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned __int64 strtoull(const char * __restrict  ,
N                                         char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__cplusplus) && !defined(__GNUC__)
X#if 0L && !0L
S    /* atexit that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode  
S     */
S    typedef void (* __C_exitfuncptr)();
S    extern "C++"
S    inline int atexit(void (* __func)()) {
S      return atexit((__C_exitfuncptr)__func);
S    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && !defined(__GNUC__)
X#if 0L && !0L
S    /* bsearch that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */
S    typedef int (* __C_compareprocptr)(const void *, const void *);
S    extern "C++"
S    void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
S    extern "C++"
S    inline void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) {
S      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && !defined(__GNUC__)
X#if 0L && !0L
S    /* qsort that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */    
S    extern "C++"
S    void qsort(void * __base, size_t __nmemb, size_t __size,
S               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
S    extern "C++"
S    inline void qsort(void * __base, size_t __nmemb, size_t __size,
S                      int (* __compar)(const void *, const void *)) {
S      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __pure int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __pure div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __pure long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __pure ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI_PURE __int64 llabs(__int64 /*j*/);
Xextern __declspec(__nothrow) __pure __int64 llabs(__int64  );
N   /*
N    * computes the absolute value of a __int64 integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE __int64 abs(__int64 x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__int64 /*numer*/, __int64 /*denom*/);
Xextern __declspec(__nothrow) __pure lldiv_t lldiv(__int64  , __int64  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE lldiv_t div(__int64 __numer, __int64 __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __pure __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __pure __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __pure __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __STDLIB_NO_EXPORTS
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::atoll;
S        using ::std::lldiv_t;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::div_t;
S      using ::std::ldiv_t;
S      using ::std::atof;
S      using ::std::atoi;
S      using ::std::atol;
S      using ::std::strtod;
S#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S      using ::std::strtof;
S      using ::std::strtold;
S#endif
S      using ::std::strtol;
S      using ::std::strtoul;
S      using ::std::strtoll;
S      using ::std::strtoull;
S      using ::std::rand;
S      using ::std::srand;
S      using ::std::_rand_state;
S      using ::std::_rand_r;
S      using ::std::_srand_r;
S      using ::std::_ANSI_rand_state;
S      using ::std::_ANSI_rand_r;
S      using ::std::_ANSI_srand_r;
S      using ::std::calloc;
S      using ::std::free;
S      using ::std::malloc;
S      using ::std::realloc;
S#if !defined(__STRICT_ANSI__)
S      using ::std::posix_memalign;
S#endif
S      using ::std::__heapprt;
S      using ::std::__heapstats;
S      using ::std::__heapvalid;
S      using ::std::abort;
S      using ::std::atexit;
S      using ::std::exit;
S      using ::std::_Exit;
S      using ::std::getenv;
S      using ::std::system;
S      using ::std::bsearch;
S      using ::std::qsort;
S      using ::std::abs;
S      using ::std::div;
S      using ::std::labs;
S      using ::std::ldiv;
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::llabs;
S        using ::std::lldiv;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::__sdiv32by16;
S      using ::std::__udiv32by16;
S      using ::std::__sdiv64by32;
S      using ::std::__rt_sdiv32by16;
S      using ::std::__rt_udiv32by16;
S      using ::std::__rt_sdiv64by32;
S      using ::std::__fp_status;
S      using ::std::mblen;
S      using ::std::mbtowc;
S      using ::std::wctomb;
S      using ::std::mbstowcs;
S      using ::std::wcstombs;
S      using ::std::__use_realtime_heap;
S      using ::std::__use_realtime_division;
S      using ::std::__use_two_region_memory;
S      using ::std::__use_no_heap;
S      using ::std::__use_no_heap_region;
S      using ::std::__C_library_version_string;
S      using ::std::__C_library_version_number;
S      using ::std::size_t;
S      using ::std::__aeabi_MB_CUR_MAX;
S    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N/* end of stdlib.h */
N
L 18 "D:\Keil_v4\ARM\ARMCC\bin\..\include\cstdlib" 2
N  #undef __STDLIB_NO_EXPORTS
N
N  #undef __stdlib_h  // later inclusion of stdlib.h must do using std::*
N  #ifdef __EDG_IMPLICIT_USING_STD
S    /* Implicitly include a using directive for the STD namespace when this
S       preprocessing flag is TRUE. */
S       using namespace ::std;
N  #endif /* ifdef __EDG_IMPLICIT_USING_STD */
N  
N#endif /* __cstdlib */
N
L 5 "..\inc_h\system.h" 2
N#include <stdint.h>
L 1 "D:\Keil_v4\ARM\ARMCC\bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5030076
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
N
L 6 "..\inc_h\system.h" 2
N#include <stdbool.h>
L 1 "D:\Keil_v4\ARM\ARMCC\bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5030076
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
N    #define bool _Bool
N    #define true 1
N    #define false 0
N  #else
S    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
S    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 7 "..\inc_h\system.h" 2
N#include <string.h>
L 1 "D:\Keil_v4\ARM\ARMCC\bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5030076
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  typedef unsigned int size_t;
N#elif !defined(__size_t)
S  #define __size_t 1
S  typedef unsigned int size_t;   /* see <stddef.h> */
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 8 "..\inc_h\system.h" 2
N#include <hw_memmap.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_memmap.h" 1
N//*****************************************************************************
N//
N// hw_memmap.h - Macros defining the memory map of the device.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_MEMMAP_H__
N#define __HW_MEMMAP_H__
N
N//*****************************************************************************
N//
N// The following are defines for the base address of the memories and
N// peripherals.
N//
N//*****************************************************************************
N#define FLASH_BASE              0x00000000  // FLASH memory
N#define SRAM_BASE               0x20000000  // SRAM memory
N#define WATCHDOG0_BASE          0x40000000  // Watchdog0
N#define WATCHDOG1_BASE          0x40001000  // Watchdog1
N#define GPIO_PORTA_BASE         0x40004000  // GPIO Port A
N#define GPIO_PORTB_BASE         0x40005000  // GPIO Port B
N#define GPIO_PORTC_BASE         0x40006000  // GPIO Port C
N#define GPIO_PORTD_BASE         0x40007000  // GPIO Port D
N#define SSI0_BASE               0x40008000  // SSI0
N#define SSI1_BASE               0x40009000  // SSI1
N#define SSI2_BASE               0x4000A000  // SSI2
N#define SSI3_BASE               0x4000B000  // SSI3
N#define UART0_BASE              0x4000C000  // UART0
N#define UART1_BASE              0x4000D000  // UART1
N#define UART2_BASE              0x4000E000  // UART2
N#define UART3_BASE              0x4000F000  // UART3
N#define UART4_BASE              0x40010000  // UART4
N#define UART5_BASE              0x40011000  // UART5
N#define UART6_BASE              0x40012000  // UART6
N#define UART7_BASE              0x40013000  // UART7
N#define I2C0_BASE               0x40020000  // I2C0
N#define I2C1_BASE               0x40021000  // I2C1
N#define I2C2_BASE               0x40022000  // I2C2
N#define I2C3_BASE               0x40023000  // I2C3
N#define GPIO_PORTE_BASE         0x40024000  // GPIO Port E
N#define GPIO_PORTF_BASE         0x40025000  // GPIO Port F
N#define GPIO_PORTG_BASE         0x40026000  // GPIO Port G
N#define GPIO_PORTH_BASE         0x40027000  // GPIO Port H
N#define PWM0_BASE               0x40028000  // Pulse Width Modulator (PWM)
N#define PWM1_BASE               0x40029000  // Pulse Width Modulator (PWM)
N#define QEI0_BASE               0x4002C000  // QEI0
N#define QEI1_BASE               0x4002D000  // QEI1
N#define TIMER0_BASE             0x40030000  // Timer0
N#define TIMER1_BASE             0x40031000  // Timer1
N#define TIMER2_BASE             0x40032000  // Timer2
N#define TIMER3_BASE             0x40033000  // Timer3
N#define TIMER4_BASE             0x40034000  // Timer4
N#define TIMER5_BASE             0x40035000  // Timer5
N#define WTIMER0_BASE            0x40036000  // Wide Timer0
N#define WTIMER1_BASE            0x40037000  // Wide Timer1
N#define ADC0_BASE               0x40038000  // ADC0
N#define ADC1_BASE               0x40039000  // ADC1
N#define COMP_BASE               0x4003C000  // Analog comparators
N#define GPIO_PORTJ_BASE         0x4003D000  // GPIO Port J
N#define CAN0_BASE               0x40040000  // CAN0
N#define CAN1_BASE               0x40041000  // CAN1
N#define WTIMER2_BASE            0x4004C000  // Wide Timer2
N#define WTIMER3_BASE            0x4004D000  // Wide Timer3
N#define WTIMER4_BASE            0x4004E000  // Wide Timer4
N#define WTIMER5_BASE            0x4004F000  // Wide Timer5
N#define USB0_BASE               0x40050000  // USB 0 Controller
N#define GPIO_PORTA_AHB_BASE     0x40058000  // GPIO Port A (high speed)
N#define GPIO_PORTB_AHB_BASE     0x40059000  // GPIO Port B (high speed)
N#define GPIO_PORTC_AHB_BASE     0x4005A000  // GPIO Port C (high speed)
N#define GPIO_PORTD_AHB_BASE     0x4005B000  // GPIO Port D (high speed)
N#define GPIO_PORTE_AHB_BASE     0x4005C000  // GPIO Port E (high speed)
N#define GPIO_PORTF_AHB_BASE     0x4005D000  // GPIO Port F (high speed)
N#define GPIO_PORTG_AHB_BASE     0x4005E000  // GPIO Port G (high speed)
N#define GPIO_PORTH_AHB_BASE     0x4005F000  // GPIO Port H (high speed)
N#define GPIO_PORTJ_AHB_BASE     0x40060000  // GPIO Port J (high speed)
N#define GPIO_PORTK_BASE         0x40061000  // GPIO Port K
N#define GPIO_PORTL_BASE         0x40062000  // GPIO Port L
N#define GPIO_PORTM_BASE         0x40063000  // GPIO Port M
N#define GPIO_PORTN_BASE         0x40064000  // GPIO Port N
N#define GPIO_PORTP_BASE         0x40065000  // GPIO Port P
N#define GPIO_PORTQ_BASE         0x40066000  // GPIO Port Q
N#define GPIO_PORTR_BASE         0x40067000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define GPIO_PORTS_BASE         0x40068000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define GPIO_PORTT_BASE         0x40069000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define EEPROM_BASE             0x400AF000  // EEPROM memory
N#define ONEWIRE0_BASE           0x400B6000  // 1-Wire Master Module
N#define I2C8_BASE               0x400B8000  // I2C8
N#define I2C9_BASE               0x400B9000  // I2C9
N#define I2C4_BASE               0x400C0000  // I2C4
N#define I2C5_BASE               0x400C1000  // I2C5
N#define I2C6_BASE               0x400C2000  // I2C6
N#define I2C7_BASE               0x400C3000  // I2C7
N#define EPI0_BASE               0x400D0000  // EPI0
N#define TIMER6_BASE             0x400E0000  // General-Purpose Timers
N#define TIMER7_BASE             0x400E1000  // General-Purpose Timers
N#define EMAC0_BASE              0x400EC000  // Ethernet Controller
N#define SYSEXC_BASE             0x400F9000  // System Exception Module
N#define HIB_BASE                0x400FC000  // Hibernation Module
N#define FLASH_CTRL_BASE         0x400FD000  // FLASH Controller
N#define SYSCTL_BASE             0x400FE000  // System Control
N#define UDMA_BASE               0x400FF000  // uDMA Controller
N#define CCM0_BASE               0x44030000  // Cyclical Redundancy Check (CRC)
N#define SHAMD5_BASE             0x44034000  // SHA/MD5 Accelerator
N#define AES_BASE                0x44036000  // Advance Encryption
N                                            // Hardware-Accelerated Module
N#define DES_BASE                0x44038000  // Data Encryption Standard
N                                            // Accelerator (DES)
N#define LCD0_BASE               0x44050000  // LCD Controller
N#define ITM_BASE                0xE0000000  // Instrumentation Trace Macrocell
N#define DWT_BASE                0xE0001000  // Data Watchpoint and Trace
N#define FPB_BASE                0xE0002000  // FLASH Patch and Breakpoint
N#define NVIC_BASE               0xE000E000  // Nested Vectored Interrupt Ctrl
N#define TPIU_BASE               0xE0040000  // Trace Port Interface Unit
N
N#endif // __HW_MEMMAP_H__
L 9 "..\inc_h\system.h" 2
N#include <debug.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\nfclib\debug.h" 1
N//*****************************************************************************
N//
N// debug.h - macro for debug output to terminal.
N//
N// Copyright (c) 2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __DEBUG_H__
N#define __DEBUG_H__
N
N//*****************************************************************************
N//
N// Debugging Macros from debug.h in NFCLib. These provide extra debug support.
N//  comment out the undef's if you want to use them.
N//
N// DEBUG_PRINTF enables UART messages
N// DEBUG        enables ASSERT statements for line / file specific information.
N//
N//*****************************************************************************
N//#define DEBUG_PRINT
N//#define DEBUG
N
N#ifdef DEBUG_PRINT
S#include "utils/uartstdio.h"
S#define DebugPrintf(...)        UARTprintf(__VA_ARGS__)
N#else
N#define DebugPrintf(...)
N#endif
N
N//*****************************************************************************
N//
N// Prototype for the function that is called when an invalid argument is passed
N// to an API.  This is only used when doing a DEBUG build.
N//
N//*****************************************************************************
Nextern void __error__(char *pcFilename, uint32_t ui32Line);
N
N//*****************************************************************************
N//
N// The ASSERT macro, which does the actual assertion checking.  Typically, this
N// will be for procedure arguments.
N//
N//*****************************************************************************
N#ifdef DEBUG
S#define ASSERT(expr) do                                                       \
S                     {                                                        \
S                         if(!(expr))                                          \
S                         {                                                    \
S                             __error__(__FILE__, __LINE__);                   \
S                         }                                                    \
S                     }                                                        \
S                     while(0)
X#define ASSERT(expr) do                                                                            {                                                                                 if(!(expr))                                                                   {                                                                                 __error__(__FILE__, __LINE__);                                            }                                                                         }                                                                             while(0)
N#else
N#define ASSERT(expr)
N#endif
N
N#endif //__DEBUG_H__
L 10 "..\inc_h\system.h" 2
N#include <gpio.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\gpio.h" 1
N//*****************************************************************************
N//
N// gpio.h - Defines and Macros for GPIO API.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_GPIO_H__
N#define __DRIVERLIB_GPIO_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following values define the bit field for the ui8Pins argument to
N// several of the APIs.
N//
N//*****************************************************************************
N#define GPIO_PIN_0              0x00000001  // GPIO pin 0
N#define GPIO_PIN_1              0x00000002  // GPIO pin 1
N#define GPIO_PIN_2              0x00000004  // GPIO pin 2
N#define GPIO_PIN_3              0x00000008  // GPIO pin 3
N#define GPIO_PIN_4              0x00000010  // GPIO pin 4
N#define GPIO_PIN_5              0x00000020  // GPIO pin 5
N#define GPIO_PIN_6              0x00000040  // GPIO pin 6
N#define GPIO_PIN_7              0x00000080  // GPIO pin 7
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIODirModeSet as the ui32PinIO parameter, and
N// returned from GPIODirModeGet.
N//
N//*****************************************************************************
N#define GPIO_DIR_MODE_IN        0x00000000  // Pin is a GPIO input
N#define GPIO_DIR_MODE_OUT       0x00000001  // Pin is a GPIO output
N#define GPIO_DIR_MODE_HW        0x00000002  // Pin is a peripheral function
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOIntTypeSet as the ui32IntType parameter,
N// and returned from GPIOIntTypeGet.
N//
N//*****************************************************************************
N#define GPIO_FALLING_EDGE       0x00000000  // Interrupt on falling edge
N#define GPIO_RISING_EDGE        0x00000004  // Interrupt on rising edge
N#define GPIO_BOTH_EDGES         0x00000001  // Interrupt on both edges
N#define GPIO_LOW_LEVEL          0x00000002  // Interrupt on low level
N#define GPIO_HIGH_LEVEL         0x00000006  // Interrupt on high level
N#define GPIO_DISCRETE_INT       0x00010000  // Interrupt for individual pins
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOPadConfigSet as the ui32Strength parameter,
N// and returned by GPIOPadConfigGet in the *pui32Strength parameter.
N//
N//*****************************************************************************
N#define GPIO_STRENGTH_2MA       0x00000001  // 2mA drive strength
N#define GPIO_STRENGTH_4MA       0x00000002  // 4mA drive strength
N#define GPIO_STRENGTH_6MA       0x00000065  // 6mA drive strength
N#define GPIO_STRENGTH_8MA       0x00000066  // 8mA drive strength
N#define GPIO_STRENGTH_8MA_SC    0x0000006E  // 8mA drive with slew rate control
N#define GPIO_STRENGTH_10MA      0x00000075  // 10mA drive strength
N#define GPIO_STRENGTH_12MA      0x00000077  // 12mA drive strength
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOPadConfigSet as the ui32PadType parameter,
N// and returned by GPIOPadConfigGet in the *pui32PadType parameter.
N//
N//*****************************************************************************
N#define GPIO_PIN_TYPE_STD       0x00000008  // Push-pull
N#define GPIO_PIN_TYPE_STD_WPU   0x0000000A  // Push-pull with weak pull-up
N#define GPIO_PIN_TYPE_STD_WPD   0x0000000C  // Push-pull with weak pull-down
N#define GPIO_PIN_TYPE_OD        0x00000009  // Open-drain
N#define GPIO_PIN_TYPE_ANALOG    0x00000000  // Analog comparator
N#define GPIO_PIN_TYPE_WAKE_HIGH 0x00000208  // Hibernate wake, high
N#define GPIO_PIN_TYPE_WAKE_LOW  0x00000108  // Hibernate wake, low
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOIntEnable() and GPIOIntDisable() functions
N// in the ui32IntFlags parameter.
N//
N//*****************************************************************************
N#define GPIO_INT_PIN_0          0x00000001
N#define GPIO_INT_PIN_1          0x00000002
N#define GPIO_INT_PIN_2          0x00000004
N#define GPIO_INT_PIN_3          0x00000008
N#define GPIO_INT_PIN_4          0x00000010
N#define GPIO_INT_PIN_5          0x00000020
N#define GPIO_INT_PIN_6          0x00000040
N#define GPIO_INT_PIN_7          0x00000080
N#define GPIO_INT_DMA            0x00000100
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void GPIODirModeSet(uint32_t ui32Port, uint8_t ui8Pins,
N                           uint32_t ui32PinIO);
Nextern uint32_t GPIODirModeGet(uint32_t ui32Port, uint8_t ui8Pin);
Nextern void GPIOIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
N                           uint32_t ui32IntType);
Nextern uint32_t GPIOIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin);
Nextern void GPIOPadConfigSet(uint32_t ui32Port, uint8_t ui8Pins,
N                             uint32_t ui32Strength, uint32_t ui32PadType);
Nextern void GPIOPadConfigGet(uint32_t ui32Port, uint8_t ui8Pin,
N                             uint32_t *pui32Strength, uint32_t *pui32PadType);
Nextern void GPIOIntEnable(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern void GPIOIntDisable(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern uint32_t GPIOIntStatus(uint32_t ui32Port, bool bMasked);
Xextern uint32_t GPIOIntStatus(uint32_t ui32Port, _Bool bMasked);
Nextern void GPIOIntClear(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern void GPIOIntRegister(uint32_t ui32Port, void (*pfnIntHandler)(void));
Nextern void GPIOIntUnregister(uint32_t ui32Port);
Nextern int32_t GPIOPinRead(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinWrite(uint32_t ui32Port, uint8_t ui8Pins, uint8_t ui8Val);
Nextern void GPIOPinConfigure(uint32_t ui32PinConfig);
Nextern void GPIOPinTypeADC(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeCAN(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeComparator(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEPI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEthernetLED(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEthernetMII(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOInput(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOOutput(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOOutputOD(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeI2C(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeI2CSCL(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeLCD(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypePWM(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeQEI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeSSI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeTimer(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUART(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUSBAnalog(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUSBDigital(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeWakeHigh(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeWakeLow(uint32_t ui32Port, uint8_t ui8Pins);
Nextern uint32_t GPIOPinWakeStatus(uint32_t ui32Port);
Nextern void GPIODMATriggerEnable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIODMATriggerDisable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOADCTriggerEnable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOADCTriggerDisable(uint32_t ui32Port, uint8_t ui8Pins);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_GPIO_H__
L 11 "..\inc_h\system.h" 2
N#include <rom.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\rom.h" 1
N//*****************************************************************************
N//
N// rom.h - Macros to facilitate calling functions in the ROM.
N//
N// Copyright (c) 2007-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_ROM_H__
N#define __DRIVERLIB_ROM_H__
N
N#ifndef DEPRECATED
N//*****************************************************************************
N//
N// ROM selection labels changed between TivaWare 2.0.1 and 2.1.  The following
N// labels are intended to ensure backwards compatibility for applications
N// which have not yet been updated to use the replacement labels.
N//
N//*****************************************************************************
N#ifdef TARGET_IS_SNOWFLAKE_RA0
S#define TARGET_IS_TM4C129_RA0
N#endif
N#ifdef TARGET_IS_SNOWFLAKE_RA1
S#define TARGET_IS_TM4C129_RA1
N#endif
N#ifdef TARGET_IS_BLIZZARD_RA1
S#define TARGET_IS_TM4C123_RA1
N#endif
N#ifdef TARGET_IS_BLIZZARD_RA2
S#define TARGET_IS_TM4C123_RA2
N#endif
N#ifdef TARGET_IS_BLIZZARD_RA3
S#define TARGET_IS_TM4C123_RA3
N#endif
N#ifdef TARGET_IS_BLIZZARD_RB0
S#define TARGET_IS_TM4C123_RB0
N#endif
N#ifdef TARGET_IS_BLIZZARD_RB1
S#define TARGET_IS_TM4C123_RB1
N#endif
N#endif
N
N//*****************************************************************************
N//
N// Pointers to the main API tables.
N//
N//*****************************************************************************
N#define ROM_APITABLE            ((uint32_t *)0x01000010)
N#define ROM_VERSION             (ROM_APITABLE[0])
N#define ROM_UARTTABLE           ((uint32_t *)(ROM_APITABLE[1]))
N#define ROM_SSITABLE            ((uint32_t *)(ROM_APITABLE[2]))
N#define ROM_I2CTABLE            ((uint32_t *)(ROM_APITABLE[3]))
N#define ROM_GPIOTABLE           ((uint32_t *)(ROM_APITABLE[4]))
N#define ROM_ADCTABLE            ((uint32_t *)(ROM_APITABLE[5]))
N#define ROM_COMPARATORTABLE     ((uint32_t *)(ROM_APITABLE[6]))
N#define ROM_FLASHTABLE          ((uint32_t *)(ROM_APITABLE[7]))
N#define ROM_PWMTABLE            ((uint32_t *)(ROM_APITABLE[8]))
N#define ROM_QEITABLE            ((uint32_t *)(ROM_APITABLE[9]))
N#define ROM_SYSTICKTABLE        ((uint32_t *)(ROM_APITABLE[10]))
N#define ROM_TIMERTABLE          ((uint32_t *)(ROM_APITABLE[11]))
N#define ROM_WATCHDOGTABLE       ((uint32_t *)(ROM_APITABLE[12]))
N#define ROM_SYSCTLTABLE         ((uint32_t *)(ROM_APITABLE[13]))
N#define ROM_INTERRUPTTABLE      ((uint32_t *)(ROM_APITABLE[14]))
N#define ROM_USBTABLE            ((uint32_t *)(ROM_APITABLE[16]))
N#define ROM_UDMATABLE           ((uint32_t *)(ROM_APITABLE[17]))
N#define ROM_CANTABLE            ((uint32_t *)(ROM_APITABLE[18]))
N#define ROM_HIBERNATETABLE      ((uint32_t *)(ROM_APITABLE[19]))
N#define ROM_MPUTABLE            ((uint32_t *)(ROM_APITABLE[20]))
N#define ROM_SOFTWARETABLE       ((uint32_t *)(ROM_APITABLE[21]))
N#define ROM_EPITABLE            ((uint32_t *)(ROM_APITABLE[23]))
N#define ROM_EEPROMTABLE         ((uint32_t *)(ROM_APITABLE[24]))
N#define ROM_FPUTABLE            ((uint32_t *)(ROM_APITABLE[26]))
N#define ROM_SMBUSTABLE          ((uint32_t *)(ROM_APITABLE[29]))
N#define ROM_SYSEXCTABLE         ((uint32_t *)(ROM_APITABLE[30]))
N#define ROM_ONEWIRETABLE        ((uint32_t *)(ROM_APITABLE[34]))
N#define ROM_SPIFLASHTABLE       ((uint32_t *)(ROM_APITABLE[38]))
N#define ROM_LCDTABLE            ((uint32_t *)(ROM_APITABLE[41]))
N#define ROM_EMACTABLE           ((uint32_t *)(ROM_APITABLE[42]))
N#define ROM_AESTABLE            ((uint32_t *)(ROM_APITABLE[43]))
N#define ROM_CRCTABLE            ((uint32_t *)(ROM_APITABLE[44]))
N#define ROM_DESTABLE            ((uint32_t *)(ROM_APITABLE[45]))
N#define ROM_SHAMD5TABLE         ((uint32_t *)(ROM_APITABLE[46]))
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the ADC API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceDataGet                                                \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32SequenceNum,                               \
N                      uint32_t *pui32Buffer))ROM_ADCTABLE[0])
X#define ROM_ADCSequenceDataGet                                                        ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum,                                                     uint32_t *pui32Buffer))ROM_ADCTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCIntDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[1])
X#define ROM_ADCIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCIntEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[2])
X#define ROM_ADCIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCIntStatus                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32SequenceNum,                              \
N                       bool bMasked))ROM_ADCTABLE[3])
X#define ROM_ADCIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum,                                                     bool bMasked))ROM_ADCTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCIntClear                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[4])
X#define ROM_ADCIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceEnable                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[5])
X#define ROM_ADCSequenceEnable                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceDisable                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[6])
X#define ROM_ADCSequenceDisable                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceConfigure                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum,                                  \
N                   uint32_t ui32Trigger,                                      \
N                   uint32_t ui32Priority))ROM_ADCTABLE[7])
X#define ROM_ADCSequenceConfigure                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum,                                                     uint32_t ui32Trigger,                                                         uint32_t ui32Priority))ROM_ADCTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceStepConfigure                                          \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum,                                  \
N                   uint32_t ui32Step,                                         \
N                   uint32_t ui32Config))ROM_ADCTABLE[8])
X#define ROM_ADCSequenceStepConfigure                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum,                                                     uint32_t ui32Step,                                                            uint32_t ui32Config))ROM_ADCTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceOverflow                                               \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32SequenceNum))ROM_ADCTABLE[9])
X#define ROM_ADCSequenceOverflow                                                       ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceOverflowClear                                          \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[10])
X#define ROM_ADCSequenceOverflowClear                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceUnderflow                                              \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32SequenceNum))ROM_ADCTABLE[11])
X#define ROM_ADCSequenceUnderflow                                                      ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCSequenceUnderflowClear                                         \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[12])
X#define ROM_ADCSequenceUnderflowClear                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCProcessorTrigger                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[13])
X#define ROM_ADCProcessorTrigger                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCHardwareOversampleConfigure                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Factor))ROM_ADCTABLE[14])
X#define ROM_ADCHardwareOversampleConfigure                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Factor))ROM_ADCTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorConfigure                                            \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp,                                         \
N                   uint32_t ui32Config))ROM_ADCTABLE[15])
X#define ROM_ADCComparatorConfigure                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp,                                                            uint32_t ui32Config))ROM_ADCTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorRegionSet                                            \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp,                                         \
N                   uint32_t ui32LowRef,                                       \
N                   uint32_t ui32HighRef))ROM_ADCTABLE[16])
X#define ROM_ADCComparatorRegionSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp,                                                            uint32_t ui32LowRef,                                                          uint32_t ui32HighRef))ROM_ADCTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorReset                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp,                                         \
N                   bool bTrigger,                                             \
N                   bool bInterrupt))ROM_ADCTABLE[17])
X#define ROM_ADCComparatorReset                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp,                                                            bool bTrigger,                                                                bool bInterrupt))ROM_ADCTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorIntDisable                                           \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[18])
X#define ROM_ADCComparatorIntDisable                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorIntEnable                                            \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SequenceNum))ROM_ADCTABLE[19])
X#define ROM_ADCComparatorIntEnable                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorIntStatus                                            \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[20])
X#define ROM_ADCComparatorIntStatus                                                    ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCComparatorIntClear                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Status))ROM_ADCTABLE[21])
X#define ROM_ADCComparatorIntClear                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Status))ROM_ADCTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCReferenceSet                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Ref))ROM_ADCTABLE[22])
X#define ROM_ADCReferenceSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Ref))ROM_ADCTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCReferenceGet                                                   \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[23])
X#define ROM_ADCReferenceGet                                                           ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCPhaseDelaySet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Phase))ROM_ADCTABLE[24])
X#define ROM_ADCPhaseDelaySet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Phase))ROM_ADCTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ADCPhaseDelayGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[25])
X#define ROM_ADCPhaseDelayGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_ADCTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_ADCIntClearEx                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ADCTABLE[28])
X#define ROM_ADCIntClearEx                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ADCTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_ADCIntDisableEx                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ADCTABLE[29])
X#define ROM_ADCIntDisableEx                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ADCTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_ADCIntEnableEx                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ADCTABLE[30])
X#define ROM_ADCIntEnableEx                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ADCTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_ADCIntStatusEx                                                    \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_ADCTABLE[31])
X#define ROM_ADCIntStatusEx                                                            ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_ADCTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_ADCSequenceDMAEnable                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32SequenceNum))ROM_ADCTABLE[32])
X#define ROM_ADCSequenceDMAEnable                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_ADCSequenceDMADisable                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32SequenceNum))ROM_ADCTABLE[33])
X#define ROM_ADCSequenceDMADisable                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SequenceNum))ROM_ADCTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_ADCBusy                                                           \
S        ((bool (*)(uint32_t ui32Base))ROM_ADCTABLE[34])
X#define ROM_ADCBusy                                                                   ((bool (*)(uint32_t ui32Base))ROM_ADCTABLE[34])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the AES API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESIntStatus                                                      \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_AESTABLE[0])
X#define ROM_AESIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_AESTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESAuthLengthSet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Length))ROM_AESTABLE[1])
X#define ROM_AESAuthLengthSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Length))ROM_AESTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESConfigSet                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_AESTABLE[2])
X#define ROM_AESConfigSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_AESTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESDataAuth                                                       \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src,                                        \
S                   uint32_t ui32Length,                                       \
S                   uint32_t *pui32Tag))ROM_AESTABLE[3])
X#define ROM_AESDataAuth                                                               ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src,                                                           uint32_t ui32Length,                                                          uint32_t *pui32Tag))ROM_AESTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESDataProcess                                                    \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src,                                        \
S                   uint32_t *pui32Dest,                                       \
S                   uint32_t ui32Length))ROM_AESTABLE[4])
X#define ROM_AESDataProcess                                                            ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src,                                                           uint32_t *pui32Dest,                                                          uint32_t ui32Length))ROM_AESTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESDataProcessAuth                                                \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src,                                        \
S                   uint32_t *pui32Dest,                                       \
S                   uint32_t ui32Length,                                       \
S                   uint32_t *pui32AuthSrc,                                    \
S                   uint32_t ui32AuthLength,                                   \
S                   uint32_t *pui32Tag))ROM_AESTABLE[5])
X#define ROM_AESDataProcessAuth                                                        ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src,                                                           uint32_t *pui32Dest,                                                          uint32_t ui32Length,                                                          uint32_t *pui32AuthSrc,                                                       uint32_t ui32AuthLength,                                                      uint32_t *pui32Tag))ROM_AESTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESDataRead                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Dest))ROM_AESTABLE[6])
X#define ROM_AESDataRead                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Dest))ROM_AESTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESDataReadNonBlocking                                            \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Dest))ROM_AESTABLE[7])
X#define ROM_AESDataReadNonBlocking                                                    ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Dest))ROM_AESTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESDataWrite                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_AESTABLE[8])
X#define ROM_AESDataWrite                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_AESTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESDataWriteNonBlocking                                           \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_AESTABLE[9])
X#define ROM_AESDataWriteNonBlocking                                                   ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_AESTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESDMADisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags))ROM_AESTABLE[10])
X#define ROM_AESDMADisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_AESTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESDMAEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags))ROM_AESTABLE[11])
X#define ROM_AESDMAEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_AESTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESIntClear                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_AESTABLE[12])
X#define ROM_AESIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_AESTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESIntDisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_AESTABLE[13])
X#define ROM_AESIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_AESTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESIntEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_AESTABLE[14])
X#define ROM_AESIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_AESTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESIVSet                                                          \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32IVdata))ROM_AESTABLE[15])
X#define ROM_AESIVSet                                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32IVdata))ROM_AESTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESKey1Set                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Key,                                        \
S                   uint32_t ui32Keysize))ROM_AESTABLE[16])
X#define ROM_AESKey1Set                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Key,                                                           uint32_t ui32Keysize))ROM_AESTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESKey2Set                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Key,                                        \
S                   uint32_t ui32Keysize))ROM_AESTABLE[17])
X#define ROM_AESKey2Set                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Key,                                                           uint32_t ui32Keysize))ROM_AESTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESKey3Set                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Key))ROM_AESTABLE[18])
X#define ROM_AESKey3Set                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Key))ROM_AESTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESLengthSet                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint64_t ui64Length))ROM_AESTABLE[19])
X#define ROM_AESLengthSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint64_t ui64Length))ROM_AESTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESReset                                                          \
S        ((void (*)(uint32_t ui32Base))ROM_AESTABLE[20])
X#define ROM_AESReset                                                                  ((void (*)(uint32_t ui32Base))ROM_AESTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_AESTagRead                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32TagData))ROM_AESTABLE[21])
X#define ROM_AESTagRead                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32TagData))ROM_AESTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_AESIVRead                                                         \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32IVdata))ROM_AESTABLE[22])
X#define ROM_AESIVRead                                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32IVdata))ROM_AESTABLE[22])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the CAN API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANIntClear                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntClr))ROM_CANTABLE[0])
X#define ROM_CANIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntClr))ROM_CANTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANInit                                                           \
N        ((void (*)(uint32_t ui32Base))ROM_CANTABLE[1])
X#define ROM_CANInit                                                                   ((void (*)(uint32_t ui32Base))ROM_CANTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANEnable                                                         \
N        ((void (*)(uint32_t ui32Base))ROM_CANTABLE[2])
X#define ROM_CANEnable                                                                 ((void (*)(uint32_t ui32Base))ROM_CANTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANDisable                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_CANTABLE[3])
X#define ROM_CANDisable                                                                ((void (*)(uint32_t ui32Base))ROM_CANTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANBitTimingSet                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   tCANBitClkParms *psClkParms))ROM_CANTABLE[4])
X#define ROM_CANBitTimingSet                                                           ((void (*)(uint32_t ui32Base,                                                            tCANBitClkParms *psClkParms))ROM_CANTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANBitTimingGet                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   tCANBitClkParms *psClkParms))ROM_CANTABLE[5])
X#define ROM_CANBitTimingGet                                                           ((void (*)(uint32_t ui32Base,                                                            tCANBitClkParms *psClkParms))ROM_CANTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANMessageSet                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32ObjID,                                        \
N                   tCANMsgObject *psMsgObject,                                \
N                   tMsgObjType eMsgType))ROM_CANTABLE[6])
X#define ROM_CANMessageSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ObjID,                                                           tCANMsgObject *psMsgObject,                                                   tMsgObjType eMsgType))ROM_CANTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANMessageGet                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32ObjID,                                        \
N                   tCANMsgObject *psMsgObject,                                \
N                   bool bClrPendingInt))ROM_CANTABLE[7])
X#define ROM_CANMessageGet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ObjID,                                                           tCANMsgObject *psMsgObject,                                                   bool bClrPendingInt))ROM_CANTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANStatusGet                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       tCANStsReg eStatusReg))ROM_CANTABLE[8])
X#define ROM_CANStatusGet                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            tCANStsReg eStatusReg))ROM_CANTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANMessageClear                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32ObjID))ROM_CANTABLE[9])
X#define ROM_CANMessageClear                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ObjID))ROM_CANTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANIntEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_CANTABLE[10])
X#define ROM_CANIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_CANTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANIntDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_CANTABLE[11])
X#define ROM_CANIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_CANTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANIntStatus                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       tCANIntStsReg eIntStsReg))ROM_CANTABLE[12])
X#define ROM_CANIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            tCANIntStsReg eIntStsReg))ROM_CANTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANRetryGet                                                       \
N        ((bool (*)(uint32_t ui32Base))ROM_CANTABLE[13])
X#define ROM_CANRetryGet                                                               ((bool (*)(uint32_t ui32Base))ROM_CANTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANRetrySet                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   bool bAutoRetry))ROM_CANTABLE[14])
X#define ROM_CANRetrySet                                                               ((void (*)(uint32_t ui32Base,                                                            bool bAutoRetry))ROM_CANTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANErrCntrGet                                                     \
N        ((bool (*)(uint32_t ui32Base,                                         \
N                   uint32_t *pui32RxCount,                                    \
N                   uint32_t *pui32TxCount))ROM_CANTABLE[15])
X#define ROM_CANErrCntrGet                                                             ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32RxCount,                                                       uint32_t *pui32TxCount))ROM_CANTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_CANBitRateSet                                                     \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32SourceClock,                              \
N                       uint32_t ui32BitRate))ROM_CANTABLE[16])
X#define ROM_CANBitRateSet                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32SourceClock,                                                     uint32_t ui32BitRate))ROM_CANTABLE[16])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Comparator API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorIntClear                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp))ROM_COMPARATORTABLE[0])
X#define ROM_ComparatorIntClear                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp))ROM_COMPARATORTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorConfigure                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp,                                         \
N                   uint32_t ui32Config))ROM_COMPARATORTABLE[1])
X#define ROM_ComparatorConfigure                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp,                                                            uint32_t ui32Config))ROM_COMPARATORTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorRefSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Ref))ROM_COMPARATORTABLE[2])
X#define ROM_ComparatorRefSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Ref))ROM_COMPARATORTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorValueGet                                                \
N        ((bool (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp))ROM_COMPARATORTABLE[3])
X#define ROM_ComparatorValueGet                                                        ((bool (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp))ROM_COMPARATORTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorIntEnable                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp))ROM_COMPARATORTABLE[4])
X#define ROM_ComparatorIntEnable                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp))ROM_COMPARATORTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorIntDisable                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp))ROM_COMPARATORTABLE[5])
X#define ROM_ComparatorIntDisable                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp))ROM_COMPARATORTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_ComparatorIntStatus                                               \
N        ((bool (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Comp,                                         \
N                   bool bMasked))ROM_COMPARATORTABLE[6])
X#define ROM_ComparatorIntStatus                                                       ((bool (*)(uint32_t ui32Base,                                                            uint32_t ui32Comp,                                                            bool bMasked))ROM_COMPARATORTABLE[6])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the CRC API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_CRCConfigSet                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CRCConfig))ROM_CRCTABLE[0])
X#define ROM_CRCConfigSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CRCConfig))ROM_CRCTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_CRCDataProcess                                                    \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t *pui32DataIn,                                 \
S                       uint32_t ui32DataLength,                               \
S                       bool bPPResult))ROM_CRCTABLE[1])
X#define ROM_CRCDataProcess                                                            ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t *pui32DataIn,                                                        uint32_t ui32DataLength,                                                      bool bPPResult))ROM_CRCTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_CRCDataWrite                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Data))ROM_CRCTABLE[2])
X#define ROM_CRCDataWrite                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Data))ROM_CRCTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_CRCResultRead                                                     \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bPPResult))ROM_CRCTABLE[3])
X#define ROM_CRCResultRead                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            bool bPPResult))ROM_CRCTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_CRCSeedSet                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Seed))ROM_CRCTABLE[4])
X#define ROM_CRCSeedSet                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Seed))ROM_CRCTABLE[4])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the DES API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESIntStatus                                                      \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_DESTABLE[0])
X#define ROM_DESIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_DESTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESConfigSet                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_DESTABLE[1])
X#define ROM_DESConfigSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_DESTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESDataRead                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Dest))ROM_DESTABLE[2])
X#define ROM_DESDataRead                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Dest))ROM_DESTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESDataReadNonBlocking                                            \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Dest))ROM_DESTABLE[3])
X#define ROM_DESDataReadNonBlocking                                                    ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Dest))ROM_DESTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESDataProcess                                                    \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src,                                        \
S                   uint32_t *pui32Dest,                                       \
S                   uint32_t ui32Length))ROM_DESTABLE[4])
X#define ROM_DESDataProcess                                                            ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src,                                                           uint32_t *pui32Dest,                                                          uint32_t ui32Length))ROM_DESTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESDataWrite                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_DESTABLE[5])
X#define ROM_DESDataWrite                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_DESTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESDataWriteNonBlocking                                           \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_DESTABLE[6])
X#define ROM_DESDataWriteNonBlocking                                                   ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_DESTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESDMADisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags))ROM_DESTABLE[7])
X#define ROM_DESDMADisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_DESTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESDMAEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags))ROM_DESTABLE[8])
X#define ROM_DESDMAEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_DESTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESIntClear                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_DESTABLE[9])
X#define ROM_DESIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_DESTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESIntDisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_DESTABLE[10])
X#define ROM_DESIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_DESTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESIntEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_DESTABLE[11])
X#define ROM_DESIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_DESTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESIVSet                                                          \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32IVdata))ROM_DESTABLE[12])
X#define ROM_DESIVSet                                                                  ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32IVdata))ROM_DESTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESKeySet                                                         \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Key))ROM_DESTABLE[13])
X#define ROM_DESKeySet                                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Key))ROM_DESTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESLengthSet                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Length))ROM_DESTABLE[14])
X#define ROM_DESLengthSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Length))ROM_DESTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_DESReset                                                          \
S        ((void (*)(uint32_t ui32Base))ROM_DESTABLE[15])
X#define ROM_DESReset                                                                  ((void (*)(uint32_t ui32Base))ROM_DESTABLE[15])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the EEPROM API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMRead                                                        \
N        ((void (*)(uint32_t *pui32Data,                                       \
N                   uint32_t ui32Address,                                      \
N                   uint32_t ui32Count))ROM_EEPROMTABLE[0])
X#define ROM_EEPROMRead                                                                ((void (*)(uint32_t *pui32Data,                                                          uint32_t ui32Address,                                                         uint32_t ui32Count))ROM_EEPROMTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockCountGet                                               \
N        ((uint32_t (*)(void))ROM_EEPROMTABLE[1])
X#define ROM_EEPROMBlockCountGet                                                       ((uint32_t (*)(void))ROM_EEPROMTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockHide                                                   \
N        ((void (*)(uint32_t ui32Block))ROM_EEPROMTABLE[2])
X#define ROM_EEPROMBlockHide                                                           ((void (*)(uint32_t ui32Block))ROM_EEPROMTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockLock                                                   \
N        ((uint32_t (*)(uint32_t ui32Block))ROM_EEPROMTABLE[3])
X#define ROM_EEPROMBlockLock                                                           ((uint32_t (*)(uint32_t ui32Block))ROM_EEPROMTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockPasswordSet                                            \
N        ((uint32_t (*)(uint32_t ui32Block,                                    \
N                       uint32_t *pui32Password,                               \
N                       uint32_t ui32Count))ROM_EEPROMTABLE[4])
X#define ROM_EEPROMBlockPasswordSet                                                    ((uint32_t (*)(uint32_t ui32Block,                                                           uint32_t *pui32Password,                                                      uint32_t ui32Count))ROM_EEPROMTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockProtectGet                                             \
N        ((uint32_t (*)(uint32_t ui32Block))ROM_EEPROMTABLE[5])
X#define ROM_EEPROMBlockProtectGet                                                     ((uint32_t (*)(uint32_t ui32Block))ROM_EEPROMTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockProtectSet                                             \
N        ((uint32_t (*)(uint32_t ui32Block,                                    \
N                       uint32_t ui32Protect))ROM_EEPROMTABLE[6])
X#define ROM_EEPROMBlockProtectSet                                                     ((uint32_t (*)(uint32_t ui32Block,                                                           uint32_t ui32Protect))ROM_EEPROMTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMBlockUnlock                                                 \
N        ((uint32_t (*)(uint32_t ui32Block,                                    \
N                       uint32_t *pui32Password,                               \
N                       uint32_t ui32Count))ROM_EEPROMTABLE[7])
X#define ROM_EEPROMBlockUnlock                                                         ((uint32_t (*)(uint32_t ui32Block,                                                           uint32_t *pui32Password,                                                      uint32_t ui32Count))ROM_EEPROMTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMIntClear                                                    \
N        ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[8])
X#define ROM_EEPROMIntClear                                                            ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMIntDisable                                                  \
N        ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[9])
X#define ROM_EEPROMIntDisable                                                          ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMIntEnable                                                   \
N        ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[10])
X#define ROM_EEPROMIntEnable                                                           ((void (*)(uint32_t ui32IntFlags))ROM_EEPROMTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMIntStatus                                                   \
N        ((uint32_t (*)(bool bMasked))ROM_EEPROMTABLE[11])
X#define ROM_EEPROMIntStatus                                                           ((uint32_t (*)(bool bMasked))ROM_EEPROMTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 1L ||                                             0L
N#define ROM_EEPROMMassErase                                                   \
N        ((uint32_t (*)(void))ROM_EEPROMTABLE[12])
X#define ROM_EEPROMMassErase                                                           ((uint32_t (*)(void))ROM_EEPROMTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMProgram                                                     \
N        ((uint32_t (*)(uint32_t *pui32Data,                                   \
N                       uint32_t ui32Address,                                  \
N                       uint32_t ui32Count))ROM_EEPROMTABLE[13])
X#define ROM_EEPROMProgram                                                             ((uint32_t (*)(uint32_t *pui32Data,                                                          uint32_t ui32Address,                                                         uint32_t ui32Count))ROM_EEPROMTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMProgramNonBlocking                                          \
N        ((uint32_t (*)(uint32_t ui32Data,                                     \
N                       uint32_t ui32Address))ROM_EEPROMTABLE[14])
X#define ROM_EEPROMProgramNonBlocking                                                  ((uint32_t (*)(uint32_t ui32Data,                                                            uint32_t ui32Address))ROM_EEPROMTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMSizeGet                                                     \
N        ((uint32_t (*)(void))ROM_EEPROMTABLE[15])
X#define ROM_EEPROMSizeGet                                                             ((uint32_t (*)(void))ROM_EEPROMTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMStatusGet                                                   \
N        ((uint32_t (*)(void))ROM_EEPROMTABLE[16])
X#define ROM_EEPROMStatusGet                                                           ((uint32_t (*)(void))ROM_EEPROMTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_EEPROMInit                                                        \
N        ((uint32_t (*)(void))ROM_EEPROMTABLE[17])
X#define ROM_EEPROMInit                                                                ((uint32_t (*)(void))ROM_EEPROMTABLE[17])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the EPI API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIIntStatus                                                      \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_EPITABLE[0])
X#define ROM_EPIIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_EPITABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIModeSet                                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Mode))ROM_EPITABLE[1])
X#define ROM_EPIModeSet                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_EPITABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIDividerSet                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Divider))ROM_EPITABLE[2])
X#define ROM_EPIDividerSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Divider))ROM_EPITABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIConfigSDRAMSet                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32Refresh))ROM_EPITABLE[3])
X#define ROM_EPIConfigSDRAMSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32Refresh))ROM_EPITABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIConfigGPModeSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32FrameCount,                                   \
S                   uint32_t ui32MaxWait))ROM_EPITABLE[4])
X#define ROM_EPIConfigGPModeSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32FrameCount,                                                      uint32_t ui32MaxWait))ROM_EPITABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIConfigHB8Set                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32MaxWait))ROM_EPITABLE[5])
X#define ROM_EPIConfigHB8Set                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32MaxWait))ROM_EPITABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIConfigHB16Set                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32MaxWait))ROM_EPITABLE[6])
X#define ROM_EPIConfigHB16Set                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32MaxWait))ROM_EPITABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIAddressMapSet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Map))ROM_EPITABLE[7])
X#define ROM_EPIAddressMapSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Map))ROM_EPITABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPINonBlockingReadConfigure                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel,                                      \
S                   uint32_t ui32DataSize,                                     \
S                   uint32_t ui32Address))ROM_EPITABLE[8])
X#define ROM_EPINonBlockingReadConfigure                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel,                                                         uint32_t ui32DataSize,                                                        uint32_t ui32Address))ROM_EPITABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPINonBlockingReadStart                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel,                                      \
S                   uint32_t ui32Count))ROM_EPITABLE[9])
X#define ROM_EPINonBlockingReadStart                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel,                                                         uint32_t ui32Count))ROM_EPITABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPINonBlockingReadStop                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel))ROM_EPITABLE[10])
X#define ROM_EPINonBlockingReadStop                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_EPITABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPINonBlockingReadCount                                           \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Channel))ROM_EPITABLE[11])
X#define ROM_EPINonBlockingReadCount                                                   ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_EPITABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPINonBlockingReadAvail                                           \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[12])
X#define ROM_EPINonBlockingReadAvail                                                   ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPINonBlockingReadGet32                                           \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Count,                                    \
S                       uint32_t *pui32Buf))ROM_EPITABLE[13])
X#define ROM_EPINonBlockingReadGet32                                                   ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Count,                                                           uint32_t *pui32Buf))ROM_EPITABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPINonBlockingReadGet16                                           \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Count,                                    \
S                       uint16_t *pui16Buf))ROM_EPITABLE[14])
X#define ROM_EPINonBlockingReadGet16                                                   ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Count,                                                           uint16_t *pui16Buf))ROM_EPITABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPINonBlockingReadGet8                                            \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Count,                                    \
S                       uint8_t *pui8Buf))ROM_EPITABLE[15])
X#define ROM_EPINonBlockingReadGet8                                                    ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Count,                                                           uint8_t *pui8Buf))ROM_EPITABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIFIFOConfig                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_EPITABLE[16])
X#define ROM_EPIFIFOConfig                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_EPITABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIWriteFIFOCountGet                                              \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[17])
X#define ROM_EPIWriteFIFOCountGet                                                      ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIIntEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_EPITABLE[18])
X#define ROM_EPIIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_EPITABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIIntDisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_EPITABLE[19])
X#define ROM_EPIIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_EPITABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIIntErrorStatus                                                 \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[20])
X#define ROM_EPIIntErrorStatus                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_EPITABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIIntErrorClear                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32ErrFlags))ROM_EPITABLE[21])
X#define ROM_EPIIntErrorClear                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ErrFlags))ROM_EPITABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIDividerCSSet                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32Divider))ROM_EPITABLE[22])
X#define ROM_EPIDividerCSSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32Divider))ROM_EPITABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIDMATxCount                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Count))ROM_EPITABLE[23])
X#define ROM_EPIDMATxCount                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Count))ROM_EPITABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIConfigHB8CSSet                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32Config))ROM_EPITABLE[24])
X#define ROM_EPIConfigHB8CSSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32Config))ROM_EPITABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIConfigHB16CSSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32Config))ROM_EPITABLE[25])
X#define ROM_EPIConfigHB16CSSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32Config))ROM_EPITABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIConfigHB8TimingSet                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32Config))ROM_EPITABLE[26])
X#define ROM_EPIConfigHB8TimingSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32Config))ROM_EPITABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIConfigHB16TimingSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32Config))ROM_EPITABLE[27])
X#define ROM_EPIConfigHB16TimingSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32Config))ROM_EPITABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIPSRAMConfigRegSet                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t ui32CR))ROM_EPITABLE[28])
X#define ROM_EPIPSRAMConfigRegSet                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t ui32CR))ROM_EPITABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIPSRAMConfigRegRead                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS))ROM_EPITABLE[29])
X#define ROM_EPIPSRAMConfigRegRead                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS))ROM_EPITABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIPSRAMConfigRegGetNonBlocking                                   \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint32_t *pui32CR))ROM_EPITABLE[30])
X#define ROM_EPIPSRAMConfigRegGetNonBlocking                                           ((bool (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint32_t *pui32CR))ROM_EPITABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EPIPSRAMConfigRegGet                                              \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32CS))ROM_EPITABLE[31])
X#define ROM_EPIPSRAMConfigRegGet                                                      ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32CS))ROM_EPITABLE[31])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the EMAC API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACIntStatus                                                     \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_EMACTABLE[0])
X#define ROM_EMACIntStatus                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_EMACTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACAddrGet                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Index,                                        \
S                   uint8_t *pui8MACAddr))ROM_EMACTABLE[1])
X#define ROM_EMACAddrGet                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Index,                                                           uint8_t *pui8MACAddr))ROM_EMACTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACAddrSet                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Index,                                        \
S                   const uint8_t *pui8MACAddr))ROM_EMACTABLE[2])
X#define ROM_EMACAddrSet                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Index,                                                           const uint8_t *pui8MACAddr))ROM_EMACTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACConfigGet                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Config,                                     \
S                   uint32_t *pui32Mode,                                       \
S                   uint32_t *pui32RxMaxFrameSize))ROM_EMACTABLE[3])
X#define ROM_EMACConfigGet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Config,                                                        uint32_t *pui32Mode,                                                          uint32_t *pui32RxMaxFrameSize))ROM_EMACTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACConfigSet                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32ModeFlags,                                    \
S                   uint32_t ui32RxMaxFrameSize))ROM_EMACTABLE[4])
X#define ROM_EMACConfigSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32ModeFlags,                                                       uint32_t ui32RxMaxFrameSize))ROM_EMACTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACDMAStateGet                                                   \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[5])
X#define ROM_EMACDMAStateGet                                                           ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACFrameFilterGet                                                \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[6])
X#define ROM_EMACFrameFilterGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACFrameFilterSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32FilterOpts))ROM_EMACTABLE[7])
X#define ROM_EMACFrameFilterSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32FilterOpts))ROM_EMACTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACInit                                                          \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32SysClk,                                       \
S                   uint32_t ui32BusConfig,                                    \
S                   uint32_t ui32RxBurst,                                      \
S                   uint32_t ui32TxBurst,                                      \
S                   uint32_t ui32DescSkipSize))ROM_EMACTABLE[8])
X#define ROM_EMACInit                                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SysClk,                                                          uint32_t ui32BusConfig,                                                       uint32_t ui32RxBurst,                                                         uint32_t ui32TxBurst,                                                         uint32_t ui32DescSkipSize))ROM_EMACTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACIntClear                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_EMACTABLE[9])
X#define ROM_EMACIntClear                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_EMACTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACIntDisable                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_EMACTABLE[10])
X#define ROM_EMACIntDisable                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_EMACTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACIntEnable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_EMACTABLE[11])
X#define ROM_EMACIntEnable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_EMACTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACPHYConfigSet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_EMACTABLE[12])
X#define ROM_EMACPHYConfigSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_EMACTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACPHYPowerOff                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8PhyAddr))ROM_EMACTABLE[13])
X#define ROM_EMACPHYPowerOff                                                           ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8PhyAddr))ROM_EMACTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACPHYPowerOn                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8PhyAddr))ROM_EMACTABLE[14])
X#define ROM_EMACPHYPowerOn                                                            ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8PhyAddr))ROM_EMACTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACPHYRead                                                       \
S        ((uint16_t (*)(uint32_t ui32Base,                                     \
S                        uint8_t ui8PhyAddr,                                   \
S                       uint8_t ui8RegAddr))ROM_EMACTABLE[15])
X#define ROM_EMACPHYRead                                                               ((uint16_t (*)(uint32_t ui32Base,                                                             uint8_t ui8PhyAddr,                                                          uint8_t ui8RegAddr))ROM_EMACTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACPHYWrite                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8PhyAddr,                                        \
S                   uint8_t ui8RegAddr,                                        \
S                   uint16_t ui16Data))ROM_EMACTABLE[16])
X#define ROM_EMACPHYWrite                                                              ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8PhyAddr,                                                           uint8_t ui8RegAddr,                                                           uint16_t ui16Data))ROM_EMACTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACReset                                                         \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[17])
X#define ROM_EMACReset                                                                 ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACRxDisable                                                     \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[18])
X#define ROM_EMACRxDisable                                                             ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACRxDMACurrentBufferGet                                         \
S        ((uint8_t * (*)(uint32_t ui32Base))ROM_EMACTABLE[19])
X#define ROM_EMACRxDMACurrentBufferGet                                                 ((uint8_t * (*)(uint32_t ui32Base))ROM_EMACTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACRxDMACurrentDescriptorGet                                     \
S        ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[20])
X#define ROM_EMACRxDMACurrentDescriptorGet                                             ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACRxDMADescriptorListGet                                        \
S        ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[21])
X#define ROM_EMACRxDMADescriptorListGet                                                ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACRxDMADescriptorListSet                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   tEMACDMADescriptor *pDescriptor))ROM_EMACTABLE[22])
X#define ROM_EMACRxDMADescriptorListSet                                                ((void (*)(uint32_t ui32Base,                                                            tEMACDMADescriptor *pDescriptor))ROM_EMACTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACRxDMAPollDemand                                               \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[23])
X#define ROM_EMACRxDMAPollDemand                                                       ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACRxEnable                                                      \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[24])
X#define ROM_EMACRxEnable                                                              ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACRxWatchdogTimerSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Timeout))ROM_EMACTABLE[25])
X#define ROM_EMACRxWatchdogTimerSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Timeout))ROM_EMACTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACStatusGet                                                     \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[26])
X#define ROM_EMACStatusGet                                                             ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACTxDisable                                                     \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[27])
X#define ROM_EMACTxDisable                                                             ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACTxDMACurrentBufferGet                                         \
S        ((uint8_t * (*)(uint32_t ui32Base))ROM_EMACTABLE[28])
X#define ROM_EMACTxDMACurrentBufferGet                                                 ((uint8_t * (*)(uint32_t ui32Base))ROM_EMACTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACTxDMACurrentDescriptorGet                                     \
S        ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[29])
X#define ROM_EMACTxDMACurrentDescriptorGet                                             ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACTxDMADescriptorListGet                                        \
S        ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[30])
X#define ROM_EMACTxDMADescriptorListGet                                                ((tEMACDMADescriptor * (*)(uint32_t ui32Base))ROM_EMACTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACTxDMADescriptorListSet                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   tEMACDMADescriptor *pDescriptor))ROM_EMACTABLE[31])
X#define ROM_EMACTxDMADescriptorListSet                                                ((void (*)(uint32_t ui32Base,                                                            tEMACDMADescriptor *pDescriptor))ROM_EMACTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACTxDMAPollDemand                                               \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[32])
X#define ROM_EMACTxDMAPollDemand                                                       ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACTxEnable                                                      \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[33])
X#define ROM_EMACTxEnable                                                              ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACTxFlush                                                       \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[34])
X#define ROM_EMACTxFlush                                                               ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACAddrFilterGet                                                 \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Index))ROM_EMACTABLE[35])
X#define ROM_EMACAddrFilterGet                                                         ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Index))ROM_EMACTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACAddrFilterSet                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Index,                                        \
S                   uint32_t ui32Config))ROM_EMACTABLE[36])
X#define ROM_EMACAddrFilterSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Index,                                                           uint32_t ui32Config))ROM_EMACTABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACHashFilterBitCalculate                                        \
S        ((uint32_t (*)(uint8_t *pui8MACAddr))ROM_EMACTABLE[37])
X#define ROM_EMACHashFilterBitCalculate                                                ((uint32_t (*)(uint8_t *pui8MACAddr))ROM_EMACTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACHashFilterGet                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32HashHi,                                     \
S                   uint32_t *pui32HashLo))ROM_EMACTABLE[38])
X#define ROM_EMACHashFilterGet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32HashHi,                                                        uint32_t *pui32HashLo))ROM_EMACTABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_EMACHashFilterSet                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32HashHi,                                       \
S                   uint32_t ui32HashLo))ROM_EMACTABLE[39])
X#define ROM_EMACHashFilterSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32HashHi,                                                          uint32_t ui32HashLo))ROM_EMACTABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACNumAddrGet                                                    \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[40])
X#define ROM_EMACNumAddrGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[40])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACPHYExtendedRead                                               \
S        ((uint16_t (*)(uint32_t ui32Base,                                     \
S                       uint8_t ui8PhyAddr,                                    \
S                       uint16_t ui16RegAddr))ROM_EMACTABLE[41])
X#define ROM_EMACPHYExtendedRead                                                       ((uint16_t (*)(uint32_t ui32Base,                                                            uint8_t ui8PhyAddr,                                                           uint16_t ui16RegAddr))ROM_EMACTABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACPHYExtendedWrite                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8PhyAddr,                                        \
S                   uint16_t ui16RegAddr,                                      \
S                   uint16_t ui16Data))ROM_EMACTABLE[42])
X#define ROM_EMACPHYExtendedWrite                                                      ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8PhyAddr,                                                           uint16_t ui16RegAddr,                                                         uint16_t ui16Data))ROM_EMACTABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACPowerManagementControlGet                                     \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[43])
X#define ROM_EMACPowerManagementControlGet                                             ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACPowerManagementControlSet                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags))ROM_EMACTABLE[44])
X#define ROM_EMACPowerManagementControlSet                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_EMACTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACPowerManagementStatusGet                                      \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[45])
X#define ROM_EMACPowerManagementStatusGet                                              ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACRemoteWakeUpFrameFilterGet                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   tEMACWakeUpFrameFilter *pFilter))ROM_EMACTABLE[46])
X#define ROM_EMACRemoteWakeUpFrameFilterGet                                            ((void (*)(uint32_t ui32Base,                                                            tEMACWakeUpFrameFilter *pFilter))ROM_EMACTABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACRemoteWakeUpFrameFilterSet                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   const tEMACWakeUpFrameFilter *pFilter))ROM_EMACTABLE[47])
X#define ROM_EMACRemoteWakeUpFrameFilterSet                                            ((void (*)(uint32_t ui32Base,                                                            const tEMACWakeUpFrameFilter *pFilter))ROM_EMACTABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampAddendSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Seconds))ROM_EMACTABLE[48])
X#define ROM_EMACTimestampAddendSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Seconds))ROM_EMACTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampConfigGet                                            \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t *pui32SubSecondInc))ROM_EMACTABLE[49])
X#define ROM_EMACTimestampConfigGet                                                    ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t *pui32SubSecondInc))ROM_EMACTABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampConfigSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint32_t ui32SubSecondInc))ROM_EMACTABLE[50])
X#define ROM_EMACTimestampConfigSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32SubSecondInc))ROM_EMACTABLE[50])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampDisable                                              \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[51])
X#define ROM_EMACTimestampDisable                                                      ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampEnable                                               \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[52])
X#define ROM_EMACTimestampEnable                                                       ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[52])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampIntStatus                                            \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[53])
X#define ROM_EMACTimestampIntStatus                                                    ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[53])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampPPSCommand                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Cmd))ROM_EMACTABLE[54])
X#define ROM_EMACTimestampPPSCommand                                                   ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Cmd))ROM_EMACTABLE[54])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampPPSCommandModeSet                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_EMACTABLE[55])
X#define ROM_EMACTimestampPPSCommandModeSet                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_EMACTABLE[55])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampPPSPeriodSet                                         \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Period,                                       \
S                   uint32_t ui32Width))ROM_EMACTABLE[56])
X#define ROM_EMACTimestampPPSPeriodSet                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Period,                                                          uint32_t ui32Width))ROM_EMACTABLE[56])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampPPSSimpleModeSet                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32FreqConfig))ROM_EMACTABLE[57])
X#define ROM_EMACTimestampPPSSimpleModeSet                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32FreqConfig))ROM_EMACTABLE[57])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampSysTimeGet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Seconds,                                    \
S                   uint32_t *pui32SubSeconds))ROM_EMACTABLE[58])
X#define ROM_EMACTimestampSysTimeGet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Seconds,                                                       uint32_t *pui32SubSeconds))ROM_EMACTABLE[58])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampSysTimeSet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Seconds,                                      \
S                   uint32_t ui32SubSeconds))ROM_EMACTABLE[59])
X#define ROM_EMACTimestampSysTimeSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Seconds,                                                         uint32_t ui32SubSeconds))ROM_EMACTABLE[59])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampSysTimeUpdate                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Seconds,                                      \
S                   uint32_t ui32SubSeconds,                                   \
S                   bool bInc))ROM_EMACTABLE[60])
X#define ROM_EMACTimestampSysTimeUpdate                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Seconds,                                                         uint32_t ui32SubSeconds,                                                      bool bInc))ROM_EMACTABLE[60])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampTargetIntDisable                                     \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[61])
X#define ROM_EMACTimestampTargetIntDisable                                             ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[61])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampTargetIntEnable                                      \
S        ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[62])
X#define ROM_EMACTimestampTargetIntEnable                                              ((void (*)(uint32_t ui32Base))ROM_EMACTABLE[62])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACTimestampTargetSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Seconds,                                      \
S                   uint32_t ui32Nanoseconds))ROM_EMACTABLE[63])
X#define ROM_EMACTimestampTargetSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Seconds,                                                         uint32_t ui32Nanoseconds))ROM_EMACTABLE[63])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACVLANHashFilterBitCalculate                                    \
S        ((uint32_t (*)(uint16_t ui16Tag))ROM_EMACTABLE[64])
X#define ROM_EMACVLANHashFilterBitCalculate                                            ((uint32_t (*)(uint16_t ui16Tag))ROM_EMACTABLE[64])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACVLANHashFilterGet                                             \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[65])
X#define ROM_EMACVLANHashFilterGet                                                     ((uint32_t (*)(uint32_t ui32Base))ROM_EMACTABLE[65])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACVLANHashFilterSet                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Hash))ROM_EMACTABLE[66])
X#define ROM_EMACVLANHashFilterSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Hash))ROM_EMACTABLE[66])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACVLANRxConfigGet                                               \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint16_t *pui16Tag))ROM_EMACTABLE[67])
X#define ROM_EMACVLANRxConfigGet                                                       ((uint32_t (*)(uint32_t ui32Base,                                                            uint16_t *pui16Tag))ROM_EMACTABLE[67])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACVLANRxConfigSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint16_t ui16Tag,                                          \
S                   uint32_t ui32Config))ROM_EMACTABLE[68])
X#define ROM_EMACVLANRxConfigSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint16_t ui16Tag,                                                             uint32_t ui32Config))ROM_EMACTABLE[68])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACVLANTxConfigGet                                               \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint16_t *pui16Tag))ROM_EMACTABLE[69])
X#define ROM_EMACVLANTxConfigGet                                                       ((uint32_t (*)(uint32_t ui32Base,                                                            uint16_t *pui16Tag))ROM_EMACTABLE[69])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_EMACVLANTxConfigSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint16_t ui16Tag,                                          \
S                   uint32_t ui32Config))ROM_EMACTABLE[70])
X#define ROM_EMACVLANTxConfigSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint16_t ui16Tag,                                                             uint32_t ui32Config))ROM_EMACTABLE[70])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_UpdateEMAC                                                        \
S        ((void (*)(uint32_t ui32Clock))ROM_EMACTABLE[71])
X#define ROM_UpdateEMAC                                                                ((void (*)(uint32_t ui32Clock))ROM_EMACTABLE[71])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Flash API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashProgram                                                      \
N        ((int32_t (*)(uint32_t *pui32Data,                                    \
N                      uint32_t ui32Address,                                   \
N                      uint32_t ui32Count))ROM_FLASHTABLE[0])
X#define ROM_FlashProgram                                                              ((int32_t (*)(uint32_t *pui32Data,                                                          uint32_t ui32Address,                                                         uint32_t ui32Count))ROM_FLASHTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashErase                                                        \
N        ((int32_t (*)(uint32_t ui32Address))ROM_FLASHTABLE[3])
X#define ROM_FlashErase                                                                ((int32_t (*)(uint32_t ui32Address))ROM_FLASHTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashProtectGet                                                   \
N        ((tFlashProtection (*)(uint32_t ui32Address))ROM_FLASHTABLE[4])
X#define ROM_FlashProtectGet                                                           ((tFlashProtection (*)(uint32_t ui32Address))ROM_FLASHTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashProtectSet                                                   \
N        ((int32_t (*)(uint32_t ui32Address,                                   \
N                      tFlashProtection eProtect))ROM_FLASHTABLE[5])
X#define ROM_FlashProtectSet                                                           ((int32_t (*)(uint32_t ui32Address,                                                         tFlashProtection eProtect))ROM_FLASHTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashProtectSave                                                  \
N        ((int32_t (*)(void))ROM_FLASHTABLE[6])
X#define ROM_FlashProtectSave                                                          ((int32_t (*)(void))ROM_FLASHTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashUserGet                                                      \
N        ((int32_t (*)(uint32_t *pui32User0,                                   \
N                      uint32_t *pui32User1))ROM_FLASHTABLE[7])
X#define ROM_FlashUserGet                                                              ((int32_t (*)(uint32_t *pui32User0,                                                         uint32_t *pui32User1))ROM_FLASHTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashUserSet                                                      \
N        ((int32_t (*)(uint32_t ui32User0,                                     \
N                      uint32_t ui32User1))ROM_FLASHTABLE[8])
X#define ROM_FlashUserSet                                                              ((int32_t (*)(uint32_t ui32User0,                                                           uint32_t ui32User1))ROM_FLASHTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashUserSave                                                     \
N        ((int32_t (*)(void))ROM_FLASHTABLE[9])
X#define ROM_FlashUserSave                                                             ((int32_t (*)(void))ROM_FLASHTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashIntEnable                                                    \
N        ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[10])
X#define ROM_FlashIntEnable                                                            ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashIntDisable                                                   \
N        ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[11])
X#define ROM_FlashIntDisable                                                           ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashIntStatus                                                    \
N        ((uint32_t (*)(bool bMasked))ROM_FLASHTABLE[12])
X#define ROM_FlashIntStatus                                                            ((uint32_t (*)(bool bMasked))ROM_FLASHTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FlashIntClear                                                     \
N        ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[13])
X#define ROM_FlashIntClear                                                             ((void (*)(uint32_t ui32IntFlags))ROM_FLASHTABLE[13])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the FPU API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUEnable                                                         \
N        ((void (*)(void))ROM_FPUTABLE[0])
X#define ROM_FPUEnable                                                                 ((void (*)(void))ROM_FPUTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUDisable                                                        \
N        ((void (*)(void))ROM_FPUTABLE[1])
X#define ROM_FPUDisable                                                                ((void (*)(void))ROM_FPUTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUFlushToZeroModeSet                                             \
N        ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[2])
X#define ROM_FPUFlushToZeroModeSet                                                     ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUHalfPrecisionModeSet                                           \
N        ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[3])
X#define ROM_FPUHalfPrecisionModeSet                                                   ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPULazyStackingEnable                                             \
N        ((void (*)(void))ROM_FPUTABLE[4])
X#define ROM_FPULazyStackingEnable                                                     ((void (*)(void))ROM_FPUTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUNaNModeSet                                                     \
N        ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[5])
X#define ROM_FPUNaNModeSet                                                             ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPURoundingModeSet                                                \
N        ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[6])
X#define ROM_FPURoundingModeSet                                                        ((void (*)(uint32_t ui32Mode))ROM_FPUTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUStackingDisable                                                \
N        ((void (*)(void))ROM_FPUTABLE[7])
X#define ROM_FPUStackingDisable                                                        ((void (*)(void))ROM_FPUTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_FPUStackingEnable                                                 \
N        ((void (*)(void))ROM_FPUTABLE[8])
X#define ROM_FPUStackingEnable                                                         ((void (*)(void))ROM_FPUTABLE[8])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the GPIO API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinWrite                                                      \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins,                                           \
N                   uint8_t ui8Val))ROM_GPIOTABLE[0])
X#define ROM_GPIOPinWrite                                                              ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins,                                                              uint8_t ui8Val))ROM_GPIOTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIODirModeSet                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins,                                           \
N                   uint32_t ui32PinIO))ROM_GPIOTABLE[1])
X#define ROM_GPIODirModeSet                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins,                                                              uint32_t ui32PinIO))ROM_GPIOTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIODirModeGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Port,                                     \
N                       uint8_t ui8Pin))ROM_GPIOTABLE[2])
X#define ROM_GPIODirModeGet                                                            ((uint32_t (*)(uint32_t ui32Port,                                                            uint8_t ui8Pin))ROM_GPIOTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOIntTypeSet                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins,                                           \
N                   uint32_t ui32IntType))ROM_GPIOTABLE[3])
X#define ROM_GPIOIntTypeSet                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins,                                                              uint32_t ui32IntType))ROM_GPIOTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOIntTypeGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Port,                                     \
N                       uint8_t ui8Pin))ROM_GPIOTABLE[4])
X#define ROM_GPIOIntTypeGet                                                            ((uint32_t (*)(uint32_t ui32Port,                                                            uint8_t ui8Pin))ROM_GPIOTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_GPIOPadConfigSet                                                  \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins,                                           \
N                   uint32_t ui32Strength,                                     \
N                   uint32_t ui32PadType))ROM_GPIOTABLE[5])
X#define ROM_GPIOPadConfigSet                                                          ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins,                                                              uint32_t ui32Strength,                                                        uint32_t ui32PadType))ROM_GPIOTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPadConfigGet                                                  \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pin,                                            \
N                   uint32_t *pui32Strength,                                   \
N                   uint32_t *pui32PadType))ROM_GPIOTABLE[6])
X#define ROM_GPIOPadConfigGet                                                          ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pin,                                                               uint32_t *pui32Strength,                                                      uint32_t *pui32PadType))ROM_GPIOTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinRead                                                       \
N        ((int32_t (*)(uint32_t ui32Port,                                      \
N                      uint8_t ui8Pins))ROM_GPIOTABLE[11])
X#define ROM_GPIOPinRead                                                               ((int32_t (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_GPIOPinTypeCAN                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[12])
X#define ROM_GPIOPinTypeCAN                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeComparator                                             \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[13])
X#define ROM_GPIOPinTypeComparator                                                     ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeGPIOInput                                              \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[14])
X#define ROM_GPIOPinTypeGPIOInput                                                      ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeGPIOOutput                                             \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[15])
X#define ROM_GPIOPinTypeGPIOOutput                                                     ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeI2C                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[16])
X#define ROM_GPIOPinTypeI2C                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypePWM                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[17])
X#define ROM_GPIOPinTypePWM                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeQEI                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[18])
X#define ROM_GPIOPinTypeQEI                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeSSI                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[19])
X#define ROM_GPIOPinTypeSSI                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeTimer                                                  \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[20])
X#define ROM_GPIOPinTypeTimer                                                          ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeUART                                                   \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[21])
X#define ROM_GPIOPinTypeUART                                                           ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeGPIOOutputOD                                           \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[22])
X#define ROM_GPIOPinTypeGPIOOutputOD                                                   ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeADC                                                    \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[23])
X#define ROM_GPIOPinTypeADC                                                            ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeUSBDigital                                             \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[24])
X#define ROM_GPIOPinTypeUSBDigital                                                     ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinConfigure                                                  \
N        ((void (*)(uint32_t ui32PinConfig))ROM_GPIOTABLE[26])
X#define ROM_GPIOPinConfigure                                                          ((void (*)(uint32_t ui32PinConfig))ROM_GPIOTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeUSBAnalog                                              \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[28])
X#define ROM_GPIOPinTypeUSBAnalog                                                      ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIODMATriggerEnable                                              \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[31])
X#define ROM_GPIODMATriggerEnable                                                      ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIODMATriggerDisable                                             \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[32])
X#define ROM_GPIODMATriggerDisable                                                     ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOADCTriggerEnable                                              \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[33])
X#define ROM_GPIOADCTriggerEnable                                                      ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOADCTriggerDisable                                             \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[34])
X#define ROM_GPIOADCTriggerDisable                                                     ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_GPIOPinTypeI2CSCL                                                 \
N        ((void (*)(uint32_t ui32Port,                                         \
N                   uint8_t ui8Pins))ROM_GPIOTABLE[39])
X#define ROM_GPIOPinTypeI2CSCL                                                         ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_GPIOPinTypeOneWire                                                \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint8_t ui8Pins))ROM_GPIOTABLE[44])
X#define ROM_GPIOPinTypeOneWire                                                        ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_GPIOPinTypeWakeHigh                                               \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint8_t ui8Pins))ROM_GPIOTABLE[48])
X#define ROM_GPIOPinTypeWakeHigh                                                       ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_GPIOPinTypeWakeLow                                                \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint8_t ui8Pins))ROM_GPIOTABLE[49])
X#define ROM_GPIOPinTypeWakeLow                                                        ((void (*)(uint32_t ui32Port,                                                            uint8_t ui8Pins))ROM_GPIOTABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_GPIOIntClear                                                      \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint32_t ui32IntFlags))ROM_GPIOTABLE[51])
X#define ROM_GPIOIntClear                                                              ((void (*)(uint32_t ui32Port,                                                            uint32_t ui32IntFlags))ROM_GPIOTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_GPIOIntDisable                                                    \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint32_t ui32IntFlags))ROM_GPIOTABLE[52])
X#define ROM_GPIOIntDisable                                                            ((void (*)(uint32_t ui32Port,                                                            uint32_t ui32IntFlags))ROM_GPIOTABLE[52])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_GPIOIntEnable                                                     \
S        ((void (*)(uint32_t ui32Port,                                         \
S                   uint32_t ui32IntFlags))ROM_GPIOTABLE[53])
X#define ROM_GPIOIntEnable                                                             ((void (*)(uint32_t ui32Port,                                                            uint32_t ui32IntFlags))ROM_GPIOTABLE[53])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_GPIOIntStatus                                                     \
S        ((uint32_t (*)(uint32_t ui32Port,                                     \
S                       bool bMasked))ROM_GPIOTABLE[54])
X#define ROM_GPIOIntStatus                                                             ((uint32_t (*)(uint32_t ui32Port,                                                            bool bMasked))ROM_GPIOTABLE[54])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_GPIOPinWakeStatus                                                 \
S        ((uint32_t (*)(uint32_t ui32Port))ROM_GPIOTABLE[55])
X#define ROM_GPIOPinWakeStatus                                                         ((uint32_t (*)(uint32_t ui32Port))ROM_GPIOTABLE[55])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Hibernate API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateIntClear                                                 \
N        ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[0])
X#define ROM_HibernateIntClear                                                         ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateEnableExpClk                                             \
N        ((void (*)(uint32_t ui32HibClk))ROM_HIBERNATETABLE[1])
X#define ROM_HibernateEnableExpClk                                                     ((void (*)(uint32_t ui32HibClk))ROM_HIBERNATETABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateDisable                                                  \
N        ((void (*)(void))ROM_HIBERNATETABLE[2])
X#define ROM_HibernateDisable                                                          ((void (*)(void))ROM_HIBERNATETABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCEnable                                                \
N        ((void (*)(void))ROM_HIBERNATETABLE[4])
X#define ROM_HibernateRTCEnable                                                        ((void (*)(void))ROM_HIBERNATETABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCDisable                                               \
N        ((void (*)(void))ROM_HIBERNATETABLE[5])
X#define ROM_HibernateRTCDisable                                                       ((void (*)(void))ROM_HIBERNATETABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateWakeSet                                                  \
N        ((void (*)(uint32_t ui32WakeFlags))ROM_HIBERNATETABLE[6])
X#define ROM_HibernateWakeSet                                                          ((void (*)(uint32_t ui32WakeFlags))ROM_HIBERNATETABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateWakeGet                                                  \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[7])
X#define ROM_HibernateWakeGet                                                          ((uint32_t (*)(void))ROM_HIBERNATETABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateLowBatSet                                                \
N        ((void (*)(uint32_t ui32LowBatFlags))ROM_HIBERNATETABLE[8])
X#define ROM_HibernateLowBatSet                                                        ((void (*)(uint32_t ui32LowBatFlags))ROM_HIBERNATETABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateLowBatGet                                                \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[9])
X#define ROM_HibernateLowBatGet                                                        ((uint32_t (*)(void))ROM_HIBERNATETABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCSet                                                   \
N        ((void (*)(uint32_t ui32RTCValue))ROM_HIBERNATETABLE[10])
X#define ROM_HibernateRTCSet                                                           ((void (*)(uint32_t ui32RTCValue))ROM_HIBERNATETABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCGet                                                   \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[11])
X#define ROM_HibernateRTCGet                                                           ((uint32_t (*)(void))ROM_HIBERNATETABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCTrimSet                                               \
N        ((void (*)(uint32_t ui32Trim))ROM_HIBERNATETABLE[16])
X#define ROM_HibernateRTCTrimSet                                                       ((void (*)(uint32_t ui32Trim))ROM_HIBERNATETABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCTrimGet                                               \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[17])
X#define ROM_HibernateRTCTrimGet                                                       ((uint32_t (*)(void))ROM_HIBERNATETABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateDataSet                                                  \
N        ((void (*)(uint32_t *pui32Data,                                       \
N                   uint32_t ui32Count))ROM_HIBERNATETABLE[18])
X#define ROM_HibernateDataSet                                                          ((void (*)(uint32_t *pui32Data,                                                          uint32_t ui32Count))ROM_HIBERNATETABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateDataGet                                                  \
N        ((void (*)(uint32_t *pui32Data,                                       \
N                   uint32_t ui32Count))ROM_HIBERNATETABLE[19])
X#define ROM_HibernateDataGet                                                          ((void (*)(uint32_t *pui32Data,                                                          uint32_t ui32Count))ROM_HIBERNATETABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRequest                                                  \
N        ((void (*)(void))ROM_HIBERNATETABLE[20])
X#define ROM_HibernateRequest                                                          ((void (*)(void))ROM_HIBERNATETABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateIntEnable                                                \
N        ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[21])
X#define ROM_HibernateIntEnable                                                        ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateIntDisable                                               \
N        ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[22])
X#define ROM_HibernateIntDisable                                                       ((void (*)(uint32_t ui32IntFlags))ROM_HIBERNATETABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateIntStatus                                                \
N        ((uint32_t (*)(bool bMasked))ROM_HIBERNATETABLE[23])
X#define ROM_HibernateIntStatus                                                        ((uint32_t (*)(bool bMasked))ROM_HIBERNATETABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateIsActive                                                 \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[24])
X#define ROM_HibernateIsActive                                                         ((uint32_t (*)(void))ROM_HIBERNATETABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateRTCSSGet                                                 \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[27])
X#define ROM_HibernateRTCSSGet                                                         ((uint32_t (*)(void))ROM_HIBERNATETABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateClockConfig                                              \
N        ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[28])
X#define ROM_HibernateClockConfig                                                      ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateBatCheckStart                                            \
N        ((void (*)(void))ROM_HIBERNATETABLE[29])
X#define ROM_HibernateBatCheckStart                                                    ((void (*)(void))ROM_HIBERNATETABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_HibernateBatCheckDone                                             \
N        ((uint32_t (*)(void))ROM_HIBERNATETABLE[30])
X#define ROM_HibernateBatCheckDone                                                     ((uint32_t (*)(void))ROM_HIBERNATETABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateGPIORetentionEnable                                      \
S        ((void (*)(void))ROM_HIBERNATETABLE[31])
X#define ROM_HibernateGPIORetentionEnable                                              ((void (*)(void))ROM_HIBERNATETABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateGPIORetentionDisable                                     \
S        ((void (*)(void))ROM_HIBERNATETABLE[32])
X#define ROM_HibernateGPIORetentionDisable                                             ((void (*)(void))ROM_HIBERNATETABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateGPIORetentionGet                                         \
S        ((bool (*)(void))ROM_HIBERNATETABLE[33])
X#define ROM_HibernateGPIORetentionGet                                                 ((bool (*)(void))ROM_HIBERNATETABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateCounterMode                                              \
S        ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[34])
X#define ROM_HibernateCounterMode                                                      ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_HibernateCalendarSet                                              \
S        ((void (*)(struct tm *psTime))ROM_HIBERNATETABLE[35])
X#define ROM_HibernateCalendarSet                                                      ((void (*)(struct tm *psTime))ROM_HIBERNATETABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateCalendarGet                                              \
S        ((int (*)(struct tm *psTime))ROM_HIBERNATETABLE[36])
X#define ROM_HibernateCalendarGet                                                      ((int (*)(struct tm *psTime))ROM_HIBERNATETABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateCalendarMatchSet                                         \
S        ((void (*)(uint32_t ui32Index,                                        \
S                   struct tm *psTime))ROM_HIBERNATETABLE[37])
X#define ROM_HibernateCalendarMatchSet                                                 ((void (*)(uint32_t ui32Index,                                                           struct tm *psTime))ROM_HIBERNATETABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateCalendarMatchGet                                         \
S        ((void (*)(uint32_t ui32Index,                                        \
S                   struct tm *psTime))ROM_HIBERNATETABLE[38])
X#define ROM_HibernateCalendarMatchGet                                                 ((void (*)(uint32_t ui32Index,                                                           struct tm *psTime))ROM_HIBERNATETABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateTamperDisable                                            \
S        ((void (*)(void))ROM_HIBERNATETABLE[39])
X#define ROM_HibernateTamperDisable                                                    ((void (*)(void))ROM_HIBERNATETABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateTamperEnable                                             \
S        ((void (*)(void))ROM_HIBERNATETABLE[40])
X#define ROM_HibernateTamperEnable                                                     ((void (*)(void))ROM_HIBERNATETABLE[40])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateTamperEventsClear                                        \
S        ((void (*)(void))ROM_HIBERNATETABLE[41])
X#define ROM_HibernateTamperEventsClear                                                ((void (*)(void))ROM_HIBERNATETABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateTamperEventsConfig                                       \
S        ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[42])
X#define ROM_HibernateTamperEventsConfig                                               ((void (*)(uint32_t ui32Config))ROM_HIBERNATETABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateTamperEventsGet                                          \
S        ((bool (*)(uint32_t ui32Index,                                        \
S                   uint32_t *pui32RTC,                                        \
S                   uint32_t *pui32Event))ROM_HIBERNATETABLE[43])
X#define ROM_HibernateTamperEventsGet                                                  ((bool (*)(uint32_t ui32Index,                                                           uint32_t *pui32RTC,                                                           uint32_t *pui32Event))ROM_HIBERNATETABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateTamperExtOscValid                                        \
S        ((bool (*)(void))ROM_HIBERNATETABLE[44])
X#define ROM_HibernateTamperExtOscValid                                                ((bool (*)(void))ROM_HIBERNATETABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateTamperExtOscRecover                                      \
S        ((void (*)(void))ROM_HIBERNATETABLE[45])
X#define ROM_HibernateTamperExtOscRecover                                              ((void (*)(void))ROM_HIBERNATETABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateTamperIODisable                                          \
S        ((void (*)(uint32_t ui32Input))ROM_HIBERNATETABLE[46])
X#define ROM_HibernateTamperIODisable                                                  ((void (*)(uint32_t ui32Input))ROM_HIBERNATETABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateTamperIOEnable                                           \
S        ((void (*)(uint32_t ui32Input,                                        \
S                   uint32_t ui32Config))ROM_HIBERNATETABLE[47])
X#define ROM_HibernateTamperIOEnable                                                   ((void (*)(uint32_t ui32Input,                                                           uint32_t ui32Config))ROM_HIBERNATETABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateTamperStatusGet                                          \
S        ((uint32_t (*)(void))ROM_HIBERNATETABLE[48])
X#define ROM_HibernateTamperStatusGet                                                  ((uint32_t (*)(void))ROM_HIBERNATETABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_HibernateRTCMatchGet                                              \
S        ((uint32_t (*)(uint32_t ui32Match))ROM_HIBERNATETABLE[49])
X#define ROM_HibernateRTCMatchGet                                                      ((uint32_t (*)(uint32_t ui32Match))ROM_HIBERNATETABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_HibernateRTCMatchSet                                              \
S        ((void (*)(uint32_t ui32Match,                                        \
S                   uint32_t ui32Value))ROM_HIBERNATETABLE[50])
X#define ROM_HibernateRTCMatchSet                                                      ((void (*)(uint32_t ui32Match,                                                           uint32_t ui32Value))ROM_HIBERNATETABLE[50])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_HibernateRTCSSMatchGet                                            \
S        ((uint32_t (*)(uint32_t ui32Match))ROM_HIBERNATETABLE[51])
X#define ROM_HibernateRTCSSMatchGet                                                    ((uint32_t (*)(uint32_t ui32Match))ROM_HIBERNATETABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_HibernateRTCSSMatchSet                                            \
S        ((void (*)(uint32_t ui32Match,                                        \
S                   uint32_t ui32Value))ROM_HIBERNATETABLE[52])
X#define ROM_HibernateRTCSSMatchSet                                                    ((void (*)(uint32_t ui32Match,                                                           uint32_t ui32Value))ROM_HIBERNATETABLE[52])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the I2C API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterDataPut                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint8_t ui8Data))ROM_I2CTABLE[0])
X#define ROM_I2CMasterDataPut                                                          ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Data))ROM_I2CTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterInitExpClk                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32I2CClk,                                       \
N                   bool bFast))ROM_I2CTABLE[1])
X#define ROM_I2CMasterInitExpClk                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32I2CClk,                                                          bool bFast))ROM_I2CTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveInit                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8SlaveAddr))ROM_I2CTABLE[2])
X#define ROM_I2CSlaveInit                                                              ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8SlaveAddr))ROM_I2CTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterEnable                                                   \
N        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[3])
X#define ROM_I2CMasterEnable                                                           ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveEnable                                                    \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[4])
X#define ROM_I2CSlaveEnable                                                            ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterDisable                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[5])
X#define ROM_I2CMasterDisable                                                          ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveDisable                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[6])
X#define ROM_I2CSlaveDisable                                                           ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntEnable                                                \
N        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[7])
X#define ROM_I2CMasterIntEnable                                                        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveIntEnable                                                 \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[8])
X#define ROM_I2CSlaveIntEnable                                                         ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntDisable                                               \
N        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[9])
X#define ROM_I2CMasterIntDisable                                                       ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveIntDisable                                                \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[10])
X#define ROM_I2CSlaveIntDisable                                                        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntStatus                                                \
N        ((bool (*)(uint32_t ui32Base,                                         \
N                   bool bMasked))ROM_I2CTABLE[11])
X#define ROM_I2CMasterIntStatus                                                        ((bool (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_I2CTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveIntStatus                                                 \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   bool bMasked))ROM_I2CTABLE[12])
X#define ROM_I2CSlaveIntStatus                                                         ((bool (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_I2CTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntClear                                                 \
N        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[13])
X#define ROM_I2CMasterIntClear                                                         ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveIntClear                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[14])
X#define ROM_I2CSlaveIntClear                                                          ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterSlaveAddrSet                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint8_t ui8SlaveAddr,                                      \
N                   bool bReceive))ROM_I2CTABLE[15])
X#define ROM_I2CMasterSlaveAddrSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8SlaveAddr,                                                         bool bReceive))ROM_I2CTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterBusy                                                     \
N        ((bool (*)(uint32_t ui32Base))ROM_I2CTABLE[16])
X#define ROM_I2CMasterBusy                                                             ((bool (*)(uint32_t ui32Base))ROM_I2CTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterBusBusy                                                  \
N        ((bool (*)(uint32_t ui32Base))ROM_I2CTABLE[17])
X#define ROM_I2CMasterBusBusy                                                          ((bool (*)(uint32_t ui32Base))ROM_I2CTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterControl                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Cmd))ROM_I2CTABLE[18])
X#define ROM_I2CMasterControl                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Cmd))ROM_I2CTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterErr                                                      \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[19])
X#define ROM_I2CMasterErr                                                              ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterDataGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[20])
X#define ROM_I2CMasterDataGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveStatus                                                    \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[21])
X#define ROM_I2CSlaveStatus                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveDataPut                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Data))ROM_I2CTABLE[22])
X#define ROM_I2CSlaveDataPut                                                           ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Data))ROM_I2CTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveDataGet                                                   \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[23])
X#define ROM_I2CSlaveDataGet                                                           ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UpdateI2C                                                         \
N        ((void (*)(void))ROM_I2CTABLE[24])
X#define ROM_UpdateI2C                                                                 ((void (*)(void))ROM_I2CTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveIntEnableEx                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_I2CTABLE[25])
X#define ROM_I2CSlaveIntEnableEx                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveIntDisableEx                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_I2CTABLE[26])
X#define ROM_I2CSlaveIntDisableEx                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveIntStatusEx                                               \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_I2CTABLE[27])
X#define ROM_I2CSlaveIntStatusEx                                                       ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_I2CTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveIntClearEx                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_I2CTABLE[28])
X#define ROM_I2CSlaveIntClearEx                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntEnableEx                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_I2CTABLE[29])
X#define ROM_I2CMasterIntEnableEx                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntDisableEx                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_I2CTABLE[30])
X#define ROM_I2CMasterIntDisableEx                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntStatusEx                                              \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_I2CTABLE[31])
X#define ROM_I2CMasterIntStatusEx                                                      ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_I2CTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterIntClearEx                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_I2CTABLE[32])
X#define ROM_I2CMasterIntClearEx                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_I2CTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterTimeoutSet                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Value))ROM_I2CTABLE[33])
X#define ROM_I2CMasterTimeoutSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Value))ROM_I2CTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveACKOverride                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   bool bEnable))ROM_I2CTABLE[34])
X#define ROM_I2CSlaveACKOverride                                                       ((void (*)(uint32_t ui32Base,                                                            bool bEnable))ROM_I2CTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveACKValueSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   bool bACK))ROM_I2CTABLE[35])
X#define ROM_I2CSlaveACKValueSet                                                       ((void (*)(uint32_t ui32Base,                                                            bool bACK))ROM_I2CTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveAddressSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8AddrNum,                                        \
S                   uint8_t ui8SlaveAddr))ROM_I2CTABLE[37])
X#define ROM_I2CSlaveAddressSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8AddrNum,                                                           uint8_t ui8SlaveAddr))ROM_I2CTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_I2CMasterLineStateGet                                             \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[38])
X#define ROM_I2CMasterLineStateGet                                                     ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CTxFIFOConfigSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_I2CTABLE[39])
X#define ROM_I2CTxFIFOConfigSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_I2CTABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CTxFIFOFlush                                                    \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[40])
X#define ROM_I2CTxFIFOFlush                                                            ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[40])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CRxFIFOConfigSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_I2CTABLE[41])
X#define ROM_I2CRxFIFOConfigSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_I2CTABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CRxFIFOFlush                                                    \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[42])
X#define ROM_I2CRxFIFOFlush                                                            ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CFIFOStatus                                                     \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[43])
X#define ROM_I2CFIFOStatus                                                             ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CFIFODataPut                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Data))ROM_I2CTABLE[44])
X#define ROM_I2CFIFODataPut                                                            ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Data))ROM_I2CTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CFIFODataPutNonBlocking                                         \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint8_t ui8Data))ROM_I2CTABLE[45])
X#define ROM_I2CFIFODataPutNonBlocking                                                 ((uint32_t (*)(uint32_t ui32Base,                                                            uint8_t ui8Data))ROM_I2CTABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CFIFODataGet                                                    \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[46])
X#define ROM_I2CFIFODataGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CFIFODataGetNonBlocking                                         \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint8_t *pui8Data))ROM_I2CTABLE[47])
X#define ROM_I2CFIFODataGetNonBlocking                                                 ((uint32_t (*)(uint32_t ui32Base,                                                            uint8_t *pui8Data))ROM_I2CTABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CMasterBurstLengthSet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Length))ROM_I2CTABLE[48])
X#define ROM_I2CMasterBurstLengthSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Length))ROM_I2CTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CMasterBurstCountGet                                            \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[49])
X#define ROM_I2CMasterBurstCountGet                                                    ((uint32_t (*)(uint32_t ui32Base))ROM_I2CTABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveFIFODisable                                               \
S        ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[50])
X#define ROM_I2CSlaveFIFODisable                                                       ((void (*)(uint32_t ui32Base))ROM_I2CTABLE[50])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_I2CSlaveFIFOEnable                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_I2CTABLE[51])
X#define ROM_I2CSlaveFIFOEnable                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_I2CTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_I2CMasterGlitchFilterConfigSet                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_I2CTABLE[54])
X#define ROM_I2CMasterGlitchFilterConfigSet                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_I2CTABLE[54])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Interrupt API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntEnable                                                         \
N        ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[0])
X#define ROM_IntEnable                                                                 ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntMasterEnable                                                   \
N        ((bool (*)(void))ROM_INTERRUPTTABLE[1])
X#define ROM_IntMasterEnable                                                           ((bool (*)(void))ROM_INTERRUPTTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntMasterDisable                                                  \
N        ((bool (*)(void))ROM_INTERRUPTTABLE[2])
X#define ROM_IntMasterDisable                                                          ((bool (*)(void))ROM_INTERRUPTTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntDisable                                                        \
N        ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[3])
X#define ROM_IntDisable                                                                ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPriorityGroupingSet                                            \
N        ((void (*)(uint32_t ui32Bits))ROM_INTERRUPTTABLE[4])
X#define ROM_IntPriorityGroupingSet                                                    ((void (*)(uint32_t ui32Bits))ROM_INTERRUPTTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPriorityGroupingGet                                            \
N        ((uint32_t (*)(void))ROM_INTERRUPTTABLE[5])
X#define ROM_IntPriorityGroupingGet                                                    ((uint32_t (*)(void))ROM_INTERRUPTTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPrioritySet                                                    \
N        ((void (*)(uint32_t ui32Interrupt,                                    \
N                   uint8_t ui8Priority))ROM_INTERRUPTTABLE[6])
X#define ROM_IntPrioritySet                                                            ((void (*)(uint32_t ui32Interrupt,                                                       uint8_t ui8Priority))ROM_INTERRUPTTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPriorityGet                                                    \
N        ((int32_t (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[7])
X#define ROM_IntPriorityGet                                                            ((int32_t (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPendSet                                                        \
N        ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[8])
X#define ROM_IntPendSet                                                                ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPendClear                                                      \
N        ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[9])
X#define ROM_IntPendClear                                                              ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPriorityMaskSet                                                \
N        ((void (*)(uint32_t ui32PriorityMask))ROM_INTERRUPTTABLE[10])
X#define ROM_IntPriorityMaskSet                                                        ((void (*)(uint32_t ui32PriorityMask))ROM_INTERRUPTTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_IntPriorityMaskGet                                                \
N        ((uint32_t (*)(void))ROM_INTERRUPTTABLE[11])
X#define ROM_IntPriorityMaskGet                                                        ((uint32_t (*)(void))ROM_INTERRUPTTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_IntIsEnabled                                                      \
S        ((uint32_t (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[12])
X#define ROM_IntIsEnabled                                                              ((uint32_t (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_IntTrigger                                                        \
S        ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[13])
X#define ROM_IntTrigger                                                                ((void (*)(uint32_t ui32Interrupt))ROM_INTERRUPTTABLE[13])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the LCD API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIntStatus                                                      \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_LCDTABLE[0])
X#define ROM_LCDIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_LCDTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDClockReset                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Clocks))ROM_LCDTABLE[1])
X#define ROM_LCDClockReset                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Clocks))ROM_LCDTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDDMAConfigSet                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_LCDTABLE[2])
X#define ROM_LCDDMAConfigSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_LCDTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIDDCommandWrite                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint16_t ui16Cmd))ROM_LCDTABLE[3])
X#define ROM_LCDIDDCommandWrite                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint16_t ui16Cmd))ROM_LCDTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIDDConfigSet                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_LCDTABLE[4])
X#define ROM_LCDIDDConfigSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_LCDTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIDDDataRead                                                    \
S        ((uint16_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32CS))ROM_LCDTABLE[5])
X#define ROM_LCDIDDDataRead                                                            ((uint16_t (*)(uint32_t ui32Base,                                                            uint32_t ui32CS))ROM_LCDTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIDDDataWrite                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint16_t ui16Data))ROM_LCDTABLE[6])
X#define ROM_LCDIDDDataWrite                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint16_t ui16Data))ROM_LCDTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIDDDMADisable                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[7])
X#define ROM_LCDIDDDMADisable                                                          ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIDDDMAWrite                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   const uint32_t *pui32Data,                                 \
S                   uint32_t ui32Count))ROM_LCDTABLE[8])
X#define ROM_LCDIDDDMAWrite                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              const uint32_t *pui32Data,                                                    uint32_t ui32Count))ROM_LCDTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIDDIndexedRead                                                 \
S        ((uint16_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32CS,                                       \
S                       uint16_t ui16Addr))ROM_LCDTABLE[9])
X#define ROM_LCDIDDIndexedRead                                                         ((uint16_t (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint16_t ui16Addr))ROM_LCDTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIDDIndexedWrite                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   uint16_t ui16Addr,                                         \
S                   uint16_t ui16Data))ROM_LCDTABLE[10])
X#define ROM_LCDIDDIndexedWrite                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              uint16_t ui16Addr,                                                            uint16_t ui16Data))ROM_LCDTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIDDStatusRead                                                  \
S        ((uint16_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32CS))ROM_LCDTABLE[11])
X#define ROM_LCDIDDStatusRead                                                          ((uint16_t (*)(uint32_t ui32Base,                                                            uint32_t ui32CS))ROM_LCDTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIDDTimingSet                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32CS,                                           \
S                   const tLCDIDDTiming *pTiming))ROM_LCDTABLE[12])
X#define ROM_LCDIDDTimingSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32CS,                                                              const tLCDIDDTiming *pTiming))ROM_LCDTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIntClear                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_LCDTABLE[13])
X#define ROM_LCDIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_LCDTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIntDisable                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_LCDTABLE[14])
X#define ROM_LCDIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_LCDTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDIntEnable                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_LCDTABLE[15])
X#define ROM_LCDIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_LCDTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDModeSet                                                        \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint8_t ui8Mode,                                       \
S                       uint32_t ui32PixClk,                                   \
S                       uint32_t ui32SysClk))ROM_LCDTABLE[16])
X#define ROM_LCDModeSet                                                                ((uint32_t (*)(uint32_t ui32Base,                                                            uint8_t ui8Mode,                                                              uint32_t ui32PixClk,                                                          uint32_t ui32SysClk))ROM_LCDTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDRasterACBiasIntCountSet                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Count))ROM_LCDTABLE[17])
X#define ROM_LCDRasterACBiasIntCountSet                                                ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Count))ROM_LCDTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDRasterConfigSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config,                                       \
S                   uint8_t ui8PalLoadDelay))ROM_LCDTABLE[18])
X#define ROM_LCDRasterConfigSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint8_t ui8PalLoadDelay))ROM_LCDTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDRasterDisable                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[19])
X#define ROM_LCDRasterDisable                                                          ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDRasterEnable                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[20])
X#define ROM_LCDRasterEnable                                                           ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDRasterFrameBufferSet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Buffer,                                         \
S                   uint32_t *pui32Addr,                                       \
S                   uint32_t ui32NumBytes))ROM_LCDTABLE[21])
X#define ROM_LCDRasterFrameBufferSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Buffer,                                                            uint32_t *pui32Addr,                                                          uint32_t ui32NumBytes))ROM_LCDTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDRasterPaletteSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Type,                                         \
S                   uint32_t *pui32PalAddr,                                    \
S                   const uint32_t *pui32SrcColors,                            \
S                   uint32_t ui32Start,                                        \
S                   uint32_t ui32Count))ROM_LCDTABLE[22])
X#define ROM_LCDRasterPaletteSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Type,                                                            uint32_t *pui32PalAddr,                                                       const uint32_t *pui32SrcColors,                                               uint32_t ui32Start,                                                           uint32_t ui32Count))ROM_LCDTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDRasterSubPanelConfigSet                                        \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Flags,                                        \
S                   uint32_t ui32BottomLines,                                  \
S                   uint32_t ui32DefaultPixel))ROM_LCDTABLE[23])
X#define ROM_LCDRasterSubPanelConfigSet                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags,                                                           uint32_t ui32BottomLines,                                                     uint32_t ui32DefaultPixel))ROM_LCDTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDRasterSubPanelDisable                                          \
S        ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[24])
X#define ROM_LCDRasterSubPanelDisable                                                  ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDRasterSubPanelEnable                                           \
S        ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[25])
X#define ROM_LCDRasterSubPanelEnable                                                   ((void (*)(uint32_t ui32Base))ROM_LCDTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_LCDRasterTimingSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   const tLCDRasterTiming *pTiming))ROM_LCDTABLE[26])
X#define ROM_LCDRasterTimingSet                                                        ((void (*)(uint32_t ui32Base,                                                            const tLCDRasterTiming *pTiming))ROM_LCDTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_LCDRasterEnabled                                                  \
S        ((bool (*)(uint32_t ui32Base))ROM_LCDTABLE[27])
X#define ROM_LCDRasterEnabled                                                          ((bool (*)(uint32_t ui32Base))ROM_LCDTABLE[27])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the MPU API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPUEnable                                                         \
N        ((void (*)(uint32_t ui32MPUConfig))ROM_MPUTABLE[0])
X#define ROM_MPUEnable                                                                 ((void (*)(uint32_t ui32MPUConfig))ROM_MPUTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPUDisable                                                        \
N        ((void (*)(void))ROM_MPUTABLE[1])
X#define ROM_MPUDisable                                                                ((void (*)(void))ROM_MPUTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPURegionCountGet                                                 \
N        ((uint32_t (*)(void))ROM_MPUTABLE[2])
X#define ROM_MPURegionCountGet                                                         ((uint32_t (*)(void))ROM_MPUTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPURegionEnable                                                   \
N        ((void (*)(uint32_t ui32Region))ROM_MPUTABLE[3])
X#define ROM_MPURegionEnable                                                           ((void (*)(uint32_t ui32Region))ROM_MPUTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPURegionDisable                                                  \
N        ((void (*)(uint32_t ui32Region))ROM_MPUTABLE[4])
X#define ROM_MPURegionDisable                                                          ((void (*)(uint32_t ui32Region))ROM_MPUTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPURegionSet                                                      \
N        ((void (*)(uint32_t ui32Region,                                       \
N                   uint32_t ui32Addr,                                         \
N                   uint32_t ui32Flags))ROM_MPUTABLE[5])
X#define ROM_MPURegionSet                                                              ((void (*)(uint32_t ui32Region,                                                          uint32_t ui32Addr,                                                            uint32_t ui32Flags))ROM_MPUTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_MPURegionGet                                                      \
N        ((void (*)(uint32_t ui32Region,                                       \
N                   uint32_t *pui32Addr,                                       \
N                   uint32_t *pui32Flags))ROM_MPUTABLE[6])
X#define ROM_MPURegionGet                                                              ((void (*)(uint32_t ui32Region,                                                          uint32_t *pui32Addr,                                                          uint32_t *pui32Flags))ROM_MPUTABLE[6])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the OneWire API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireIntStatus                                                  \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_ONEWIRETABLE[0])
X#define ROM_OneWireIntStatus                                                          ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_ONEWIRETABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireBusReset                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_ONEWIRETABLE[1])
X#define ROM_OneWireBusReset                                                           ((void (*)(uint32_t ui32Base))ROM_ONEWIRETABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireBusStatus                                                  \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_ONEWIRETABLE[2])
X#define ROM_OneWireBusStatus                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_ONEWIRETABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireDataGet                                                    \
S        ((void (*)(uint32_t u3i2Base,                                         \
S                   uint32_t *pui32Data))ROM_ONEWIRETABLE[3])
X#define ROM_OneWireDataGet                                                            ((void (*)(uint32_t u3i2Base,                                                            uint32_t *pui32Data))ROM_ONEWIRETABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireDataGetNonBlocking                                         \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Data))ROM_ONEWIRETABLE[4])
X#define ROM_OneWireDataGetNonBlocking                                                 ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Data))ROM_ONEWIRETABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireInit                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32InitFlags))ROM_ONEWIRETABLE[5])
X#define ROM_OneWireInit                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32InitFlags))ROM_ONEWIRETABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireIntClear                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ONEWIRETABLE[6])
X#define ROM_OneWireIntClear                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ONEWIRETABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireIntDisable                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ONEWIRETABLE[7])
X#define ROM_OneWireIntDisable                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ONEWIRETABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireIntEnable                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_ONEWIRETABLE[8])
X#define ROM_OneWireIntEnable                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_ONEWIRETABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireTransaction                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32OpFlags,                                      \
S                   uint32_t ui32Data,                                         \
S                   uint32_t ui32BitCnt))ROM_ONEWIRETABLE[9])
X#define ROM_OneWireTransaction                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32OpFlags,                                                         uint32_t ui32Data,                                                            uint32_t ui32BitCnt))ROM_ONEWIRETABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireDMADisable                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32DMAFlags))ROM_ONEWIRETABLE[10])
X#define ROM_OneWireDMADisable                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_ONEWIRETABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_OneWireDMAEnable                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32DMAFlags))ROM_ONEWIRETABLE[11])
X#define ROM_OneWireDMAEnable                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_ONEWIRETABLE[11])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the PWM API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMPulseWidthSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOut,                                       \
N                   uint32_t ui32Width))ROM_PWMTABLE[0])
X#define ROM_PWMPulseWidthSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOut,                                                          uint32_t ui32Width))ROM_PWMTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenConfigure                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32Config))ROM_PWMTABLE[1])
X#define ROM_PWMGenConfigure                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Config))ROM_PWMTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenPeriodSet                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32Period))ROM_PWMTABLE[2])
X#define ROM_PWMGenPeriodSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Period))ROM_PWMTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenPeriodGet                                                   \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Gen))ROM_PWMTABLE[3])
X#define ROM_PWMGenPeriodGet                                                           ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen))ROM_PWMTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen))ROM_PWMTABLE[4])
X#define ROM_PWMGenEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen))ROM_PWMTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen))ROM_PWMTABLE[5])
X#define ROM_PWMGenDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen))ROM_PWMTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMPulseWidthGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32PWMOut))ROM_PWMTABLE[6])
X#define ROM_PWMPulseWidthGet                                                          ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOut))ROM_PWMTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMDeadBandEnable                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint16_t ui16Rise,                                         \
N                   uint16_t ui16Fall))ROM_PWMTABLE[7])
X#define ROM_PWMDeadBandEnable                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint16_t ui16Rise,                                                            uint16_t ui16Fall))ROM_PWMTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMDeadBandDisable                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen))ROM_PWMTABLE[8])
X#define ROM_PWMDeadBandDisable                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen))ROM_PWMTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMSyncUpdate                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32GenBits))ROM_PWMTABLE[9])
X#define ROM_PWMSyncUpdate                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32GenBits))ROM_PWMTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMSyncTimeBase                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32GenBits))ROM_PWMTABLE[10])
X#define ROM_PWMSyncTimeBase                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32GenBits))ROM_PWMTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMOutputState                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOutBits,                                   \
N                   bool bEnable))ROM_PWMTABLE[11])
X#define ROM_PWMOutputState                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOutBits,                                                      bool bEnable))ROM_PWMTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMOutputInvert                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOutBits,                                   \
N                   bool bInvert))ROM_PWMTABLE[12])
X#define ROM_PWMOutputInvert                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOutBits,                                                      bool bInvert))ROM_PWMTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMOutputFault                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOutBits,                                   \
N                   bool bFaultSuppress))ROM_PWMTABLE[13])
X#define ROM_PWMOutputFault                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOutBits,                                                      bool bFaultSuppress))ROM_PWMTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenIntTrigEnable                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32IntTrig))ROM_PWMTABLE[14])
X#define ROM_PWMGenIntTrigEnable                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32IntTrig))ROM_PWMTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenIntTrigDisable                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32IntTrig))ROM_PWMTABLE[15])
X#define ROM_PWMGenIntTrigDisable                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32IntTrig))ROM_PWMTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenIntStatus                                                   \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Gen,                                      \
N                       bool bMasked))ROM_PWMTABLE[16])
X#define ROM_PWMGenIntStatus                                                           ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             bool bMasked))ROM_PWMTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenIntClear                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32Ints))ROM_PWMTABLE[17])
X#define ROM_PWMGenIntClear                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Ints))ROM_PWMTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMIntEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32GenFault))ROM_PWMTABLE[18])
X#define ROM_PWMIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32GenFault))ROM_PWMTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMIntDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32GenFault))ROM_PWMTABLE[19])
X#define ROM_PWMIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32GenFault))ROM_PWMTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMFaultIntClear                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_PWMTABLE[20])
X#define ROM_PWMFaultIntClear                                                          ((void (*)(uint32_t ui32Base))ROM_PWMTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMIntStatus                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_PWMTABLE[21])
X#define ROM_PWMIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_PWMTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMOutputFaultLevel                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PWMOutBits,                                   \
N                   bool bDriveHigh))ROM_PWMTABLE[22])
X#define ROM_PWMOutputFaultLevel                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOutBits,                                                      bool bDriveHigh))ROM_PWMTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMFaultIntClearExt                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32FaultInts))ROM_PWMTABLE[23])
X#define ROM_PWMFaultIntClearExt                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32FaultInts))ROM_PWMTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenFaultConfigure                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32MinFaultPeriod,                               \
N                   uint32_t ui32FaultSenses))ROM_PWMTABLE[24])
X#define ROM_PWMGenFaultConfigure                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32MinFaultPeriod,                                                  uint32_t ui32FaultSenses))ROM_PWMTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenFaultTriggerSet                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32Group,                                        \
N                   uint32_t ui32FaultTriggers))ROM_PWMTABLE[25])
X#define ROM_PWMGenFaultTriggerSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Group,                                                           uint32_t ui32FaultTriggers))ROM_PWMTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenFaultTriggerGet                                             \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Gen,                                      \
N                       uint32_t ui32Group))ROM_PWMTABLE[26])
X#define ROM_PWMGenFaultTriggerGet                                                     ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Group))ROM_PWMTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenFaultStatus                                                 \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Gen,                                      \
N                       uint32_t ui32Group))ROM_PWMTABLE[27])
X#define ROM_PWMGenFaultStatus                                                         ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Group))ROM_PWMTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_PWMGenFaultClear                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Gen,                                          \
N                   uint32_t ui32Group,                                        \
N                   uint32_t ui32FaultTriggers))ROM_PWMTABLE[28])
X#define ROM_PWMGenFaultClear                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Gen,                                                             uint32_t ui32Group,                                                           uint32_t ui32FaultTriggers))ROM_PWMTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_PWMClockSet                                                       \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_PWMTABLE[29])
X#define ROM_PWMClockSet                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_PWMTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_PWMClockGet                                                       \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_PWMTABLE[30])
X#define ROM_PWMClockGet                                                               ((uint32_t (*)(uint32_t ui32Base))ROM_PWMTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_PWMOutputUpdateMode                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32PWMOutBits,                                   \
S                   uint32_t ui32Mode))ROM_PWMTABLE[31])
X#define ROM_PWMOutputUpdateMode                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PWMOutBits,                                                      uint32_t ui32Mode))ROM_PWMTABLE[31])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the QEI API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIPositionGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_QEITABLE[0])
X#define ROM_QEIPositionGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_QEITABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIEnable                                                         \
N        ((void (*)(uint32_t ui32Base))ROM_QEITABLE[1])
X#define ROM_QEIEnable                                                                 ((void (*)(uint32_t ui32Base))ROM_QEITABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIDisable                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_QEITABLE[2])
X#define ROM_QEIDisable                                                                ((void (*)(uint32_t ui32Base))ROM_QEITABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIConfigure                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Config,                                       \
N                   uint32_t ui32MaxPosition))ROM_QEITABLE[3])
X#define ROM_QEIConfigure                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config,                                                          uint32_t ui32MaxPosition))ROM_QEITABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIPositionSet                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Position))ROM_QEITABLE[4])
X#define ROM_QEIPositionSet                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Position))ROM_QEITABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIDirectionGet                                                   \
N        ((int32_t (*)(uint32_t ui32Base))ROM_QEITABLE[5])
X#define ROM_QEIDirectionGet                                                           ((int32_t (*)(uint32_t ui32Base))ROM_QEITABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIErrorGet                                                       \
N        ((bool (*)(uint32_t ui32Base))ROM_QEITABLE[6])
X#define ROM_QEIErrorGet                                                               ((bool (*)(uint32_t ui32Base))ROM_QEITABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIVelocityEnable                                                 \
N        ((void (*)(uint32_t ui32Base))ROM_QEITABLE[7])
X#define ROM_QEIVelocityEnable                                                         ((void (*)(uint32_t ui32Base))ROM_QEITABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIVelocityDisable                                                \
N        ((void (*)(uint32_t ui32Base))ROM_QEITABLE[8])
X#define ROM_QEIVelocityDisable                                                        ((void (*)(uint32_t ui32Base))ROM_QEITABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIVelocityConfigure                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32PreDiv,                                       \
N                   uint32_t ui32Period))ROM_QEITABLE[9])
X#define ROM_QEIVelocityConfigure                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32PreDiv,                                                          uint32_t ui32Period))ROM_QEITABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIVelocityGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_QEITABLE[10])
X#define ROM_QEIVelocityGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_QEITABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIIntEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_QEITABLE[11])
X#define ROM_QEIIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_QEITABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIIntDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_QEITABLE[12])
X#define ROM_QEIIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_QEITABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIIntStatus                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_QEITABLE[13])
X#define ROM_QEIIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_QEITABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_QEIIntClear                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_QEITABLE[14])
X#define ROM_QEIIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_QEITABLE[14])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SHAMD5 API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5IntStatus                                                   \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       bool bMasked))ROM_SHAMD5TABLE[0])
X#define ROM_SHAMD5IntStatus                                                           ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_SHAMD5TABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5ConfigSet                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Mode))ROM_SHAMD5TABLE[1])
X#define ROM_SHAMD5ConfigSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_SHAMD5TABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5DataProcess                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32DataSrc,                                    \
S                   uint32_t ui32DataLength,                                   \
S                   uint32_t *pui32HashResult))ROM_SHAMD5TABLE[2])
X#define ROM_SHAMD5DataProcess                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32DataSrc,                                                       uint32_t ui32DataLength,                                                      uint32_t *pui32HashResult))ROM_SHAMD5TABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5DataWrite                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_SHAMD5TABLE[3])
X#define ROM_SHAMD5DataWrite                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_SHAMD5TABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5DataWriteNonBlocking                                        \
S        ((bool (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_SHAMD5TABLE[4])
X#define ROM_SHAMD5DataWriteNonBlocking                                                ((bool (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_SHAMD5TABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5DMADisable                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[5])
X#define ROM_SHAMD5DMADisable                                                          ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5DMAEnable                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[6])
X#define ROM_SHAMD5DMAEnable                                                           ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5HashLengthSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Length))ROM_SHAMD5TABLE[7])
X#define ROM_SHAMD5HashLengthSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Length))ROM_SHAMD5TABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5HMACKeySet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_SHAMD5TABLE[8])
X#define ROM_SHAMD5HMACKeySet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_SHAMD5TABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5HMACPPKeyGenerate                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Key,                                        \
S                   uint32_t *pui32PPKey))ROM_SHAMD5TABLE[9])
X#define ROM_SHAMD5HMACPPKeyGenerate                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Key,                                                           uint32_t *pui32PPKey))ROM_SHAMD5TABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5HMACPPKeySet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Src))ROM_SHAMD5TABLE[10])
X#define ROM_SHAMD5HMACPPKeySet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Src))ROM_SHAMD5TABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5HMACProcess                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32DataSrc,                                    \
S                   uint32_t ui32DataLength,                                   \
S                   uint32_t *pui32HashResult))ROM_SHAMD5TABLE[11])
X#define ROM_SHAMD5HMACProcess                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32DataSrc,                                                       uint32_t ui32DataLength,                                                      uint32_t *pui32HashResult))ROM_SHAMD5TABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5IntClear                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_SHAMD5TABLE[12])
X#define ROM_SHAMD5IntClear                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SHAMD5TABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5IntDisable                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_SHAMD5TABLE[13])
X#define ROM_SHAMD5IntDisable                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SHAMD5TABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5IntEnable                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32IntFlags))ROM_SHAMD5TABLE[14])
X#define ROM_SHAMD5IntEnable                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SHAMD5TABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5Reset                                                       \
S        ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[15])
X#define ROM_SHAMD5Reset                                                               ((void (*)(uint32_t ui32Base))ROM_SHAMD5TABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SHAMD5ResultRead                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t *pui32Dest))ROM_SHAMD5TABLE[16])
X#define ROM_SHAMD5ResultRead                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Dest))ROM_SHAMD5TABLE[16])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SMBus API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterIntProcess                                             \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[0])
X#define ROM_SMBusMasterIntProcess                                                     ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusARPDisable                                                   \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[1])
X#define ROM_SMBusARPDisable                                                           ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusARPEnable                                                    \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[2])
X#define ROM_SMBusARPEnable                                                            ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusARPUDIDPacketDecode                                          \
N        ((void (*)(tSMBusUDID *pUDID,                                         \
N                   uint8_t *pui8Address,                                      \
N                   uint8_t *pui8Data))ROM_SMBUSTABLE[3])
X#define ROM_SMBusARPUDIDPacketDecode                                                  ((void (*)(tSMBusUDID *pUDID,                                                            uint8_t *pui8Address,                                                         uint8_t *pui8Data))ROM_SMBUSTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusARPUDIDPacketEncode                                          \
N        ((void (*)(tSMBusUDID *pUDID,                                         \
N                   uint8_t ui8Address,                                        \
N                   uint8_t *pui8Data))ROM_SMBUSTABLE[4])
X#define ROM_SMBusARPUDIDPacketEncode                                                  ((void (*)(tSMBusUDID *pUDID,                                                            uint8_t ui8Address,                                                           uint8_t *pui8Data))ROM_SMBUSTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPAssignAddress                                       \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[5])
X#define ROM_SMBusMasterARPAssignAddress                                               ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t *pui8Data))ROM_SMBUSTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPGetUDIDDir                                          \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[6])
X#define ROM_SMBusMasterARPGetUDIDDir                                                  ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t *pui8Data))ROM_SMBUSTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPGetUDIDGen                                          \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[7])
X#define ROM_SMBusMasterARPGetUDIDGen                                                  ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t *pui8Data))ROM_SMBUSTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPNotifyMaster                                        \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[8])
X#define ROM_SMBusMasterARPNotifyMaster                                                ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t *pui8Data))ROM_SMBUSTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPPrepareToARP                                        \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[9])
X#define ROM_SMBusMasterARPPrepareToARP                                                ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPResetDeviceDir                                      \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress))ROM_SMBUSTABLE[10])
X#define ROM_SMBusMasterARPResetDeviceDir                                              ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress))ROM_SMBUSTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterARPResetDeviceGen                                      \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[11])
X#define ROM_SMBusMasterARPResetDeviceGen                                              ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterBlockProcessCall                                       \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8TxData,                               \
N                           uint8_t ui8TxSize,                                 \
N                           uint8_t *pui8RxData))ROM_SMBUSTABLE[12])
X#define ROM_SMBusMasterBlockProcessCall                                               ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8TxData,                                                          uint8_t ui8TxSize,                                                            uint8_t *pui8RxData))ROM_SMBUSTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterBlockRead                                              \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[13])
X#define ROM_SMBusMasterBlockRead                                                      ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8Data))ROM_SMBUSTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterBlockWrite                                             \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8Data,                                 \
N                           uint8_t ui8Size))ROM_SMBUSTABLE[14])
X#define ROM_SMBusMasterBlockWrite                                                     ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterByteReceive                                            \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[15])
X#define ROM_SMBusMasterByteReceive                                                    ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t *pui8Data))ROM_SMBUSTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterByteSend                                               \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Data))ROM_SMBUSTABLE[16])
X#define ROM_SMBusMasterByteSend                                                       ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Data))ROM_SMBUSTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterByteWordRead                                           \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8Data,                                 \
N                           uint8_t ui8Size))ROM_SMBUSTABLE[17])
X#define ROM_SMBusMasterByteWordRead                                                   ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterByteWordWrite                                          \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8Data,                                 \
N                           uint8_t ui8Size))ROM_SMBUSTABLE[18])
X#define ROM_SMBusMasterByteWordWrite                                                  ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterHostNotify                                             \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8OwnSlaveAddress,                        \
N                           uint8_t *pui8Data))ROM_SMBUSTABLE[19])
X#define ROM_SMBusMasterHostNotify                                                     ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8OwnSlaveAddress,                                                   uint8_t *pui8Data))ROM_SMBUSTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterI2CRead                                                \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t *pui8Data,                                 \
N                           uint8_t ui8Size))ROM_SMBUSTABLE[20])
X#define ROM_SMBusMasterI2CRead                                                        ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterI2CWrite                                               \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t *pui8Data,                                 \
N                           uint8_t ui8Size))ROM_SMBUSTABLE[21])
X#define ROM_SMBusMasterI2CWrite                                                       ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterI2CWriteRead                                           \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t *pui8TxData,                               \
N                           uint8_t ui8TxSize,                                 \
N                           uint8_t *pui8RxData,                               \
N                           uint8_t ui8RxSize))ROM_SMBUSTABLE[22])
X#define ROM_SMBusMasterI2CWriteRead                                                   ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t *pui8TxData,                                                          uint8_t ui8TxSize,                                                            uint8_t *pui8RxData,                                                          uint8_t ui8RxSize))ROM_SMBUSTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterInit                                                   \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   uint32_t ui32I2CBase,                                      \
N                   uint32_t ui32SMBusClock))ROM_SMBUSTABLE[23])
X#define ROM_SMBusMasterInit                                                           ((void (*)(tSMBus *psSMBus,                                                              uint32_t ui32I2CBase,                                                         uint32_t ui32SMBusClock))ROM_SMBUSTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterIntEnable                                              \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[24])
X#define ROM_SMBusMasterIntEnable                                                      ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterProcessCall                                            \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           uint8_t ui8Command,                                \
N                           uint8_t *pui8TxData,                               \
N                           uint8_t *pui8RxData))ROM_SMBUSTABLE[25])
X#define ROM_SMBusMasterProcessCall                                                    ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     uint8_t ui8Command,                                                           uint8_t *pui8TxData,                                                          uint8_t *pui8RxData))ROM_SMBUSTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusMasterQuickCommand                                           \
N        ((tSMBusStatus (*)(tSMBus *psSMBus,                                   \
N                           uint8_t ui8TargetAddress,                          \
N                           bool bData))ROM_SMBUSTABLE[26])
X#define ROM_SMBusMasterQuickCommand                                                   ((tSMBusStatus (*)(tSMBus *psSMBus,                                                              uint8_t ui8TargetAddress,                                                     bool bData))ROM_SMBUSTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusPECDisable                                                   \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[27])
X#define ROM_SMBusPECDisable                                                           ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusPECEnable                                                    \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[28])
X#define ROM_SMBusPECEnable                                                            ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusRxPacketSizeGet                                              \
N        ((uint8_t (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[29])
X#define ROM_SMBusRxPacketSizeGet                                                      ((uint8_t (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveACKSend                                                 \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   bool bACK))ROM_SMBUSTABLE[30])
X#define ROM_SMBusSlaveACKSend                                                         ((void (*)(tSMBus *psSMBus,                                                              bool bACK))ROM_SMBUSTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveAddressSet                                              \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   uint8_t ui8AddressNum,                                     \
N                   uint8_t ui8SlaveAddress))ROM_SMBUSTABLE[31])
X#define ROM_SMBusSlaveAddressSet                                                      ((void (*)(tSMBus *psSMBus,                                                              uint8_t ui8AddressNum,                                                        uint8_t ui8SlaveAddress))ROM_SMBUSTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveARPFlagARGet                                            \
N        ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[32])
X#define ROM_SMBusSlaveARPFlagARGet                                                    ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveARPFlagARSet                                            \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   bool bValue))ROM_SMBUSTABLE[33])
X#define ROM_SMBusSlaveARPFlagARSet                                                    ((void (*)(tSMBus *psSMBus,                                                              bool bValue))ROM_SMBUSTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveARPFlagAVGet                                            \
N        ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[34])
X#define ROM_SMBusSlaveARPFlagAVGet                                                    ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveARPFlagAVSet                                            \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   bool bValue))ROM_SMBUSTABLE[35])
X#define ROM_SMBusSlaveARPFlagAVSet                                                    ((void (*)(tSMBus *psSMBus,                                                              bool bValue))ROM_SMBUSTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveBlockTransferDisable                                    \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[36])
X#define ROM_SMBusSlaveBlockTransferDisable                                            ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveBlockTransferEnable                                     \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[37])
X#define ROM_SMBusSlaveBlockTransferEnable                                             ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveCommandGet                                              \
N        ((uint8_t (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[38])
X#define ROM_SMBusSlaveCommandGet                                                      ((uint8_t (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveI2CDisable                                              \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[39])
X#define ROM_SMBusSlaveI2CDisable                                                      ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveI2CEnable                                               \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[40])
X#define ROM_SMBusSlaveI2CEnable                                                       ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[40])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveInit                                                    \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   uint32_t ui32I2CBase))ROM_SMBUSTABLE[41])
X#define ROM_SMBusSlaveInit                                                            ((void (*)(tSMBus *psSMBus,                                                              uint32_t ui32I2CBase))ROM_SMBUSTABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveIntAddressGet                                           \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[42])
X#define ROM_SMBusSlaveIntAddressGet                                                   ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveIntEnable                                               \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[43])
X#define ROM_SMBusSlaveIntEnable                                                       ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveIntProcess                                              \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[44])
X#define ROM_SMBusSlaveIntProcess                                                      ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveManualACKDisable                                        \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[45])
X#define ROM_SMBusSlaveManualACKDisable                                                ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveManualACKEnable                                         \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[46])
X#define ROM_SMBusSlaveManualACKEnable                                                 ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveManualACKStatusGet                                      \
N        ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[47])
X#define ROM_SMBusSlaveManualACKStatusGet                                              ((bool (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveProcessCallDisable                                      \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[48])
X#define ROM_SMBusSlaveProcessCallDisable                                              ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveProcessCallEnable                                       \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[49])
X#define ROM_SMBusSlaveProcessCallEnable                                               ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveRxBufferSet                                             \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   uint8_t *pui8Data,                                         \
N                   uint8_t ui8Size))ROM_SMBUSTABLE[50])
X#define ROM_SMBusSlaveRxBufferSet                                                     ((void (*)(tSMBus *psSMBus,                                                              uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[50])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveTransferInit                                            \
N        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[51])
X#define ROM_SMBusSlaveTransferInit                                                    ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveTxBufferSet                                             \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   uint8_t *pui8Data,                                         \
N                   uint8_t ui8Size))ROM_SMBUSTABLE[52])
X#define ROM_SMBusSlaveTxBufferSet                                                     ((void (*)(tSMBus *psSMBus,                                                              uint8_t *pui8Data,                                                            uint8_t ui8Size))ROM_SMBUSTABLE[52])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveUDIDSet                                                 \
N        ((void (*)(tSMBus *psSMBus,                                           \
N                   tSMBusUDID *pUDID))ROM_SMBUSTABLE[53])
X#define ROM_SMBusSlaveUDIDSet                                                         ((void (*)(tSMBus *psSMBus,                                                              tSMBusUDID *pUDID))ROM_SMBUSTABLE[53])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusStatusGet                                                    \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[54])
X#define ROM_SMBusStatusGet                                                            ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[54])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SMBusSlaveDataSend                                                \
N        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[55])
X#define ROM_SMBusSlaveDataSend                                                        ((tSMBusStatus (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[55])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SMBusFIFOEnable                                                   \
S        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[56])
X#define ROM_SMBusFIFOEnable                                                           ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[56])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SMBusFIFODisable                                                  \
S        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[57])
X#define ROM_SMBusFIFODisable                                                          ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[57])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SMBusDMAEnable                                                    \
S        ((void (*)(tSMBus *psSMBus,                                           \
S                   uint8_t ui8TxChannel,                                      \
S                   uint8_t ui8RxChannel))ROM_SMBUSTABLE[58])
X#define ROM_SMBusDMAEnable                                                            ((void (*)(tSMBus *psSMBus,                                                              uint8_t ui8TxChannel,                                                         uint8_t ui8RxChannel))ROM_SMBUSTABLE[58])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SMBusDMADisable                                                   \
S        ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[59])
X#define ROM_SMBusDMADisable                                                           ((void (*)(tSMBus *psSMBus))ROM_SMBUSTABLE[59])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SPIFlash API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashIntHandler                                                \
S        ((uint32_t (*)(tSPIFlashState *pState))ROM_SPIFLASHTABLE[0])
X#define ROM_SPIFlashIntHandler                                                        ((uint32_t (*)(tSPIFlashState *pState))ROM_SPIFLASHTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashInit                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Clock,                                        \
S                   uint32_t ui32BitRate))ROM_SPIFLASHTABLE[1])
X#define ROM_SPIFlashInit                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Clock,                                                           uint32_t ui32BitRate))ROM_SPIFLASHTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashWriteStatus                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Status))ROM_SPIFLASHTABLE[2])
X#define ROM_SPIFlashWriteStatus                                                       ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Status))ROM_SPIFLASHTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashPageProgram                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   const uint8_t *pui8Data,                                   \
S                   uint32_t ui32Count))ROM_SPIFLASHTABLE[3])
X#define ROM_SPIFlashPageProgram                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            const uint8_t *pui8Data,                                                      uint32_t ui32Count))ROM_SPIFLASHTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashPageProgramNonBlocking                                    \
S        ((void (*)(tSPIFlashState *pState,                                    \
S                   uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   const uint8_t *pui8Data,                                   \
S                   uint32_t ui32Count,                                        \
S                   bool bUseDMA,                                              \
S                   uint32_t ui32TxChannel))ROM_SPIFLASHTABLE[4])
X#define ROM_SPIFlashPageProgramNonBlocking                                            ((void (*)(tSPIFlashState *pState,                                                       uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            const uint8_t *pui8Data,                                                      uint32_t ui32Count,                                                           bool bUseDMA,                                                                 uint32_t ui32TxChannel))ROM_SPIFLASHTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashRead                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count))ROM_SPIFLASHTABLE[5])
X#define ROM_SPIFlashRead                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count))ROM_SPIFLASHTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashReadNonBlocking                                           \
S        ((void (*)(tSPIFlashState *pState,                                    \
S                   uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count,                                        \
S                   bool bUseDMA,                                              \
S                   uint32_t ui32TxChannel,                                    \
S                   uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[6])
X#define ROM_SPIFlashReadNonBlocking                                                   ((void (*)(tSPIFlashState *pState,                                                       uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count,                                                           bool bUseDMA,                                                                 uint32_t ui32TxChannel,                                                       uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashWriteDisable                                              \
S        ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[7])
X#define ROM_SPIFlashWriteDisable                                                      ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashReadStatus                                                \
S        ((uint8_t (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[8])
X#define ROM_SPIFlashReadStatus                                                        ((uint8_t (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashWriteEnable                                               \
S        ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[9])
X#define ROM_SPIFlashWriteEnable                                                       ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashFastRead                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count))ROM_SPIFLASHTABLE[10])
X#define ROM_SPIFlashFastRead                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count))ROM_SPIFLASHTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashFastReadNonBlocking                                       \
S        ((void (*)(tSPIFlashState *pState,                                    \
S                   uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count,                                        \
S                   bool bUseDMA,                                              \
S                   uint32_t ui32TxChannel,                                    \
S                   uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[11])
X#define ROM_SPIFlashFastReadNonBlocking                                               ((void (*)(tSPIFlashState *pState,                                                       uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count,                                                           bool bUseDMA,                                                                 uint32_t ui32TxChannel,                                                       uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashSectorErase                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr))ROM_SPIFLASHTABLE[12])
X#define ROM_SPIFlashSectorErase                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr))ROM_SPIFLASHTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashDualRead                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count))ROM_SPIFLASHTABLE[13])
X#define ROM_SPIFlashDualRead                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count))ROM_SPIFLASHTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashDualReadNonBlocking                                       \
S        ((void (*)(tSPIFlashState *pState,                                    \
S                   uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count,                                        \
S                   bool bUseDMA,                                              \
S                   uint32_t ui32TxChannel,                                    \
S                   uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[14])
X#define ROM_SPIFlashDualReadNonBlocking                                               ((void (*)(tSPIFlashState *pState,                                                       uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count,                                                           bool bUseDMA,                                                                 uint32_t ui32TxChannel,                                                       uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashBlockErase32                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr))ROM_SPIFLASHTABLE[15])
X#define ROM_SPIFlashBlockErase32                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr))ROM_SPIFLASHTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashQuadRead                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count))ROM_SPIFLASHTABLE[16])
X#define ROM_SPIFlashQuadRead                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count))ROM_SPIFLASHTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashQuadReadNonBlocking                                       \
S        ((void (*)(tSPIFlashState *pState,                                    \
S                   uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr,                                         \
S                   uint8_t *pui8Data,                                         \
S                   uint32_t ui32Count,                                        \
S                   bool bUseDMA,                                              \
S                   uint32_t ui32TxChannel,                                    \
S                   uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[17])
X#define ROM_SPIFlashQuadReadNonBlocking                                               ((void (*)(tSPIFlashState *pState,                                                       uint32_t ui32Base,                                                            uint32_t ui32Addr,                                                            uint8_t *pui8Data,                                                            uint32_t ui32Count,                                                           bool bUseDMA,                                                                 uint32_t ui32TxChannel,                                                       uint32_t ui32RxChannel))ROM_SPIFLASHTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashReadID                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t *pui8ManufacturerID,                               \
S                   uint16_t *pui16DeviceID))ROM_SPIFLASHTABLE[18])
X#define ROM_SPIFlashReadID                                                            ((void (*)(uint32_t ui32Base,                                                            uint8_t *pui8ManufacturerID,                                                  uint16_t *pui16DeviceID))ROM_SPIFLASHTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashChipErase                                                 \
S        ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[19])
X#define ROM_SPIFlashChipErase                                                         ((void (*)(uint32_t ui32Base))ROM_SPIFLASHTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SPIFlashBlockErase64                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Addr))ROM_SPIFLASHTABLE[20])
X#define ROM_SPIFlashBlockErase64                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Addr))ROM_SPIFLASHTABLE[20])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SSI API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDataPut                                                        \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Data))ROM_SSITABLE[0])
X#define ROM_SSIDataPut                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Data))ROM_SSITABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIConfigSetExpClk                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32SSIClk,                                       \
N                   uint32_t ui32Protocol,                                     \
N                   uint32_t ui32Mode,                                         \
N                   uint32_t ui32BitRate,                                      \
N                   uint32_t ui32DataWidth))ROM_SSITABLE[1])
X#define ROM_SSIConfigSetExpClk                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32SSIClk,                                                          uint32_t ui32Protocol,                                                        uint32_t ui32Mode,                                                            uint32_t ui32BitRate,                                                         uint32_t ui32DataWidth))ROM_SSITABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIEnable                                                         \
N        ((void (*)(uint32_t ui32Base))ROM_SSITABLE[2])
X#define ROM_SSIEnable                                                                 ((void (*)(uint32_t ui32Base))ROM_SSITABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDisable                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_SSITABLE[3])
X#define ROM_SSIDisable                                                                ((void (*)(uint32_t ui32Base))ROM_SSITABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIIntEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_SSITABLE[4])
X#define ROM_SSIIntEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SSITABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIIntDisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_SSITABLE[5])
X#define ROM_SSIIntDisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SSITABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIIntStatus                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_SSITABLE[6])
X#define ROM_SSIIntStatus                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_SSITABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIIntClear                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_SSITABLE[7])
X#define ROM_SSIIntClear                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_SSITABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDataPutNonBlocking                                             \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32Data))ROM_SSITABLE[8])
X#define ROM_SSIDataPutNonBlocking                                                     ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Data))ROM_SSITABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDataGet                                                        \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t *pui32Data))ROM_SSITABLE[9])
X#define ROM_SSIDataGet                                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32Data))ROM_SSITABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDataGetNonBlocking                                             \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t *pui32Data))ROM_SSITABLE[10])
X#define ROM_SSIDataGetNonBlocking                                                     ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t *pui32Data))ROM_SSITABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UpdateSSI                                                         \
N        ((void (*)(void))ROM_SSITABLE[11])
X#define ROM_UpdateSSI                                                                 ((void (*)(void))ROM_SSITABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDMAEnable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32DMAFlags))ROM_SSITABLE[12])
X#define ROM_SSIDMAEnable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_SSITABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIDMADisable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32DMAFlags))ROM_SSITABLE[13])
X#define ROM_SSIDMADisable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_SSITABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIBusy                                                           \
N        ((bool (*)(uint32_t ui32Base))ROM_SSITABLE[14])
X#define ROM_SSIBusy                                                                   ((bool (*)(uint32_t ui32Base))ROM_SSITABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIClockSourceGet                                                 \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_SSITABLE[15])
X#define ROM_SSIClockSourceGet                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_SSITABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SSIClockSourceSet                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Source))ROM_SSITABLE[16])
X#define ROM_SSIClockSourceSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Source))ROM_SSITABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SSIAdvModeSet                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Mode))ROM_SSITABLE[17])
X#define ROM_SSIAdvModeSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_SSITABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SSIAdvDataPutFrameEnd                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Data))ROM_SSITABLE[18])
X#define ROM_SSIAdvDataPutFrameEnd                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Data))ROM_SSITABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SSIAdvDataPutFrameEndNonBlocking                                  \
S        ((int32_t (*)(uint32_t ui32Base,                                      \
S                      uint32_t ui32Data))ROM_SSITABLE[19])
X#define ROM_SSIAdvDataPutFrameEndNonBlocking                                          ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Data))ROM_SSITABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SSIAdvFrameHoldEnable                                             \
S        ((void (*)(uint32_t ui32Base))ROM_SSITABLE[20])
X#define ROM_SSIAdvFrameHoldEnable                                                     ((void (*)(uint32_t ui32Base))ROM_SSITABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SSIAdvFrameHoldDisable                                            \
S        ((void (*)(uint32_t ui32Base))ROM_SSITABLE[21])
X#define ROM_SSIAdvFrameHoldDisable                                                    ((void (*)(uint32_t ui32Base))ROM_SSITABLE[21])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SysCtl API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlSleep                                                       \
N        ((void (*)(void))ROM_SYSCTLTABLE[0])
X#define ROM_SysCtlSleep                                                               ((void (*)(void))ROM_SYSCTLTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlSRAMSizeGet                                                 \
N        ((uint32_t (*)(void))ROM_SYSCTLTABLE[1])
X#define ROM_SysCtlSRAMSizeGet                                                         ((uint32_t (*)(void))ROM_SYSCTLTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlFlashSizeGet                                                \
N        ((uint32_t (*)(void))ROM_SYSCTLTABLE[2])
X#define ROM_SysCtlFlashSizeGet                                                        ((uint32_t (*)(void))ROM_SYSCTLTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralPresent                                           \
N        ((bool (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[4])
X#define ROM_SysCtlPeripheralPresent                                                   ((bool (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralReset                                             \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[5])
X#define ROM_SysCtlPeripheralReset                                                     ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralEnable                                            \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[6])
X#define ROM_SysCtlPeripheralEnable                                                    ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralDisable                                           \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[7])
X#define ROM_SysCtlPeripheralDisable                                                   ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralSleepEnable                                       \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[8])
X#define ROM_SysCtlPeripheralSleepEnable                                               ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralSleepDisable                                      \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[9])
X#define ROM_SysCtlPeripheralSleepDisable                                              ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralDeepSleepEnable                                   \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[10])
X#define ROM_SysCtlPeripheralDeepSleepEnable                                           ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralDeepSleepDisable                                  \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[11])
X#define ROM_SysCtlPeripheralDeepSleepDisable                                          ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralClockGating                                       \
N        ((void (*)(bool bEnable))ROM_SYSCTLTABLE[12])
X#define ROM_SysCtlPeripheralClockGating                                               ((void (*)(bool bEnable))ROM_SYSCTLTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlIntEnable                                                   \
N        ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[13])
X#define ROM_SysCtlIntEnable                                                           ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlIntDisable                                                  \
N        ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[14])
X#define ROM_SysCtlIntDisable                                                          ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlIntClear                                                    \
N        ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[15])
X#define ROM_SysCtlIntClear                                                            ((void (*)(uint32_t ui32Ints))ROM_SYSCTLTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlIntStatus                                                   \
N        ((uint32_t (*)(bool bMasked))ROM_SYSCTLTABLE[16])
X#define ROM_SysCtlIntStatus                                                           ((uint32_t (*)(bool bMasked))ROM_SYSCTLTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlReset                                                       \
N        ((void (*)(void))ROM_SYSCTLTABLE[19])
X#define ROM_SysCtlReset                                                               ((void (*)(void))ROM_SYSCTLTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlDeepSleep                                                   \
N        ((void (*)(void))ROM_SYSCTLTABLE[20])
X#define ROM_SysCtlDeepSleep                                                           ((void (*)(void))ROM_SYSCTLTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlResetCauseGet                                               \
N        ((uint32_t (*)(void))ROM_SYSCTLTABLE[21])
X#define ROM_SysCtlResetCauseGet                                                       ((uint32_t (*)(void))ROM_SYSCTLTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlResetCauseClear                                             \
N        ((void (*)(uint32_t ui32Causes))ROM_SYSCTLTABLE[22])
X#define ROM_SysCtlResetCauseClear                                                     ((void (*)(uint32_t ui32Causes))ROM_SYSCTLTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_SysCtlClockSet                                                    \
N        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[23])
X#define ROM_SysCtlClockSet                                                            ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_SysCtlClockGet                                                    \
N        ((uint32_t (*)(void))ROM_SYSCTLTABLE[24])
X#define ROM_SysCtlClockGet                                                            ((uint32_t (*)(void))ROM_SYSCTLTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_SysCtlPWMClockSet                                                 \
N        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[25])
X#define ROM_SysCtlPWMClockSet                                                         ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_SysCtlPWMClockGet                                                 \
N        ((uint32_t (*)(void))ROM_SYSCTLTABLE[26])
X#define ROM_SysCtlPWMClockGet                                                         ((uint32_t (*)(void))ROM_SYSCTLTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_SysCtlUSBPLLEnable                                                \
N        ((void (*)(void))ROM_SYSCTLTABLE[31])
X#define ROM_SysCtlUSBPLLEnable                                                        ((void (*)(void))ROM_SYSCTLTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_SysCtlUSBPLLDisable                                               \
N        ((void (*)(void))ROM_SYSCTLTABLE[32])
X#define ROM_SysCtlUSBPLLDisable                                                       ((void (*)(void))ROM_SYSCTLTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlDelay                                                       \
N        ((void (*)(uint32_t ui32Count))ROM_SYSCTLTABLE[34])
X#define ROM_SysCtlDelay                                                               ((void (*)(uint32_t ui32Count))ROM_SYSCTLTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralReady                                             \
N        ((bool (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[35])
X#define ROM_SysCtlPeripheralReady                                                     ((bool (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralPowerOn                                           \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[36])
X#define ROM_SysCtlPeripheralPowerOn                                                   ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPeripheralPowerOff                                          \
N        ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[37])
X#define ROM_SysCtlPeripheralPowerOff                                                  ((void (*)(uint32_t ui32Peripheral))ROM_SYSCTLTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlMOSCConfigSet                                               \
N        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[44])
X#define ROM_SysCtlMOSCConfigSet                                                       ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysCtlPIOSCCalibrate                                              \
N        ((uint32_t (*)(uint32_t ui32Type))ROM_SYSCTLTABLE[45])
X#define ROM_SysCtlPIOSCCalibrate                                                      ((uint32_t (*)(uint32_t ui32Type))ROM_SYSCTLTABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_SysCtlDeepSleepClockSet                                           \
N        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[46])
X#define ROM_SysCtlDeepSleepClockSet                                                   ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SysCtlDeepSleepClockConfigSet                                     \
S        ((void (*)(uint32_t ui32Div,                                          \
S                   uint32_t ui32Config))ROM_SYSCTLTABLE[47])
X#define ROM_SysCtlDeepSleepClockConfigSet                                             ((void (*)(uint32_t ui32Div,                                                             uint32_t ui32Config))ROM_SYSCTLTABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_SysCtlClockFreqSet                                                \
S        ((uint32_t (*)(uint32_t ui32Config,                                   \
S                       uint32_t ui32SysClock))ROM_SYSCTLTABLE[48])
X#define ROM_SysCtlClockFreqSet                                                        ((uint32_t (*)(uint32_t ui32Config,                                                          uint32_t ui32SysClock))ROM_SYSCTLTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SysCtlResetBehaviorSet                                            \
S        ((void (*)(uint32_t ui32Behavior))ROM_SYSCTLTABLE[51])
X#define ROM_SysCtlResetBehaviorSet                                                    ((void (*)(uint32_t ui32Behavior))ROM_SYSCTLTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SysCtlResetBehaviorGet                                            \
S        ((uint32_t (*)(void))ROM_SYSCTLTABLE[52])
X#define ROM_SysCtlResetBehaviorGet                                                    ((uint32_t (*)(void))ROM_SYSCTLTABLE[52])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SysCtlFlashSectorSizeGet                                          \
S        ((uint32_t (*)(void))ROM_SYSCTLTABLE[54])
X#define ROM_SysCtlFlashSectorSizeGet                                                  ((uint32_t (*)(void))ROM_SYSCTLTABLE[54])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_SysCtlVoltageEventConfig                                          \
S        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[55])
X#define ROM_SysCtlVoltageEventConfig                                                  ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[55])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SysCtlVoltageEventStatus                                          \
S        ((uint32_t (*)(void))ROM_SYSCTLTABLE[56])
X#define ROM_SysCtlVoltageEventStatus                                                  ((uint32_t (*)(void))ROM_SYSCTLTABLE[56])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SysCtlVoltageEventClear                                           \
S        ((void (*)(uint32_t ui32Status))ROM_SYSCTLTABLE[57])
X#define ROM_SysCtlVoltageEventClear                                                   ((void (*)(uint32_t ui32Status))ROM_SYSCTLTABLE[57])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SysCtlNMIStatus                                                   \
S        ((uint32_t (*)(void))ROM_SYSCTLTABLE[58])
X#define ROM_SysCtlNMIStatus                                                           ((uint32_t (*)(void))ROM_SYSCTLTABLE[58])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SysCtlNMIClear                                                    \
S        ((void (*)(uint32_t ui32Status))ROM_SYSCTLTABLE[59])
X#define ROM_SysCtlNMIClear                                                            ((void (*)(uint32_t ui32Status))ROM_SYSCTLTABLE[59])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SysCtlClockOutConfig                                              \
S        ((void (*)(uint32_t ui32Config,                                       \
S                   uint32_t ui32Div))ROM_SYSCTLTABLE[60])
X#define ROM_SysCtlClockOutConfig                                                      ((void (*)(uint32_t ui32Config,                                                          uint32_t ui32Div))ROM_SYSCTLTABLE[60])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_SysCtlAltClkConfig                                                \
S        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[61])
X#define ROM_SysCtlAltClkConfig                                                        ((void (*)(uint32_t ui32Config))ROM_SYSCTLTABLE[61])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SysExc API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysExcIntStatus                                                   \
N        ((uint32_t (*)(bool bMasked))ROM_SYSEXCTABLE[0])
X#define ROM_SysExcIntStatus                                                           ((uint32_t (*)(bool bMasked))ROM_SYSEXCTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysExcIntClear                                                    \
N        ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[1])
X#define ROM_SysExcIntClear                                                            ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysExcIntDisable                                                  \
N        ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[2])
X#define ROM_SysExcIntDisable                                                          ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysExcIntEnable                                                   \
N        ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[3])
X#define ROM_SysExcIntEnable                                                           ((void (*)(uint32_t ui32IntFlags))ROM_SYSEXCTABLE[3])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the SysTick API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickValueGet                                                   \
N        ((uint32_t (*)(void))ROM_SYSTICKTABLE[0])
X#define ROM_SysTickValueGet                                                           ((uint32_t (*)(void))ROM_SYSTICKTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickEnable                                                     \
N        ((void (*)(void))ROM_SYSTICKTABLE[1])
X#define ROM_SysTickEnable                                                             ((void (*)(void))ROM_SYSTICKTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickDisable                                                    \
N        ((void (*)(void))ROM_SYSTICKTABLE[2])
X#define ROM_SysTickDisable                                                            ((void (*)(void))ROM_SYSTICKTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickIntEnable                                                  \
N        ((void (*)(void))ROM_SYSTICKTABLE[3])
X#define ROM_SysTickIntEnable                                                          ((void (*)(void))ROM_SYSTICKTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickIntDisable                                                 \
N        ((void (*)(void))ROM_SYSTICKTABLE[4])
X#define ROM_SysTickIntDisable                                                         ((void (*)(void))ROM_SYSTICKTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickPeriodSet                                                  \
N        ((void (*)(uint32_t ui32Period))ROM_SYSTICKTABLE[5])
X#define ROM_SysTickPeriodSet                                                          ((void (*)(uint32_t ui32Period))ROM_SYSTICKTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_SysTickPeriodGet                                                  \
N        ((uint32_t (*)(void))ROM_SYSTICKTABLE[6])
X#define ROM_SysTickPeriodGet                                                          ((uint32_t (*)(void))ROM_SYSTICKTABLE[6])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Timer API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerIntClear                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_TIMERTABLE[0])
X#define ROM_TimerIntClear                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_TIMERTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerEnable                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer))ROM_TIMERTABLE[1])
X#define ROM_TimerEnable                                                               ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerDisable                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer))ROM_TIMERTABLE[2])
X#define ROM_TimerDisable                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerConfigure                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Config))ROM_TIMERTABLE[3])
X#define ROM_TimerConfigure                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_TIMERTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerControlLevel                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   bool bInvert))ROM_TIMERTABLE[4])
X#define ROM_TimerControlLevel                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           bool bInvert))ROM_TIMERTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L
N#define ROM_TimerControlTrigger                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   bool bEnable))ROM_TIMERTABLE[5])
X#define ROM_TimerControlTrigger                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           bool bEnable))ROM_TIMERTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerControlEvent                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   uint32_t ui32Event))ROM_TIMERTABLE[6])
X#define ROM_TimerControlEvent                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           uint32_t ui32Event))ROM_TIMERTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerControlStall                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   bool bStall))ROM_TIMERTABLE[7])
X#define ROM_TimerControlStall                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           bool bStall))ROM_TIMERTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerRTCEnable                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_TIMERTABLE[8])
X#define ROM_TimerRTCEnable                                                            ((void (*)(uint32_t ui32Base))ROM_TIMERTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerRTCDisable                                                   \
N        ((void (*)(uint32_t ui32Base))ROM_TIMERTABLE[9])
X#define ROM_TimerRTCDisable                                                           ((void (*)(uint32_t ui32Base))ROM_TIMERTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerPrescaleSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   uint32_t ui32Value))ROM_TIMERTABLE[10])
X#define ROM_TimerPrescaleSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           uint32_t ui32Value))ROM_TIMERTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerPrescaleGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Timer))ROM_TIMERTABLE[11])
X#define ROM_TimerPrescaleGet                                                          ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerPrescaleMatchSet                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   uint32_t ui32Value))ROM_TIMERTABLE[12])
X#define ROM_TimerPrescaleMatchSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           uint32_t ui32Value))ROM_TIMERTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerPrescaleMatchGet                                             \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Timer))ROM_TIMERTABLE[13])
X#define ROM_TimerPrescaleMatchGet                                                     ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerLoadSet                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   uint32_t ui32Value))ROM_TIMERTABLE[14])
X#define ROM_TimerLoadSet                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           uint32_t ui32Value))ROM_TIMERTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerLoadGet                                                      \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Timer))ROM_TIMERTABLE[15])
X#define ROM_TimerLoadGet                                                              ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerValueGet                                                     \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Timer))ROM_TIMERTABLE[16])
X#define ROM_TimerValueGet                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerMatchSet                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   uint32_t ui32Value))ROM_TIMERTABLE[17])
X#define ROM_TimerMatchSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           uint32_t ui32Value))ROM_TIMERTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerMatchGet                                                     \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Timer))ROM_TIMERTABLE[18])
X#define ROM_TimerMatchGet                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer))ROM_TIMERTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerIntEnable                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_TIMERTABLE[19])
X#define ROM_TimerIntEnable                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_TIMERTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerIntDisable                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_TIMERTABLE[20])
X#define ROM_TimerIntDisable                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_TIMERTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerIntStatus                                                    \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_TIMERTABLE[21])
X#define ROM_TimerIntStatus                                                            ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_TIMERTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_TimerControlWaitOnTrigger                                         \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Timer,                                        \
N                   bool bWait))ROM_TIMERTABLE[22])
X#define ROM_TimerControlWaitOnTrigger                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timer,                                                           bool bWait))ROM_TIMERTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_TimerLoadSet64                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint64_t ui64Value))ROM_TIMERTABLE[23])
X#define ROM_TimerLoadSet64                                                            ((void (*)(uint32_t ui32Base,                                                            uint64_t ui64Value))ROM_TIMERTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_TimerLoadGet64                                                    \
N        ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[24])
X#define ROM_TimerLoadGet64                                                            ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_TimerValueGet64                                                   \
N        ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[25])
X#define ROM_TimerValueGet64                                                           ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_TimerMatchSet64                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint64_t ui64Value))ROM_TIMERTABLE[26])
X#define ROM_TimerMatchSet64                                                           ((void (*)(uint32_t ui32Base,                                                            uint64_t ui64Value))ROM_TIMERTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1)
X#if 0L ||                                             1L ||                                             0L
N#define ROM_TimerMatchGet64                                                   \
N        ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[27])
X#define ROM_TimerMatchGet64                                                           ((uint64_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_TimerClockSourceGet                                               \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[28])
X#define ROM_TimerClockSourceGet                                                       ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_TimerClockSourceSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Source))ROM_TIMERTABLE[29])
X#define ROM_TimerClockSourceSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Source))ROM_TIMERTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_TimerADCEventGet                                                  \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[30])
X#define ROM_TimerADCEventGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_TimerADCEventSet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32ADCEvent))ROM_TIMERTABLE[31])
X#define ROM_TimerADCEventSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ADCEvent))ROM_TIMERTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_TimerDMAEventGet                                                  \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[32])
X#define ROM_TimerDMAEventGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_TIMERTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_TimerDMAEventSet                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32DMAEvent))ROM_TIMERTABLE[33])
X#define ROM_TimerDMAEventSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAEvent))ROM_TIMERTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_TimerSynchronize                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Timers))ROM_TIMERTABLE[34])
X#define ROM_TimerSynchronize                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Timers))ROM_TIMERTABLE[34])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the UART API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTCharPut                                                       \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   unsigned char ucData))ROM_UARTTABLE[0])
X#define ROM_UARTCharPut                                                               ((void (*)(uint32_t ui32Base,                                                            unsigned char ucData))ROM_UARTTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTParityModeSet                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Parity))ROM_UARTTABLE[1])
X#define ROM_UARTParityModeSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Parity))ROM_UARTTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTParityModeGet                                                 \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[2])
X#define ROM_UARTParityModeGet                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTFIFOLevelSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32TxLevel,                                      \
N                   uint32_t ui32RxLevel))ROM_UARTTABLE[3])
X#define ROM_UARTFIFOLevelSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32TxLevel,                                                         uint32_t ui32RxLevel))ROM_UARTTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTFIFOLevelGet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t *pui32TxLevel,                                    \
N                   uint32_t *pui32RxLevel))ROM_UARTTABLE[4])
X#define ROM_UARTFIFOLevelGet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t *pui32TxLevel,                                                       uint32_t *pui32RxLevel))ROM_UARTTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTConfigSetExpClk                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32UARTClk,                                      \
N                   uint32_t ui32Baud,                                         \
N                   uint32_t ui32Config))ROM_UARTTABLE[5])
X#define ROM_UARTConfigSetExpClk                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32UARTClk,                                                         uint32_t ui32Baud,                                                            uint32_t ui32Config))ROM_UARTTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTConfigGetExpClk                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32UARTClk,                                      \
N                   uint32_t *pui32Baud,                                       \
N                   uint32_t *pui32Config))ROM_UARTTABLE[6])
X#define ROM_UARTConfigGetExpClk                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32UARTClk,                                                         uint32_t *pui32Baud,                                                          uint32_t *pui32Config))ROM_UARTTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTEnable                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[7])
X#define ROM_UARTEnable                                                                ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTDisable                                                       \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[8])
X#define ROM_UARTDisable                                                               ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTEnableSIR                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   bool bLowPower))ROM_UARTTABLE[9])
X#define ROM_UARTEnableSIR                                                             ((void (*)(uint32_t ui32Base,                                                            bool bLowPower))ROM_UARTTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTDisableSIR                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[10])
X#define ROM_UARTDisableSIR                                                            ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTCharsAvail                                                    \
N        ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[11])
X#define ROM_UARTCharsAvail                                                            ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTSpaceAvail                                                    \
N        ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[12])
X#define ROM_UARTSpaceAvail                                                            ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTCharGetNonBlocking                                            \
N        ((int32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[13])
X#define ROM_UARTCharGetNonBlocking                                                    ((int32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTCharGet                                                       \
N        ((int32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[14])
X#define ROM_UARTCharGet                                                               ((int32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTCharPutNonBlocking                                            \
N        ((bool (*)(uint32_t ui32Base,                                         \
N                   unsigned char ucData))ROM_UARTTABLE[15])
X#define ROM_UARTCharPutNonBlocking                                                    ((bool (*)(uint32_t ui32Base,                                                            unsigned char ucData))ROM_UARTTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTBreakCtl                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   bool bBreakState))ROM_UARTTABLE[16])
X#define ROM_UARTBreakCtl                                                              ((void (*)(uint32_t ui32Base,                                                            bool bBreakState))ROM_UARTTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTIntEnable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_UARTTABLE[17])
X#define ROM_UARTIntEnable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_UARTTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTIntDisable                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_UARTTABLE[18])
X#define ROM_UARTIntDisable                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_UARTTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTIntStatus                                                     \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_UARTTABLE[19])
X#define ROM_UARTIntStatus                                                             ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_UARTTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTIntClear                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_UARTTABLE[20])
X#define ROM_UARTIntClear                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_UARTTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UpdateUART                                                        \
N        ((void (*)(void))ROM_UARTTABLE[21])
X#define ROM_UpdateUART                                                                ((void (*)(void))ROM_UARTTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTDMAEnable                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32DMAFlags))ROM_UARTTABLE[22])
X#define ROM_UARTDMAEnable                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_UARTTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTDMADisable                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32DMAFlags))ROM_UARTTABLE[23])
X#define ROM_UARTDMADisable                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32DMAFlags))ROM_UARTTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTFIFOEnable                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[24])
X#define ROM_UARTFIFOEnable                                                            ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTFIFODisable                                                   \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[25])
X#define ROM_UARTFIFODisable                                                           ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTBusy                                                          \
N        ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[26])
X#define ROM_UARTBusy                                                                  ((bool (*)(uint32_t ui32Base))ROM_UARTTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTTxIntModeSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Mode))ROM_UARTTABLE[27])
X#define ROM_UARTTxIntModeSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_UARTTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTTxIntModeGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[28])
X#define ROM_UARTTxIntModeGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTRxErrorGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[29])
X#define ROM_UARTRxErrorGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTRxErrorClear                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[30])
X#define ROM_UARTRxErrorClear                                                          ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTClockSourceSet                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Source))ROM_UARTTABLE[31])
X#define ROM_UARTClockSourceSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Source))ROM_UARTTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UARTClockSourceGet                                                \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[32])
X#define ROM_UARTClockSourceGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UART9BitEnable                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[33])
X#define ROM_UART9BitEnable                                                            ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UART9BitDisable                                                   \
N        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[34])
X#define ROM_UART9BitDisable                                                           ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UART9BitAddrSet                                                   \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint8_t ui8Addr,                                           \
N                   uint8_t ui8Mask))ROM_UARTTABLE[35])
X#define ROM_UART9BitAddrSet                                                           ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Addr,                                                              uint8_t ui8Mask))ROM_UARTTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UART9BitAddrSend                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint8_t ui8Addr))ROM_UARTTABLE[36])
X#define ROM_UART9BitAddrSend                                                          ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Addr))ROM_UARTTABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_UARTSmartCardDisable                                              \
S        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[37])
X#define ROM_UARTSmartCardDisable                                                      ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_UARTSmartCardEnable                                               \
S        ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[38])
X#define ROM_UARTSmartCardEnable                                                       ((void (*)(uint32_t ui32Base))ROM_UARTTABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_UARTModemControlClear                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Control))ROM_UARTTABLE[39])
X#define ROM_UARTModemControlClear                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Control))ROM_UARTTABLE[39])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_UARTModemControlGet                                               \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[40])
X#define ROM_UARTModemControlGet                                                       ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[40])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_UARTModemControlSet                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Control))ROM_UARTTABLE[41])
X#define ROM_UARTModemControlSet                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Control))ROM_UARTTABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_UARTModemStatusGet                                                \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[42])
X#define ROM_UARTModemStatusGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_UARTFlowControlGet                                                \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[43])
X#define ROM_UARTFlowControlGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_UARTTABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_UARTFlowControlSet                                                \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Mode))ROM_UARTTABLE[44])
X#define ROM_UARTFlowControlSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_UARTTABLE[44])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the uDMA API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelTransferSet                                            \
N        ((void (*)(uint32_t ui32ChannelStructIndex,                           \
N                   uint32_t ui32Mode,                                         \
N                   void *pvSrcAddr,                                           \
N                   void *pvDstAddr,                                           \
N                   uint32_t ui32TransferSize))ROM_UDMATABLE[0])
X#define ROM_uDMAChannelTransferSet                                                    ((void (*)(uint32_t ui32ChannelStructIndex,                                              uint32_t ui32Mode,                                                            void *pvSrcAddr,                                                              void *pvDstAddr,                                                              uint32_t ui32TransferSize))ROM_UDMATABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAEnable                                                        \
N        ((void (*)(void))ROM_UDMATABLE[1])
X#define ROM_uDMAEnable                                                                ((void (*)(void))ROM_UDMATABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMADisable                                                       \
N        ((void (*)(void))ROM_UDMATABLE[2])
X#define ROM_uDMADisable                                                               ((void (*)(void))ROM_UDMATABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAErrorStatusGet                                                \
N        ((uint32_t (*)(void))ROM_UDMATABLE[3])
X#define ROM_uDMAErrorStatusGet                                                        ((uint32_t (*)(void))ROM_UDMATABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAErrorStatusClear                                              \
N        ((void (*)(void))ROM_UDMATABLE[4])
X#define ROM_uDMAErrorStatusClear                                                      ((void (*)(void))ROM_UDMATABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelEnable                                                 \
N        ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[5])
X#define ROM_uDMAChannelEnable                                                         ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelDisable                                                \
N        ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[6])
X#define ROM_uDMAChannelDisable                                                        ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelIsEnabled                                              \
N        ((bool (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[7])
X#define ROM_uDMAChannelIsEnabled                                                      ((bool (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAControlBaseSet                                                \
N        ((void (*)(void *pControlTable))ROM_UDMATABLE[8])
X#define ROM_uDMAControlBaseSet                                                        ((void (*)(void *pControlTable))ROM_UDMATABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAControlBaseGet                                                \
N        ((void * (*)(void))ROM_UDMATABLE[9])
X#define ROM_uDMAControlBaseGet                                                        ((void * (*)(void))ROM_UDMATABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelRequest                                                \
N        ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[10])
X#define ROM_uDMAChannelRequest                                                        ((void (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelAttributeEnable                                        \
N        ((void (*)(uint32_t ui32ChannelNum,                                   \
N                   uint32_t ui32Attr))ROM_UDMATABLE[11])
X#define ROM_uDMAChannelAttributeEnable                                                ((void (*)(uint32_t ui32ChannelNum,                                                      uint32_t ui32Attr))ROM_UDMATABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelAttributeDisable                                       \
N        ((void (*)(uint32_t ui32ChannelNum,                                   \
N                   uint32_t ui32Attr))ROM_UDMATABLE[12])
X#define ROM_uDMAChannelAttributeDisable                                               ((void (*)(uint32_t ui32ChannelNum,                                                      uint32_t ui32Attr))ROM_UDMATABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelAttributeGet                                           \
N        ((uint32_t (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[13])
X#define ROM_uDMAChannelAttributeGet                                                   ((uint32_t (*)(uint32_t ui32ChannelNum))ROM_UDMATABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelControlSet                                             \
N        ((void (*)(uint32_t ui32ChannelStructIndex,                           \
N                   uint32_t ui32Control))ROM_UDMATABLE[14])
X#define ROM_uDMAChannelControlSet                                                     ((void (*)(uint32_t ui32ChannelStructIndex,                                              uint32_t ui32Control))ROM_UDMATABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelSizeGet                                                \
N        ((uint32_t (*)(uint32_t ui32ChannelStructIndex))ROM_UDMATABLE[15])
X#define ROM_uDMAChannelSizeGet                                                        ((uint32_t (*)(uint32_t ui32ChannelStructIndex))ROM_UDMATABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelModeGet                                                \
N        ((uint32_t (*)(uint32_t ui32ChannelStructIndex))ROM_UDMATABLE[16])
X#define ROM_uDMAChannelModeGet                                                        ((uint32_t (*)(uint32_t ui32ChannelStructIndex))ROM_UDMATABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelSelectSecondary                                        \
N        ((void (*)(uint32_t ui32SecPeriphs))ROM_UDMATABLE[17])
X#define ROM_uDMAChannelSelectSecondary                                                ((void (*)(uint32_t ui32SecPeriphs))ROM_UDMATABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelSelectDefault                                          \
N        ((void (*)(uint32_t ui32DefPeriphs))ROM_UDMATABLE[18])
X#define ROM_uDMAChannelSelectDefault                                                  ((void (*)(uint32_t ui32DefPeriphs))ROM_UDMATABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAIntStatus                                                     \
N        ((uint32_t (*)(void))ROM_UDMATABLE[19])
X#define ROM_uDMAIntStatus                                                             ((uint32_t (*)(void))ROM_UDMATABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAIntClear                                                      \
N        ((void (*)(uint32_t ui32ChanMask))ROM_UDMATABLE[20])
X#define ROM_uDMAIntClear                                                              ((void (*)(uint32_t ui32ChanMask))ROM_UDMATABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAControlAlternateBaseGet                                       \
N        ((void * (*)(void))ROM_UDMATABLE[21])
X#define ROM_uDMAControlAlternateBaseGet                                               ((void * (*)(void))ROM_UDMATABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelScatterGatherSet                                       \
N        ((void (*)(uint32_t ui32ChannelNum,                                   \
N                   uint32_t ui32TaskCount,                                    \
N                   void *pvTaskList,                                          \
N                   uint32_t ui32IsPeriphSG))ROM_UDMATABLE[22])
X#define ROM_uDMAChannelScatterGatherSet                                               ((void (*)(uint32_t ui32ChannelNum,                                                      uint32_t ui32TaskCount,                                                       void *pvTaskList,                                                             uint32_t ui32IsPeriphSG))ROM_UDMATABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_uDMAChannelAssign                                                 \
N        ((void (*)(uint32_t ui32Mapping))ROM_UDMATABLE[23])
X#define ROM_uDMAChannelAssign                                                         ((void (*)(uint32_t ui32Mapping))ROM_UDMATABLE[23])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the USB API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevAddrGet                                                     \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[1])
X#define ROM_USBDevAddrGet                                                             ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevAddrSet                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Address))ROM_USBTABLE[2])
X#define ROM_USBDevAddrSet                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Address))ROM_USBTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevConnect                                                     \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[3])
X#define ROM_USBDevConnect                                                             ((void (*)(uint32_t ui32Base))ROM_USBTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevDisconnect                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[4])
X#define ROM_USBDevDisconnect                                                          ((void (*)(uint32_t ui32Base))ROM_USBTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointConfigSet                                           \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32MaxPacketSize,                                \
N                   uint32_t ui32Flags))ROM_USBTABLE[5])
X#define ROM_USBDevEndpointConfigSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32MaxPacketSize,                                                   uint32_t ui32Flags))ROM_USBTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointDataAck                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   bool bIsLastPacket))ROM_USBTABLE[6])
X#define ROM_USBDevEndpointDataAck                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        bool bIsLastPacket))ROM_USBTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointStall                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[7])
X#define ROM_USBDevEndpointStall                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointStallClear                                          \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[8])
X#define ROM_USBDevEndpointStallClear                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointStatusClear                                         \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[9])
X#define ROM_USBDevEndpointStatusClear                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDataGet                                                \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32Endpoint,                                  \
N                      uint8_t *pui8Data,                                      \
N                      uint32_t *pui32Size))ROM_USBTABLE[10])
X#define ROM_USBEndpointDataGet                                                        ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint8_t *pui8Data,                                                            uint32_t *pui32Size))ROM_USBTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDataPut                                                \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32Endpoint,                                  \
N                      uint8_t *pui8Data,                                      \
N                      uint32_t ui32Size))ROM_USBTABLE[11])
X#define ROM_USBEndpointDataPut                                                        ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint8_t *pui8Data,                                                            uint32_t ui32Size))ROM_USBTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDataSend                                               \
N        ((int32_t (*)(uint32_t ui32Base,                                      \
N                      uint32_t ui32Endpoint,                                  \
N                      uint32_t ui32TransType))ROM_USBTABLE[12])
X#define ROM_USBEndpointDataSend                                                       ((int32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32TransType))ROM_USBTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDataToggleClear                                        \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[13])
X#define ROM_USBEndpointDataToggleClear                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointStatus                                                 \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Endpoint))ROM_USBTABLE[14])
X#define ROM_USBEndpointStatus                                                         ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBFIFOAddrGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Endpoint))ROM_USBTABLE[15])
X#define ROM_USBFIFOAddrGet                                                            ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[15])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBFIFOConfigGet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t *pui32FIFOAddress,                                \
N                   uint32_t *pui32FIFOSize,                                   \
N                   uint32_t ui32Flags))ROM_USBTABLE[16])
X#define ROM_USBFIFOConfigGet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t *pui32FIFOAddress,                                                   uint32_t *pui32FIFOSize,                                                      uint32_t ui32Flags))ROM_USBTABLE[16])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBFIFOConfigSet                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32FIFOAddress,                                  \
N                   uint32_t ui32FIFOSize,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[17])
X#define ROM_USBFIFOConfigSet                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32FIFOAddress,                                                     uint32_t ui32FIFOSize,                                                        uint32_t ui32Flags))ROM_USBTABLE[17])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBFIFOFlush                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[18])
X#define ROM_USBFIFOFlush                                                              ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[18])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBFrameNumberGet                                                 \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[19])
X#define ROM_USBFrameNumberGet                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[19])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostAddrGet                                                    \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Endpoint,                                 \
N                       uint32_t ui32Flags))ROM_USBTABLE[20])
X#define ROM_USBHostAddrGet                                                            ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[20])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostAddrSet                                                    \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Addr,                                         \
N                   uint32_t ui32Flags))ROM_USBTABLE[21])
X#define ROM_USBHostAddrSet                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Addr,                                                            uint32_t ui32Flags))ROM_USBTABLE[21])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostEndpointConfig                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32MaxPacketSize,                                \
N                   uint32_t ui32NAKPollInterval,                              \
N                   uint32_t ui32TargetEndpoint,                               \
N                   uint32_t ui32Flags))ROM_USBTABLE[22])
X#define ROM_USBHostEndpointConfig                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32MaxPacketSize,                                                   uint32_t ui32NAKPollInterval,                                                 uint32_t ui32TargetEndpoint,                                                  uint32_t ui32Flags))ROM_USBTABLE[22])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostEndpointDataAck                                            \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint))ROM_USBTABLE[23])
X#define ROM_USBHostEndpointDataAck                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[23])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostEndpointDataToggle                                         \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   bool bDataToggle,                                          \
N                   uint32_t ui32Flags))ROM_USBTABLE[24])
X#define ROM_USBHostEndpointDataToggle                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        bool bDataToggle,                                                             uint32_t ui32Flags))ROM_USBTABLE[24])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostEndpointStatusClear                                        \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[25])
X#define ROM_USBHostEndpointStatusClear                                                ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[25])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostHubAddrGet                                                 \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Endpoint,                                 \
N                       uint32_t ui32Flags))ROM_USBTABLE[26])
X#define ROM_USBHostHubAddrGet                                                         ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[26])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostHubAddrSet                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Addr,                                         \
N                   uint32_t ui32Flags))ROM_USBTABLE[27])
X#define ROM_USBHostHubAddrSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Addr,                                                            uint32_t ui32Flags))ROM_USBTABLE[27])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostPwrDisable                                                 \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[28])
X#define ROM_USBHostPwrDisable                                                         ((void (*)(uint32_t ui32Base))ROM_USBTABLE[28])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostPwrEnable                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[29])
X#define ROM_USBHostPwrEnable                                                          ((void (*)(uint32_t ui32Base))ROM_USBTABLE[29])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostPwrConfig                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Flags))ROM_USBTABLE[30])
X#define ROM_USBHostPwrConfig                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Flags))ROM_USBTABLE[30])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostPwrFaultDisable                                            \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[31])
X#define ROM_USBHostPwrFaultDisable                                                    ((void (*)(uint32_t ui32Base))ROM_USBTABLE[31])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostPwrFaultEnable                                             \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[32])
X#define ROM_USBHostPwrFaultEnable                                                     ((void (*)(uint32_t ui32Base))ROM_USBTABLE[32])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostRequestIN                                                  \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint))ROM_USBTABLE[33])
X#define ROM_USBHostRequestIN                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[33])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostRequestStatus                                              \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[34])
X#define ROM_USBHostRequestStatus                                                      ((void (*)(uint32_t ui32Base))ROM_USBTABLE[34])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostReset                                                      \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   bool bStart))ROM_USBTABLE[35])
X#define ROM_USBHostReset                                                              ((void (*)(uint32_t ui32Base,                                                            bool bStart))ROM_USBTABLE[35])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostResume                                                     \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   bool bStart))ROM_USBTABLE[36])
X#define ROM_USBHostResume                                                             ((void (*)(uint32_t ui32Base,                                                            bool bStart))ROM_USBTABLE[36])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostSpeedGet                                                   \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[37])
X#define ROM_USBHostSpeedGet                                                           ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[37])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostSuspend                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[38])
X#define ROM_USBHostSuspend                                                            ((void (*)(uint32_t ui32Base))ROM_USBTABLE[38])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevEndpointConfigGet                                           \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t *pui32MaxPacketSize,                              \
N                   uint32_t *pui32Flags))ROM_USBTABLE[41])
X#define ROM_USBDevEndpointConfigGet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t *pui32MaxPacketSize,                                                 uint32_t *pui32Flags))ROM_USBTABLE[41])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDMAEnable                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[42])
X#define ROM_USBEndpointDMAEnable                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[42])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDMADisable                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Flags))ROM_USBTABLE[43])
X#define ROM_USBEndpointDMADisable                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[43])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDataAvail                                              \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       uint32_t ui32Endpoint))ROM_USBTABLE[44])
X#define ROM_USBEndpointDataAvail                                                      ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[44])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_USBOTGHostRequest                                                 \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   bool bHNP))ROM_USBTABLE[45])
X#define ROM_USBOTGHostRequest                                                         ((void (*)(uint32_t ui32Base,                                                            bool bHNP))ROM_USBTABLE[45])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBModeGet                                                        \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[46])
X#define ROM_USBModeGet                                                                ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[46])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBEndpointDMAChannel                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Endpoint,                                     \
N                   uint32_t ui32Channel))ROM_USBTABLE[47])
X#define ROM_USBEndpointDMAChannel                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Channel))ROM_USBTABLE[47])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntDisableControl                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_USBTABLE[48])
X#define ROM_USBIntDisableControl                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_USBTABLE[48])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntEnableControl                                               \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_USBTABLE[49])
X#define ROM_USBIntEnableControl                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_USBTABLE[49])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntStatusControl                                               \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[50])
X#define ROM_USBIntStatusControl                                                       ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[50])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntDisableEndpoint                                             \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_USBTABLE[51])
X#define ROM_USBIntDisableEndpoint                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_USBTABLE[51])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntEnableEndpoint                                              \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32IntFlags))ROM_USBTABLE[52])
X#define ROM_USBIntEnableEndpoint                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32IntFlags))ROM_USBTABLE[52])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBIntStatusEndpoint                                              \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[53])
X#define ROM_USBIntStatusEndpoint                                                      ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[53])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBHostMode                                                       \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[54])
X#define ROM_USBHostMode                                                               ((void (*)(uint32_t ui32Base))ROM_USBTABLE[54])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBDevMode                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[55])
X#define ROM_USBDevMode                                                                ((void (*)(uint32_t ui32Base))ROM_USBTABLE[55])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBPHYPowerOff                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[56])
X#define ROM_USBPHYPowerOff                                                            ((void (*)(uint32_t ui32Base))ROM_USBTABLE[56])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBPHYPowerOn                                                     \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[57])
X#define ROM_USBPHYPowerOn                                                             ((void (*)(uint32_t ui32Base))ROM_USBTABLE[57])
N#endif
N#if defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_UpdateUSB                                                         \
N        ((void (*)(uint8_t *pui8DescriptorInfo))ROM_USBTABLE[58])
X#define ROM_UpdateUSB                                                                 ((void (*)(uint8_t *pui8DescriptorInfo))ROM_USBTABLE[58])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_USBOTGMode                                                        \
N        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[59])
X#define ROM_USBOTGMode                                                                ((void (*)(uint32_t ui32Base))ROM_USBTABLE[59])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBHostRequestINClear                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Endpoint))ROM_USBTABLE[60])
X#define ROM_USBHostRequestINClear                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint))ROM_USBTABLE[60])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBNumEndpointsGet                                                \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[61])
X#define ROM_USBNumEndpointsGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[61])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBClockDisable                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[62])
X#define ROM_USBClockDisable                                                           ((void (*)(uint32_t ui32Base))ROM_USBTABLE[62])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBClockEnable                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Div,                                          \
S                   uint32_t ui32Flags))ROM_USBTABLE[63])
X#define ROM_USBClockEnable                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Div,                                                             uint32_t ui32Flags))ROM_USBTABLE[63])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBControllerVersion                                              \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[64])
X#define ROM_USBControllerVersion                                                      ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[64])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDevLPMConfig                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_USBTABLE[65])
X#define ROM_USBDevLPMConfig                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_USBTABLE[65])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDevLPMDisable                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[66])
X#define ROM_USBDevLPMDisable                                                          ((void (*)(uint32_t ui32Base))ROM_USBTABLE[66])
N#endif
N#if defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L ||                                             0L
S#define ROM_USBDevLPMEnable                                                   \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[67])
X#define ROM_USBDevLPMEnable                                                           ((void (*)(uint32_t ui32Base))ROM_USBTABLE[67])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDevLPMRemoteWake                                               \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[68])
X#define ROM_USBDevLPMRemoteWake                                                       ((void (*)(uint32_t ui32Base))ROM_USBTABLE[68])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDevSpeedGet                                                    \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[69])
X#define ROM_USBDevSpeedGet                                                            ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[69])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelAddressGet                                           \
S        ((void * (*)(uint32_t ui32Base,                                       \
S                     uint32_t ui32Channel))ROM_USBTABLE[70])
X#define ROM_USBDMAChannelAddressGet                                                   ((void * (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[70])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelAddressSet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel,                                      \
S                   void *pvAddress))ROM_USBTABLE[71])
X#define ROM_USBDMAChannelAddressSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel,                                                         void *pvAddress))ROM_USBTABLE[71])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelConfigSet                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel,                                      \
S                   uint32_t ui32Endpoint,                                     \
S                   uint32_t ui32Config))ROM_USBTABLE[72])
X#define ROM_USBDMAChannelConfigSet                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel,                                                         uint32_t ui32Endpoint,                                                        uint32_t ui32Config))ROM_USBTABLE[72])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelDisable                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel))ROM_USBTABLE[73])
X#define ROM_USBDMAChannelDisable                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[73])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelEnable                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel))ROM_USBTABLE[74])
X#define ROM_USBDMAChannelEnable                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[74])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelIntDisable                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel))ROM_USBTABLE[75])
X#define ROM_USBDMAChannelIntDisable                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[75])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelIntEnable                                            \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel))ROM_USBTABLE[76])
X#define ROM_USBDMAChannelIntEnable                                                    ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[76])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelCountGet                                             \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Channel))ROM_USBTABLE[77])
X#define ROM_USBDMAChannelCountGet                                                     ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[77])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelCountSet                                             \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Count,                                        \
S                   uint32_t ui32Channel))ROM_USBTABLE[78])
X#define ROM_USBDMAChannelCountSet                                                     ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Count,                                                           uint32_t ui32Channel))ROM_USBTABLE[78])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelIntStatus                                            \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[79])
X#define ROM_USBDMAChannelIntStatus                                                    ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[79])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelStatus                                               \
S        ((uint32_t (*)(uint32_t ui32Base,                                     \
S                       uint32_t ui32Channel))ROM_USBTABLE[80])
X#define ROM_USBDMAChannelStatus                                                       ((uint32_t (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel))ROM_USBTABLE[80])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBDMAChannelStatusClear                                          \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Channel,                                      \
S                   uint32_t ui32Status))ROM_USBTABLE[81])
X#define ROM_USBDMAChannelStatusClear                                                  ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Channel,                                                         uint32_t ui32Status))ROM_USBTABLE[81])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBHighSpeed                                                      \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   bool bEnable))ROM_USBTABLE[82])
X#define ROM_USBHighSpeed                                                              ((void (*)(uint32_t ui32Base,                                                            bool bEnable))ROM_USBTABLE[82])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBHostEndpointPing                                               \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Endpoint,                                     \
S                   bool bEnable))ROM_USBTABLE[83])
X#define ROM_USBHostEndpointPing                                                       ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        bool bEnable))ROM_USBTABLE[83])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBHostEndpointSpeed                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Endpoint,                                     \
S                   uint32_t ui32Flags))ROM_USBTABLE[84])
X#define ROM_USBHostEndpointSpeed                                                      ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Flags))ROM_USBTABLE[84])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBHostLPMConfig                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32ResumeTime,                                   \
S                   uint32_t ui32Config))ROM_USBTABLE[85])
X#define ROM_USBHostLPMConfig                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32ResumeTime,                                                      uint32_t ui32Config))ROM_USBTABLE[85])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBHostLPMResume                                                  \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[86])
X#define ROM_USBHostLPMResume                                                          ((void (*)(uint32_t ui32Base))ROM_USBTABLE[86])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBHostLPMSend                                                    \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Address,                                      \
S                   uint32_t uiEndpoint))ROM_USBTABLE[87])
X#define ROM_USBHostLPMSend                                                            ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Address,                                                         uint32_t uiEndpoint))ROM_USBTABLE[87])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBLPMIntDisable                                                  \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Ints))ROM_USBTABLE[88])
X#define ROM_USBLPMIntDisable                                                          ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Ints))ROM_USBTABLE[88])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBLPMIntEnable                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Ints))ROM_USBTABLE[89])
X#define ROM_USBLPMIntEnable                                                           ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Ints))ROM_USBTABLE[89])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBLPMIntStatus                                                   \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[90])
X#define ROM_USBLPMIntStatus                                                           ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[90])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBLPMLinkStateGet                                                \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[91])
X#define ROM_USBLPMLinkStateGet                                                        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[91])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBEndpointPacketCountSet                                         \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Endpoint,                                     \
S                   uint32_t ui32Count))ROM_USBTABLE[92])
X#define ROM_USBEndpointPacketCountSet                                                 ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Count))ROM_USBTABLE[92])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBULPIConfig                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Config))ROM_USBTABLE[93])
X#define ROM_USBULPIConfig                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Config))ROM_USBTABLE[93])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBULPIDisable                                                    \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[94])
X#define ROM_USBULPIDisable                                                            ((void (*)(uint32_t ui32Base))ROM_USBTABLE[94])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBULPIEnable                                                     \
S        ((void (*)(uint32_t ui32Base))ROM_USBTABLE[95])
X#define ROM_USBULPIEnable                                                             ((void (*)(uint32_t ui32Base))ROM_USBTABLE[95])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBULPIRegRead                                                    \
S        ((uint8_t (*)(uint32_t ui32Base,                                      \
S                      uint8_t ui8Reg))ROM_USBTABLE[96])
X#define ROM_USBULPIRegRead                                                            ((uint8_t (*)(uint32_t ui32Base,                                                            uint8_t ui8Reg))ROM_USBTABLE[96])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBULPIRegWrite                                                   \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint8_t ui8Reg,                                            \
S                   uint8_t ui8Data))ROM_USBTABLE[97])
X#define ROM_USBULPIRegWrite                                                           ((void (*)(uint32_t ui32Base,                                                            uint8_t ui8Reg,                                                               uint8_t ui8Data))ROM_USBTABLE[97])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBOTGSessionRequest                                              \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   bool bStart))ROM_USBTABLE[98])
X#define ROM_USBOTGSessionRequest                                                      ((void (*)(uint32_t ui32Base,                                                            bool bStart))ROM_USBTABLE[98])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_USBDMANumChannels                                                 \
S        ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[99])
X#define ROM_USBDMANumChannels                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_USBTABLE[99])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_USBEndpointDMAConfigSet                                           \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Endpoint,                                     \
S                   uint32_t ui32Config))ROM_USBTABLE[100])
X#define ROM_USBEndpointDMAConfigSet                                                   ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Endpoint,                                                        uint32_t ui32Config))ROM_USBTABLE[100])
N#endif
N#if defined(TARGET_IS_TM4C129_RA1)
X#if 0L
S#define ROM_USBLPMRemoteWakeEnabled                                           \
S        ((bool (*)(uint32_t ui32Base))ROM_USBTABLE[102])
X#define ROM_USBLPMRemoteWakeEnabled                                                   ((bool (*)(uint32_t ui32Base))ROM_USBTABLE[102])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_USBModeConfig                                                     \
S        ((void (*)(uint32_t ui32Base,                                         \
S                   uint32_t ui32Mode))ROM_USBTABLE[103])
X#define ROM_USBModeConfig                                                             ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Mode))ROM_USBTABLE[103])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Watchdog API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogIntClear                                                  \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[0])
X#define ROM_WatchdogIntClear                                                          ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[0])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogRunning                                                   \
N        ((bool (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[1])
X#define ROM_WatchdogRunning                                                           ((bool (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogEnable                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[2])
X#define ROM_WatchdogEnable                                                            ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogResetEnable                                               \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[3])
X#define ROM_WatchdogResetEnable                                                       ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogResetDisable                                              \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[4])
X#define ROM_WatchdogResetDisable                                                      ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogLock                                                      \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[5])
X#define ROM_WatchdogLock                                                              ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogUnlock                                                    \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[6])
X#define ROM_WatchdogUnlock                                                            ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[6])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogLockState                                                 \
N        ((bool (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[7])
X#define ROM_WatchdogLockState                                                         ((bool (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[7])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogReloadSet                                                 \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32LoadVal))ROM_WATCHDOGTABLE[8])
X#define ROM_WatchdogReloadSet                                                         ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32LoadVal))ROM_WATCHDOGTABLE[8])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogReloadGet                                                 \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[9])
X#define ROM_WatchdogReloadGet                                                         ((uint32_t (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[9])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogValueGet                                                  \
N        ((uint32_t (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[10])
X#define ROM_WatchdogValueGet                                                          ((uint32_t (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[10])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogIntEnable                                                 \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[11])
X#define ROM_WatchdogIntEnable                                                         ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[11])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogIntStatus                                                 \
N        ((uint32_t (*)(uint32_t ui32Base,                                     \
N                       bool bMasked))ROM_WATCHDOGTABLE[12])
X#define ROM_WatchdogIntStatus                                                         ((uint32_t (*)(uint32_t ui32Base,                                                            bool bMasked))ROM_WATCHDOGTABLE[12])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogStallEnable                                               \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[13])
X#define ROM_WatchdogStallEnable                                                       ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[13])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogStallDisable                                              \
N        ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[14])
X#define ROM_WatchdogStallDisable                                                      ((void (*)(uint32_t ui32Base))ROM_WATCHDOGTABLE[14])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_WatchdogIntTypeSet                                                \
N        ((void (*)(uint32_t ui32Base,                                         \
N                   uint32_t ui32Type))ROM_WATCHDOGTABLE[15])
X#define ROM_WatchdogIntTypeSet                                                        ((void (*)(uint32_t ui32Base,                                                            uint32_t ui32Type))ROM_WATCHDOGTABLE[15])
N#endif
N
N//*****************************************************************************
N//
N// Macros for calling ROM functions in the Software API.
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_Crc16Array                                                        \
N        ((uint16_t (*)(uint32_t ui32WordLen,                                  \
N                       const uint32_t *pui32Data))ROM_SOFTWARETABLE[1])
X#define ROM_Crc16Array                                                                ((uint16_t (*)(uint32_t ui32WordLen,                                                         const uint32_t *pui32Data))ROM_SOFTWARETABLE[1])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_Crc16Array3                                                       \
N        ((void (*)(uint32_t ui32WordLen,                                      \
N                   const uint32_t *pui32Data,                                 \
N                   uint16_t *pui16Crc3))ROM_SOFTWARETABLE[2])
X#define ROM_Crc16Array3                                                               ((void (*)(uint32_t ui32WordLen,                                                         const uint32_t *pui32Data,                                                    uint16_t *pui16Crc3))ROM_SOFTWARETABLE[2])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_Crc16                                                             \
N        ((uint16_t (*)(uint16_t ui16Crc,                                      \
N                       const uint8_t *pui8Data,                               \
N                       uint32_t ui32Count))ROM_SOFTWARETABLE[3])
X#define ROM_Crc16                                                                     ((uint16_t (*)(uint16_t ui16Crc,                                                             const uint8_t *pui8Data,                                                      uint32_t ui32Count))ROM_SOFTWARETABLE[3])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_Crc8CCITT                                                         \
N        ((uint8_t (*)(uint8_t ui8Crc,                                         \
N                      const uint8_t *pui8Data,                                \
N                      uint32_t ui32Count))ROM_SOFTWARETABLE[4])
X#define ROM_Crc8CCITT                                                                 ((uint8_t (*)(uint8_t ui8Crc,                                                               const uint8_t *pui8Data,                                                      uint32_t ui32Count))ROM_SOFTWARETABLE[4])
N#endif
N#if defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             0L
S#define ROM_Crc32                                                             \
S        ((uint32_t (*)(uint32_t ui32Crc,                                      \
S                       const uint8_t *pui8Data,                               \
S                       uint32_t ui32Count))ROM_SOFTWARETABLE[5])
X#define ROM_Crc32                                                                     ((uint32_t (*)(uint32_t ui32Crc,                                                             const uint8_t *pui8Data,                                                      uint32_t ui32Count))ROM_SOFTWARETABLE[5])
N#endif
N#if defined(TARGET_IS_TM4C123_RA1) ||                                         \
N    defined(TARGET_IS_TM4C123_RA3) ||                                         \
N    defined(TARGET_IS_TM4C123_RB1) ||                                         \
N    defined(TARGET_IS_TM4C129_RA0) ||                                         \
N    defined(TARGET_IS_TM4C129_RA1)
X#if 0L ||                                             1L ||                                             0L ||                                             0L ||                                             0L
N#define ROM_pvAESTable                                                        \
N        ((void *)&(ROM_SOFTWARETABLE[7]))
X#define ROM_pvAESTable                                                                ((void *)&(ROM_SOFTWARETABLE[7]))
N#endif
N
N#endif // __DRIVERLIB_ROM_H__
L 12 "..\inc_h\system.h" 2
N#include <sysctl.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\sysctl.h" 1
N//*****************************************************************************
N//
N// sysctl.h - Prototypes for the system control driver.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_SYSCTL_H__
N#define __DRIVERLIB_SYSCTL_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the
N// SysCtlPeripheralPresent(), SysCtlPeripheralEnable(),
N// SysCtlPeripheralDisable(), and SysCtlPeripheralReset() APIs as the
N// ui32Peripheral parameter.  The peripherals in the fourth group (upper nibble
N// is 3) can only be used with the SysCtlPeripheralPresent() API.
N//
N//*****************************************************************************
N#define SYSCTL_PERIPH_ADC0      0xf0003800  // ADC 0
N#define SYSCTL_PERIPH_ADC1      0xf0003801  // ADC 1
N#define SYSCTL_PERIPH_CAN0      0xf0003400  // CAN 0
N#define SYSCTL_PERIPH_CAN1      0xf0003401  // CAN 1
N#define SYSCTL_PERIPH_COMP0     0xf0003c00  // Analog Comparator Module 0
N#define SYSCTL_PERIPH_EMAC0     0xf0009c00  // Ethernet MAC0
N#define SYSCTL_PERIPH_EPHY0     0xf0003000  // Ethernet PHY0
N#define SYSCTL_PERIPH_EPI0      0xf0001000  // EPI0
N#define SYSCTL_PERIPH_GPIOA     0xf0000800  // GPIO A
N#define SYSCTL_PERIPH_GPIOB     0xf0000801  // GPIO B
N#define SYSCTL_PERIPH_GPIOC     0xf0000802  // GPIO C
N#define SYSCTL_PERIPH_GPIOD     0xf0000803  // GPIO D
N#define SYSCTL_PERIPH_GPIOE     0xf0000804  // GPIO E
N#define SYSCTL_PERIPH_GPIOF     0xf0000805  // GPIO F
N#define SYSCTL_PERIPH_GPIOG     0xf0000806  // GPIO G
N#define SYSCTL_PERIPH_GPIOH     0xf0000807  // GPIO H
N#define SYSCTL_PERIPH_GPIOJ     0xf0000808  // GPIO J
N#define SYSCTL_PERIPH_HIBERNATE 0xf0001400  // Hibernation module
N#define SYSCTL_PERIPH_CCM0      0xf0007400  // CCM 0
N#define SYSCTL_PERIPH_EEPROM0   0xf0005800  // EEPROM 0
N#define SYSCTL_PERIPH_FAN0      0xf0005400  // FAN 0
N#define SYSCTL_PERIPH_FAN1      0xf0005401  // FAN 1
N#define SYSCTL_PERIPH_GPIOK     0xf0000809  // GPIO K
N#define SYSCTL_PERIPH_GPIOL     0xf000080a  // GPIO L
N#define SYSCTL_PERIPH_GPIOM     0xf000080b  // GPIO M
N#define SYSCTL_PERIPH_GPION     0xf000080c  // GPIO N
N#define SYSCTL_PERIPH_GPIOP     0xf000080d  // GPIO P
N#define SYSCTL_PERIPH_GPIOQ     0xf000080e  // GPIO Q
N#define SYSCTL_PERIPH_GPIOR     0xf000080f  // GPIO R
N#define SYSCTL_PERIPH_GPIOS     0xf0000810  // GPIO S
N#define SYSCTL_PERIPH_GPIOT     0xf0000811  // GPIO T
N#define SYSCTL_PERIPH_I2C0      0xf0002000  // I2C 0
N#define SYSCTL_PERIPH_I2C1      0xf0002001  // I2C 1
N#define SYSCTL_PERIPH_I2C2      0xf0002002  // I2C 2
N#define SYSCTL_PERIPH_I2C3      0xf0002003  // I2C 3
N#define SYSCTL_PERIPH_I2C4      0xf0002004  // I2C 4
N#define SYSCTL_PERIPH_I2C5      0xf0002005  // I2C 5
N#define SYSCTL_PERIPH_I2C6      0xf0002006  // I2C 6
N#define SYSCTL_PERIPH_I2C7      0xf0002007  // I2C 7
N#define SYSCTL_PERIPH_I2C8      0xf0002008  // I2C 8
N#define SYSCTL_PERIPH_I2C9      0xf0002009  // I2C 9
N#define SYSCTL_PERIPH_LCD0      0xf0009000  // LCD 0
N#define SYSCTL_PERIPH_ONEWIRE0  0xf0009800  // One Wire 0
N#define SYSCTL_PERIPH_PWM0      0xf0004000  // PWM 0
N#define SYSCTL_PERIPH_PWM1      0xf0004001  // PWM 1
N#define SYSCTL_PERIPH_QEI0      0xf0004400  // QEI 0
N#define SYSCTL_PERIPH_QEI1      0xf0004401  // QEI 1
N#define SYSCTL_PERIPH_SSI0      0xf0001c00  // SSI 0
N#define SYSCTL_PERIPH_SSI1      0xf0001c01  // SSI 1
N#define SYSCTL_PERIPH_SSI2      0xf0001c02  // SSI 2
N#define SYSCTL_PERIPH_SSI3      0xf0001c03  // SSI 3
N#define SYSCTL_PERIPH_TIMER0    0xf0000400  // Timer 0
N#define SYSCTL_PERIPH_TIMER1    0xf0000401  // Timer 1
N#define SYSCTL_PERIPH_TIMER2    0xf0000402  // Timer 2
N#define SYSCTL_PERIPH_TIMER3    0xf0000403  // Timer 3
N#define SYSCTL_PERIPH_TIMER4    0xf0000404  // Timer 4
N#define SYSCTL_PERIPH_TIMER5    0xf0000405  // Timer 5
N#define SYSCTL_PERIPH_TIMER6    0xf0000406  // Timer 6
N#define SYSCTL_PERIPH_TIMER7    0xf0000407  // Timer 7
N#define SYSCTL_PERIPH_UART0     0xf0001800  // UART 0
N#define SYSCTL_PERIPH_UART1     0xf0001801  // UART 1
N#define SYSCTL_PERIPH_UART2     0xf0001802  // UART 2
N#define SYSCTL_PERIPH_UART3     0xf0001803  // UART 3
N#define SYSCTL_PERIPH_UART4     0xf0001804  // UART 4
N#define SYSCTL_PERIPH_UART5     0xf0001805  // UART 5
N#define SYSCTL_PERIPH_UART6     0xf0001806  // UART 6
N#define SYSCTL_PERIPH_UART7     0xf0001807  // UART 7
N#define SYSCTL_PERIPH_UDMA      0xf0000c00  // uDMA
N#define SYSCTL_PERIPH_USB0      0xf0002800  // USB 0
N#define SYSCTL_PERIPH_WDOG0     0xf0000000  // Watchdog 0
N#define SYSCTL_PERIPH_WDOG1     0xf0000001  // Watchdog 1
N#define SYSCTL_PERIPH_WTIMER0   0xf0005c00  // Wide Timer 0
N#define SYSCTL_PERIPH_WTIMER1   0xf0005c01  // Wide Timer 1
N#define SYSCTL_PERIPH_WTIMER2   0xf0005c02  // Wide Timer 2
N#define SYSCTL_PERIPH_WTIMER3   0xf0005c03  // Wide Timer 3
N#define SYSCTL_PERIPH_WTIMER4   0xf0005c04  // Wide Timer 4
N#define SYSCTL_PERIPH_WTIMER5   0xf0005c05  // Wide Timer 5
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlLDOSleepSet() and
N// SysCtlLDODeepSleepSet() APIs as the ui32Voltage value, or returned by the
N// SysCtlLDOSleepGet() and SysCtlLDODeepSleepGet() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_LDO_0_90V        0x80000012  // LDO output of 0.90V
N#define SYSCTL_LDO_0_95V        0x80000013  // LDO output of 0.95V
N#define SYSCTL_LDO_1_00V        0x80000014  // LDO output of 1.00V
N#define SYSCTL_LDO_1_05V        0x80000015  // LDO output of 1.05V
N#define SYSCTL_LDO_1_10V        0x80000016  // LDO output of 1.10V
N#define SYSCTL_LDO_1_15V        0x80000017  // LDO output of 1.15V
N#define SYSCTL_LDO_1_20V        0x80000018  // LDO output of 1.20V
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlIntEnable(),
N// SysCtlIntDisable(), and SysCtlIntClear() APIs, or returned in the bit mask
N// by the SysCtlIntStatus() API.
N//
N//*****************************************************************************
N#define SYSCTL_INT_BOR0         0x00000800  // VDD under BOR0
N#define SYSCTL_INT_VDDA_OK      0x00000400  // VDDA Power OK
N#define SYSCTL_INT_MOSC_PUP     0x00000100  // MOSC power-up interrupt
N#define SYSCTL_INT_USBPLL_LOCK  0x00000080  // USB PLL lock interrupt
N#define SYSCTL_INT_PLL_LOCK     0x00000040  // PLL lock interrupt
N#define SYSCTL_INT_MOSC_FAIL    0x00000008  // Main oscillator failure int
N#define SYSCTL_INT_BOR1         0x00000002  // VDD under BOR1
N#define SYSCTL_INT_BOR          0x00000002  // Brown out interrupt
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlResetCauseClear()
N// API or returned by the SysCtlResetCauseGet() API.
N//
N//*****************************************************************************
N#define SYSCTL_CAUSE_HSRVREQ    0x00001000  // Hardware System Service Request
N#define SYSCTL_CAUSE_HIB        0x00000040  // Hibernate reset
N#define SYSCTL_CAUSE_WDOG1      0x00000020  // Watchdog 1 reset
N#define SYSCTL_CAUSE_SW         0x00000010  // Software reset
N#define SYSCTL_CAUSE_WDOG0      0x00000008  // Watchdog 0 reset
N#ifndef DEPRECATED
N#define SYSCTL_CAUSE_WDOG       SYSCTL_CAUSE_WDOG0
N                                            // Watchdog reset(Deprecated)
N#endif
N#define SYSCTL_CAUSE_BOR        0x00000004  // Brown-out reset
N#define SYSCTL_CAUSE_POR        0x00000002  // Power on reset
N#define SYSCTL_CAUSE_EXT        0x00000001  // External reset
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlBrownOutConfigSet()
N// API as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_BOR_RESET        0x00000002  // Reset instead of interrupting
N#define SYSCTL_BOR_RESAMPLE     0x00000001  // Resample BOR before asserting
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPWMClockSet() API
N// as the ui32Config parameter, and can be returned by the SysCtlPWMClockGet()
N// API.
N//
N//*****************************************************************************
N#define SYSCTL_PWMDIV_1         0x00000000  // PWM clock is processor clock /1
N#define SYSCTL_PWMDIV_2         0x00100000  // PWM clock is processor clock /2
N#define SYSCTL_PWMDIV_4         0x00120000  // PWM clock is processor clock /4
N#define SYSCTL_PWMDIV_8         0x00140000  // PWM clock is processor clock /8
N#define SYSCTL_PWMDIV_16        0x00160000  // PWM clock is processor clock /16
N#define SYSCTL_PWMDIV_32        0x00180000  // PWM clock is processor clock /32
N#define SYSCTL_PWMDIV_64        0x001A0000  // PWM clock is processor clock /64
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlClockSet() API as
N// the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_SYSDIV_1         0x07800000  // Processor clock is osc/pll /1
N#define SYSCTL_SYSDIV_2         0x00C00000  // Processor clock is osc/pll /2
N#define SYSCTL_SYSDIV_3         0x01400000  // Processor clock is osc/pll /3
N#define SYSCTL_SYSDIV_4         0x01C00000  // Processor clock is osc/pll /4
N#define SYSCTL_SYSDIV_5         0x02400000  // Processor clock is osc/pll /5
N#define SYSCTL_SYSDIV_6         0x02C00000  // Processor clock is osc/pll /6
N#define SYSCTL_SYSDIV_7         0x03400000  // Processor clock is osc/pll /7
N#define SYSCTL_SYSDIV_8         0x03C00000  // Processor clock is osc/pll /8
N#define SYSCTL_SYSDIV_9         0x04400000  // Processor clock is osc/pll /9
N#define SYSCTL_SYSDIV_10        0x04C00000  // Processor clock is osc/pll /10
N#define SYSCTL_SYSDIV_11        0x05400000  // Processor clock is osc/pll /11
N#define SYSCTL_SYSDIV_12        0x05C00000  // Processor clock is osc/pll /12
N#define SYSCTL_SYSDIV_13        0x06400000  // Processor clock is osc/pll /13
N#define SYSCTL_SYSDIV_14        0x06C00000  // Processor clock is osc/pll /14
N#define SYSCTL_SYSDIV_15        0x07400000  // Processor clock is osc/pll /15
N#define SYSCTL_SYSDIV_16        0x07C00000  // Processor clock is osc/pll /16
N#define SYSCTL_SYSDIV_17        0x88400000  // Processor clock is osc/pll /17
N#define SYSCTL_SYSDIV_18        0x88C00000  // Processor clock is osc/pll /18
N#define SYSCTL_SYSDIV_19        0x89400000  // Processor clock is osc/pll /19
N#define SYSCTL_SYSDIV_20        0x89C00000  // Processor clock is osc/pll /20
N#define SYSCTL_SYSDIV_21        0x8A400000  // Processor clock is osc/pll /21
N#define SYSCTL_SYSDIV_22        0x8AC00000  // Processor clock is osc/pll /22
N#define SYSCTL_SYSDIV_23        0x8B400000  // Processor clock is osc/pll /23
N#define SYSCTL_SYSDIV_24        0x8BC00000  // Processor clock is osc/pll /24
N#define SYSCTL_SYSDIV_25        0x8C400000  // Processor clock is osc/pll /25
N#define SYSCTL_SYSDIV_26        0x8CC00000  // Processor clock is osc/pll /26
N#define SYSCTL_SYSDIV_27        0x8D400000  // Processor clock is osc/pll /27
N#define SYSCTL_SYSDIV_28        0x8DC00000  // Processor clock is osc/pll /28
N#define SYSCTL_SYSDIV_29        0x8E400000  // Processor clock is osc/pll /29
N#define SYSCTL_SYSDIV_30        0x8EC00000  // Processor clock is osc/pll /30
N#define SYSCTL_SYSDIV_31        0x8F400000  // Processor clock is osc/pll /31
N#define SYSCTL_SYSDIV_32        0x8FC00000  // Processor clock is osc/pll /32
N#define SYSCTL_SYSDIV_33        0x90400000  // Processor clock is osc/pll /33
N#define SYSCTL_SYSDIV_34        0x90C00000  // Processor clock is osc/pll /34
N#define SYSCTL_SYSDIV_35        0x91400000  // Processor clock is osc/pll /35
N#define SYSCTL_SYSDIV_36        0x91C00000  // Processor clock is osc/pll /36
N#define SYSCTL_SYSDIV_37        0x92400000  // Processor clock is osc/pll /37
N#define SYSCTL_SYSDIV_38        0x92C00000  // Processor clock is osc/pll /38
N#define SYSCTL_SYSDIV_39        0x93400000  // Processor clock is osc/pll /39
N#define SYSCTL_SYSDIV_40        0x93C00000  // Processor clock is osc/pll /40
N#define SYSCTL_SYSDIV_41        0x94400000  // Processor clock is osc/pll /41
N#define SYSCTL_SYSDIV_42        0x94C00000  // Processor clock is osc/pll /42
N#define SYSCTL_SYSDIV_43        0x95400000  // Processor clock is osc/pll /43
N#define SYSCTL_SYSDIV_44        0x95C00000  // Processor clock is osc/pll /44
N#define SYSCTL_SYSDIV_45        0x96400000  // Processor clock is osc/pll /45
N#define SYSCTL_SYSDIV_46        0x96C00000  // Processor clock is osc/pll /46
N#define SYSCTL_SYSDIV_47        0x97400000  // Processor clock is osc/pll /47
N#define SYSCTL_SYSDIV_48        0x97C00000  // Processor clock is osc/pll /48
N#define SYSCTL_SYSDIV_49        0x98400000  // Processor clock is osc/pll /49
N#define SYSCTL_SYSDIV_50        0x98C00000  // Processor clock is osc/pll /50
N#define SYSCTL_SYSDIV_51        0x99400000  // Processor clock is osc/pll /51
N#define SYSCTL_SYSDIV_52        0x99C00000  // Processor clock is osc/pll /52
N#define SYSCTL_SYSDIV_53        0x9A400000  // Processor clock is osc/pll /53
N#define SYSCTL_SYSDIV_54        0x9AC00000  // Processor clock is osc/pll /54
N#define SYSCTL_SYSDIV_55        0x9B400000  // Processor clock is osc/pll /55
N#define SYSCTL_SYSDIV_56        0x9BC00000  // Processor clock is osc/pll /56
N#define SYSCTL_SYSDIV_57        0x9C400000  // Processor clock is osc/pll /57
N#define SYSCTL_SYSDIV_58        0x9CC00000  // Processor clock is osc/pll /58
N#define SYSCTL_SYSDIV_59        0x9D400000  // Processor clock is osc/pll /59
N#define SYSCTL_SYSDIV_60        0x9DC00000  // Processor clock is osc/pll /60
N#define SYSCTL_SYSDIV_61        0x9E400000  // Processor clock is osc/pll /61
N#define SYSCTL_SYSDIV_62        0x9EC00000  // Processor clock is osc/pll /62
N#define SYSCTL_SYSDIV_63        0x9F400000  // Processor clock is osc/pll /63
N#define SYSCTL_SYSDIV_64        0x9FC00000  // Processor clock is osc/pll /64
N#define SYSCTL_SYSDIV_2_5       0xC1000000  // Processor clock is pll / 2.5
N#define SYSCTL_SYSDIV_3_5       0xC1800000  // Processor clock is pll / 3.5
N#define SYSCTL_SYSDIV_4_5       0xC2000000  // Processor clock is pll / 4.5
N#define SYSCTL_SYSDIV_5_5       0xC2800000  // Processor clock is pll / 5.5
N#define SYSCTL_SYSDIV_6_5       0xC3000000  // Processor clock is pll / 6.5
N#define SYSCTL_SYSDIV_7_5       0xC3800000  // Processor clock is pll / 7.5
N#define SYSCTL_SYSDIV_8_5       0xC4000000  // Processor clock is pll / 8.5
N#define SYSCTL_SYSDIV_9_5       0xC4800000  // Processor clock is pll / 9.5
N#define SYSCTL_SYSDIV_10_5      0xC5000000  // Processor clock is pll / 10.5
N#define SYSCTL_SYSDIV_11_5      0xC5800000  // Processor clock is pll / 11.5
N#define SYSCTL_SYSDIV_12_5      0xC6000000  // Processor clock is pll / 12.5
N#define SYSCTL_SYSDIV_13_5      0xC6800000  // Processor clock is pll / 13.5
N#define SYSCTL_SYSDIV_14_5      0xC7000000  // Processor clock is pll / 14.5
N#define SYSCTL_SYSDIV_15_5      0xC7800000  // Processor clock is pll / 15.5
N#define SYSCTL_SYSDIV_16_5      0xC8000000  // Processor clock is pll / 16.5
N#define SYSCTL_SYSDIV_17_5      0xC8800000  // Processor clock is pll / 17.5
N#define SYSCTL_SYSDIV_18_5      0xC9000000  // Processor clock is pll / 18.5
N#define SYSCTL_SYSDIV_19_5      0xC9800000  // Processor clock is pll / 19.5
N#define SYSCTL_SYSDIV_20_5      0xCA000000  // Processor clock is pll / 20.5
N#define SYSCTL_SYSDIV_21_5      0xCA800000  // Processor clock is pll / 21.5
N#define SYSCTL_SYSDIV_22_5      0xCB000000  // Processor clock is pll / 22.5
N#define SYSCTL_SYSDIV_23_5      0xCB800000  // Processor clock is pll / 23.5
N#define SYSCTL_SYSDIV_24_5      0xCC000000  // Processor clock is pll / 24.5
N#define SYSCTL_SYSDIV_25_5      0xCC800000  // Processor clock is pll / 25.5
N#define SYSCTL_SYSDIV_26_5      0xCD000000  // Processor clock is pll / 26.5
N#define SYSCTL_SYSDIV_27_5      0xCD800000  // Processor clock is pll / 27.5
N#define SYSCTL_SYSDIV_28_5      0xCE000000  // Processor clock is pll / 28.5
N#define SYSCTL_SYSDIV_29_5      0xCE800000  // Processor clock is pll / 29.5
N#define SYSCTL_SYSDIV_30_5      0xCF000000  // Processor clock is pll / 30.5
N#define SYSCTL_SYSDIV_31_5      0xCF800000  // Processor clock is pll / 31.5
N#define SYSCTL_SYSDIV_32_5      0xD0000000  // Processor clock is pll / 32.5
N#define SYSCTL_SYSDIV_33_5      0xD0800000  // Processor clock is pll / 33.5
N#define SYSCTL_SYSDIV_34_5      0xD1000000  // Processor clock is pll / 34.5
N#define SYSCTL_SYSDIV_35_5      0xD1800000  // Processor clock is pll / 35.5
N#define SYSCTL_SYSDIV_36_5      0xD2000000  // Processor clock is pll / 36.5
N#define SYSCTL_SYSDIV_37_5      0xD2800000  // Processor clock is pll / 37.5
N#define SYSCTL_SYSDIV_38_5      0xD3000000  // Processor clock is pll / 38.5
N#define SYSCTL_SYSDIV_39_5      0xD3800000  // Processor clock is pll / 39.5
N#define SYSCTL_SYSDIV_40_5      0xD4000000  // Processor clock is pll / 40.5
N#define SYSCTL_SYSDIV_41_5      0xD4800000  // Processor clock is pll / 41.5
N#define SYSCTL_SYSDIV_42_5      0xD5000000  // Processor clock is pll / 42.5
N#define SYSCTL_SYSDIV_43_5      0xD5800000  // Processor clock is pll / 43.5
N#define SYSCTL_SYSDIV_44_5      0xD6000000  // Processor clock is pll / 44.5
N#define SYSCTL_SYSDIV_45_5      0xD6800000  // Processor clock is pll / 45.5
N#define SYSCTL_SYSDIV_46_5      0xD7000000  // Processor clock is pll / 46.5
N#define SYSCTL_SYSDIV_47_5      0xD7800000  // Processor clock is pll / 47.5
N#define SYSCTL_SYSDIV_48_5      0xD8000000  // Processor clock is pll / 48.5
N#define SYSCTL_SYSDIV_49_5      0xD8800000  // Processor clock is pll / 49.5
N#define SYSCTL_SYSDIV_50_5      0xD9000000  // Processor clock is pll / 50.5
N#define SYSCTL_SYSDIV_51_5      0xD9800000  // Processor clock is pll / 51.5
N#define SYSCTL_SYSDIV_52_5      0xDA000000  // Processor clock is pll / 52.5
N#define SYSCTL_SYSDIV_53_5      0xDA800000  // Processor clock is pll / 53.5
N#define SYSCTL_SYSDIV_54_5      0xDB000000  // Processor clock is pll / 54.5
N#define SYSCTL_SYSDIV_55_5      0xDB800000  // Processor clock is pll / 55.5
N#define SYSCTL_SYSDIV_56_5      0xDC000000  // Processor clock is pll / 56.5
N#define SYSCTL_SYSDIV_57_5      0xDC800000  // Processor clock is pll / 57.5
N#define SYSCTL_SYSDIV_58_5      0xDD000000  // Processor clock is pll / 58.5
N#define SYSCTL_SYSDIV_59_5      0xDD800000  // Processor clock is pll / 59.5
N#define SYSCTL_SYSDIV_60_5      0xDE000000  // Processor clock is pll / 60.5
N#define SYSCTL_SYSDIV_61_5      0xDE800000  // Processor clock is pll / 61.5
N#define SYSCTL_SYSDIV_62_5      0xDF000000  // Processor clock is pll / 62.5
N#define SYSCTL_SYSDIV_63_5      0xDF800000  // Processor clock is pll / 63.5
N#define SYSCTL_CFG_VCO_480      0xF1000000  // VCO is 480 MHz
N#define SYSCTL_CFG_VCO_320      0xF0000000  // VCO is 320 MHz
N#define SYSCTL_USE_PLL          0x00000000  // System clock is the PLL clock
N#define SYSCTL_USE_OSC          0x00003800  // System clock is the osc clock
N#define SYSCTL_XTAL_1MHZ        0x00000000  // External crystal is 1MHz
N#define SYSCTL_XTAL_1_84MHZ     0x00000040  // External crystal is 1.8432MHz
N#define SYSCTL_XTAL_2MHZ        0x00000080  // External crystal is 2MHz
N#define SYSCTL_XTAL_2_45MHZ     0x000000C0  // External crystal is 2.4576MHz
N#define SYSCTL_XTAL_3_57MHZ     0x00000100  // External crystal is 3.579545MHz
N#define SYSCTL_XTAL_3_68MHZ     0x00000140  // External crystal is 3.6864MHz
N#define SYSCTL_XTAL_4MHZ        0x00000180  // External crystal is 4MHz
N#define SYSCTL_XTAL_4_09MHZ     0x000001C0  // External crystal is 4.096MHz
N#define SYSCTL_XTAL_4_91MHZ     0x00000200  // External crystal is 4.9152MHz
N#define SYSCTL_XTAL_5MHZ        0x00000240  // External crystal is 5MHz
N#define SYSCTL_XTAL_5_12MHZ     0x00000280  // External crystal is 5.12MHz
N#define SYSCTL_XTAL_6MHZ        0x000002C0  // External crystal is 6MHz
N#define SYSCTL_XTAL_6_14MHZ     0x00000300  // External crystal is 6.144MHz
N#define SYSCTL_XTAL_7_37MHZ     0x00000340  // External crystal is 7.3728MHz
N#define SYSCTL_XTAL_8MHZ        0x00000380  // External crystal is 8MHz
N#define SYSCTL_XTAL_8_19MHZ     0x000003C0  // External crystal is 8.192MHz
N#define SYSCTL_XTAL_10MHZ       0x00000400  // External crystal is 10 MHz
N#define SYSCTL_XTAL_12MHZ       0x00000440  // External crystal is 12 MHz
N#define SYSCTL_XTAL_12_2MHZ     0x00000480  // External crystal is 12.288 MHz
N#define SYSCTL_XTAL_13_5MHZ     0x000004C0  // External crystal is 13.56 MHz
N#define SYSCTL_XTAL_14_3MHZ     0x00000500  // External crystal is 14.31818 MHz
N#define SYSCTL_XTAL_16MHZ       0x00000540  // External crystal is 16 MHz
N#define SYSCTL_XTAL_16_3MHZ     0x00000580  // External crystal is 16.384 MHz
N#define SYSCTL_XTAL_18MHZ       0x000005C0  // External crystal is 18.0 MHz
N#define SYSCTL_XTAL_20MHZ       0x00000600  // External crystal is 20.0 MHz
N#define SYSCTL_XTAL_24MHZ       0x00000640  // External crystal is 24.0 MHz
N#define SYSCTL_XTAL_25MHZ       0x00000680  // External crystal is 25.0 MHz
N#define SYSCTL_OSC_MAIN         0x00000000  // Osc source is main osc
N#define SYSCTL_OSC_INT          0x00000010  // Osc source is int. osc
N#define SYSCTL_OSC_INT4         0x00000020  // Osc source is int. osc /4
N#define SYSCTL_OSC_INT30        0x00000030  // Osc source is int. 30 KHz
N#define SYSCTL_OSC_EXT32        0x80000038  // Osc source is ext. 32 KHz
N#define SYSCTL_INT_OSC_DIS      0x00000002  // Disable internal oscillator
N#define SYSCTL_MAIN_OSC_DIS     0x00000001  // Disable main oscillator
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlDeepSleepClockSet()
N// API as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_DSLP_DIV_1       0x00000000  // Deep-sleep clock is osc /1
N#define SYSCTL_DSLP_DIV_2       0x00800000  // Deep-sleep clock is osc /2
N#define SYSCTL_DSLP_DIV_3       0x01000000  // Deep-sleep clock is osc /3
N#define SYSCTL_DSLP_DIV_4       0x01800000  // Deep-sleep clock is osc /4
N#define SYSCTL_DSLP_DIV_5       0x02000000  // Deep-sleep clock is osc /5
N#define SYSCTL_DSLP_DIV_6       0x02800000  // Deep-sleep clock is osc /6
N#define SYSCTL_DSLP_DIV_7       0x03000000  // Deep-sleep clock is osc /7
N#define SYSCTL_DSLP_DIV_8       0x03800000  // Deep-sleep clock is osc /8
N#define SYSCTL_DSLP_DIV_9       0x04000000  // Deep-sleep clock is osc /9
N#define SYSCTL_DSLP_DIV_10      0x04800000  // Deep-sleep clock is osc /10
N#define SYSCTL_DSLP_DIV_11      0x05000000  // Deep-sleep clock is osc /11
N#define SYSCTL_DSLP_DIV_12      0x05800000  // Deep-sleep clock is osc /12
N#define SYSCTL_DSLP_DIV_13      0x06000000  // Deep-sleep clock is osc /13
N#define SYSCTL_DSLP_DIV_14      0x06800000  // Deep-sleep clock is osc /14
N#define SYSCTL_DSLP_DIV_15      0x07000000  // Deep-sleep clock is osc /15
N#define SYSCTL_DSLP_DIV_16      0x07800000  // Deep-sleep clock is osc /16
N#define SYSCTL_DSLP_DIV_17      0x08000000  // Deep-sleep clock is osc /17
N#define SYSCTL_DSLP_DIV_18      0x08800000  // Deep-sleep clock is osc /18
N#define SYSCTL_DSLP_DIV_19      0x09000000  // Deep-sleep clock is osc /19
N#define SYSCTL_DSLP_DIV_20      0x09800000  // Deep-sleep clock is osc /20
N#define SYSCTL_DSLP_DIV_21      0x0A000000  // Deep-sleep clock is osc /21
N#define SYSCTL_DSLP_DIV_22      0x0A800000  // Deep-sleep clock is osc /22
N#define SYSCTL_DSLP_DIV_23      0x0B000000  // Deep-sleep clock is osc /23
N#define SYSCTL_DSLP_DIV_24      0x0B800000  // Deep-sleep clock is osc /24
N#define SYSCTL_DSLP_DIV_25      0x0C000000  // Deep-sleep clock is osc /25
N#define SYSCTL_DSLP_DIV_26      0x0C800000  // Deep-sleep clock is osc /26
N#define SYSCTL_DSLP_DIV_27      0x0D000000  // Deep-sleep clock is osc /27
N#define SYSCTL_DSLP_DIV_28      0x0D800000  // Deep-sleep clock is osc /28
N#define SYSCTL_DSLP_DIV_29      0x0E000000  // Deep-sleep clock is osc /29
N#define SYSCTL_DSLP_DIV_30      0x0E800000  // Deep-sleep clock is osc /30
N#define SYSCTL_DSLP_DIV_31      0x0F000000  // Deep-sleep clock is osc /31
N#define SYSCTL_DSLP_DIV_32      0x0F800000  // Deep-sleep clock is osc /32
N#define SYSCTL_DSLP_DIV_33      0x10000000  // Deep-sleep clock is osc /33
N#define SYSCTL_DSLP_DIV_34      0x10800000  // Deep-sleep clock is osc /34
N#define SYSCTL_DSLP_DIV_35      0x11000000  // Deep-sleep clock is osc /35
N#define SYSCTL_DSLP_DIV_36      0x11800000  // Deep-sleep clock is osc /36
N#define SYSCTL_DSLP_DIV_37      0x12000000  // Deep-sleep clock is osc /37
N#define SYSCTL_DSLP_DIV_38      0x12800000  // Deep-sleep clock is osc /38
N#define SYSCTL_DSLP_DIV_39      0x13000000  // Deep-sleep clock is osc /39
N#define SYSCTL_DSLP_DIV_40      0x13800000  // Deep-sleep clock is osc /40
N#define SYSCTL_DSLP_DIV_41      0x14000000  // Deep-sleep clock is osc /41
N#define SYSCTL_DSLP_DIV_42      0x14800000  // Deep-sleep clock is osc /42
N#define SYSCTL_DSLP_DIV_43      0x15000000  // Deep-sleep clock is osc /43
N#define SYSCTL_DSLP_DIV_44      0x15800000  // Deep-sleep clock is osc /44
N#define SYSCTL_DSLP_DIV_45      0x16000000  // Deep-sleep clock is osc /45
N#define SYSCTL_DSLP_DIV_46      0x16800000  // Deep-sleep clock is osc /46
N#define SYSCTL_DSLP_DIV_47      0x17000000  // Deep-sleep clock is osc /47
N#define SYSCTL_DSLP_DIV_48      0x17800000  // Deep-sleep clock is osc /48
N#define SYSCTL_DSLP_DIV_49      0x18000000  // Deep-sleep clock is osc /49
N#define SYSCTL_DSLP_DIV_50      0x18800000  // Deep-sleep clock is osc /50
N#define SYSCTL_DSLP_DIV_51      0x19000000  // Deep-sleep clock is osc /51
N#define SYSCTL_DSLP_DIV_52      0x19800000  // Deep-sleep clock is osc /52
N#define SYSCTL_DSLP_DIV_53      0x1A000000  // Deep-sleep clock is osc /53
N#define SYSCTL_DSLP_DIV_54      0x1A800000  // Deep-sleep clock is osc /54
N#define SYSCTL_DSLP_DIV_55      0x1B000000  // Deep-sleep clock is osc /55
N#define SYSCTL_DSLP_DIV_56      0x1B800000  // Deep-sleep clock is osc /56
N#define SYSCTL_DSLP_DIV_57      0x1C000000  // Deep-sleep clock is osc /57
N#define SYSCTL_DSLP_DIV_58      0x1C800000  // Deep-sleep clock is osc /58
N#define SYSCTL_DSLP_DIV_59      0x1D000000  // Deep-sleep clock is osc /59
N#define SYSCTL_DSLP_DIV_60      0x1D800000  // Deep-sleep clock is osc /60
N#define SYSCTL_DSLP_DIV_61      0x1E000000  // Deep-sleep clock is osc /61
N#define SYSCTL_DSLP_DIV_62      0x1E800000  // Deep-sleep clock is osc /62
N#define SYSCTL_DSLP_DIV_63      0x1F000000  // Deep-sleep clock is osc /63
N#define SYSCTL_DSLP_DIV_64      0x1F800000  // Deep-sleep clock is osc /64
N#define SYSCTL_DSLP_OSC_MAIN    0x00000000  // Osc source is main osc
N#define SYSCTL_DSLP_OSC_INT     0x00000010  // Osc source is int. osc
N#define SYSCTL_DSLP_OSC_INT30   0x00000030  // Osc source is int. 30 KHz
N#define SYSCTL_DSLP_OSC_EXT32   0x00000070  // Osc source is ext. 32 KHz
N#define SYSCTL_DSLP_PIOSC_PD    0x00000002  // Power down PIOSC in deep-sleep
N#define SYSCTL_DSLP_MOSC_PD     0x40000000  // Power down MOSC in deep-sleep
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPIOSCCalibrate()
N// API as the ui32Type parameter.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSC_CAL_AUTO   0x00000200  // Automatic calibration
N#define SYSCTL_PIOSC_CAL_FACT   0x00000100  // Factory calibration
N#define SYSCTL_PIOSC_CAL_USER   0x80000100  // User-supplied calibration
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlMOSCConfigSet() API
N// as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_MOSC_VALIDATE    0x00000001  // Enable MOSC validation
N#define SYSCTL_MOSC_INTERRUPT   0x00000002  // Generate interrupt on MOSC fail
N#define SYSCTL_MOSC_NO_XTAL     0x00000004  // No crystal is attached to MOSC
N#define SYSCTL_MOSC_PWR_DIS     0x00000008  // Power down the MOSC.
N#define SYSCTL_MOSC_LOWFREQ     0x00000000  // MOSC is less than 10MHz
N#define SYSCTL_MOSC_HIGHFREQ    0x00000010  // MOSC is greater than 10MHz
N#define SYSCTL_MOSC_SESRC       0x00000020  // Singled ended oscillator source.
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlSleepPowerSet() and
N// SysCtlDeepSleepPowerSet() APIs as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_LDO_SLEEP        0x00000200  // LDO in sleep mode
N                                            // (Deep Sleep Only)
N#define SYSCTL_TEMP_LOW_POWER   0x00000100  // Temp sensor in low power mode
N                                            // (Deep Sleep Only)
N#define SYSCTL_FLASH_NORMAL     0x00000000  // Flash in normal mode
N#define SYSCTL_FLASH_LOW_POWER  0x00000020  // Flash in low power mode
N#define SYSCTL_SRAM_NORMAL      0x00000000  // SRAM in normal mode
N#define SYSCTL_SRAM_STANDBY     0x00000001  // SRAM in standby mode
N#define SYSCTL_SRAM_LOW_POWER   0x00000003  // SRAM in low power mode
N
N//*****************************************************************************
N//
N// Defines for the SysCtlResetBehaviorSet() and SysCtlResetBehaviorGet() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_ONRST_WDOG0_POR  0x00000030
N#define SYSCTL_ONRST_WDOG0_SYS  0x00000020
N#define SYSCTL_ONRST_WDOG1_POR  0x000000C0
N#define SYSCTL_ONRST_WDOG1_SYS  0x00000080
N#define SYSCTL_ONRST_BOR_POR    0x0000000C
N#define SYSCTL_ONRST_BOR_SYS    0x00000008
N#define SYSCTL_ONRST_EXT_POR    0x00000003
N#define SYSCTL_ONRST_EXT_SYS    0x00000002
N
N//*****************************************************************************
N//
N// Values used with the SysCtlVoltageEventConfig() API.
N//
N//*****************************************************************************
N#define SYSCTL_VEVENT_VDDABO_NONE                                             \
N                                0x00000000
X#define SYSCTL_VEVENT_VDDABO_NONE                                                                             0x00000000
N#define SYSCTL_VEVENT_VDDABO_INT                                              \
N                                0x00000100
X#define SYSCTL_VEVENT_VDDABO_INT                                                                              0x00000100
N#define SYSCTL_VEVENT_VDDABO_NMI                                              \
N                                0x00000200
X#define SYSCTL_VEVENT_VDDABO_NMI                                                                              0x00000200
N#define SYSCTL_VEVENT_VDDABO_RST                                              \
N                                0x00000300
X#define SYSCTL_VEVENT_VDDABO_RST                                                                              0x00000300
N#define SYSCTL_VEVENT_VDDBO_NONE                                              \
N                                0x00000000
X#define SYSCTL_VEVENT_VDDBO_NONE                                                                              0x00000000
N#define SYSCTL_VEVENT_VDDBO_INT 0x00000001
N#define SYSCTL_VEVENT_VDDBO_NMI 0x00000002
N#define SYSCTL_VEVENT_VDDBO_RST 0x00000003
N
N//*****************************************************************************
N//
N// Values used with the SysCtlVoltageEventStatus() and
N// SysCtlVoltageEventClear() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_VESTAT_VDDBOR    0x00000040
N#define SYSCTL_VESTAT_VDDABOR   0x00000010
N
N//*****************************************************************************
N//
N// Values used with the SysCtlNMIStatus() API.
N//
N//*****************************************************************************
N#define SYSCTL_NMI_MOSCFAIL     0x00010000
N#define SYSCTL_NMI_TAMPER       0x00000200
N#define SYSCTL_NMI_WDT1         0x00000020
N#define SYSCTL_NMI_WDT0         0x00000008
N#define SYSCTL_NMI_POWER        0x00000004
N#define SYSCTL_NMI_EXTERNAL     0x00000001
N
N//*****************************************************************************
N//
N// The defines for the SysCtlClockOutConfig() API.
N//
N//*****************************************************************************
N#define SYSCTL_CLKOUT_EN        0x80000000
N#define SYSCTL_CLKOUT_DIS       0x00000000
N#define SYSCTL_CLKOUT_SYSCLK    0x00000000
N#define SYSCTL_CLKOUT_PIOSC     0x00010000
N#define SYSCTL_CLKOUT_MOSC      0x00020000
N
N//*****************************************************************************
N//
N// The following defines are used with the SysCtlAltClkConfig() function.
N//
N//*****************************************************************************
N#define SYSCTL_ALTCLK_PIOSC     0x00000000
N#define SYSCTL_ALTCLK_RTCOSC    0x00000003
N#define SYSCTL_ALTCLK_LFIOSC    0x00000004
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern uint32_t SysCtlSRAMSizeGet(void);
Nextern uint32_t SysCtlFlashSizeGet(void);
Nextern uint32_t SysCtlFlashSectorSizeGet(void);
Nextern bool SysCtlPeripheralPresent(uint32_t ui32Peripheral);
Xextern _Bool SysCtlPeripheralPresent(uint32_t ui32Peripheral);
Nextern bool SysCtlPeripheralReady(uint32_t ui32Peripheral);
Xextern _Bool SysCtlPeripheralReady(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralPowerOn(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralPowerOff(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralReset(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralSleepEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralSleepDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDeepSleepEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDeepSleepDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralClockGating(bool bEnable);
Xextern void SysCtlPeripheralClockGating(_Bool bEnable);
Nextern void SysCtlIntRegister(void (*pfnHandler)(void));
Nextern void SysCtlIntUnregister(void);
Nextern void SysCtlIntEnable(uint32_t ui32Ints);
Nextern void SysCtlIntDisable(uint32_t ui32Ints);
Nextern void SysCtlIntClear(uint32_t ui32Ints);
Nextern uint32_t SysCtlIntStatus(bool bMasked);
Xextern uint32_t SysCtlIntStatus(_Bool bMasked);
Nextern void SysCtlLDOSleepSet(uint32_t ui32Voltage);
Nextern uint32_t SysCtlLDOSleepGet(void);
Nextern void SysCtlLDODeepSleepSet(uint32_t ui32Voltage);
Nextern uint32_t SysCtlLDODeepSleepGet(void);
Nextern void SysCtlSleepPowerSet(uint32_t ui32Config);
Nextern void SysCtlDeepSleepPowerSet(uint32_t ui32Config);
Nextern void SysCtlReset(void);
Nextern void SysCtlSleep(void);
Nextern void SysCtlDeepSleep(void);
Nextern uint32_t SysCtlResetCauseGet(void);
Nextern void SysCtlResetCauseClear(uint32_t ui32Causes);
Nextern void SysCtlBrownOutConfigSet(uint32_t ui32Config,
N                                    uint32_t ui32Delay);
Nextern void SysCtlDelay(uint32_t ui32Count);
Nextern void SysCtlMOSCConfigSet(uint32_t ui32Config);
Nextern uint32_t SysCtlPIOSCCalibrate(uint32_t ui32Type);
Nextern void SysCtlClockSet(uint32_t ui32Config);
Nextern uint32_t SysCtlClockGet(void);
Nextern void SysCtlDeepSleepClockSet(uint32_t ui32Config);
Nextern void SysCtlDeepSleepClockConfigSet(uint32_t ui32Div,
N                                          uint32_t ui32Config);
Nextern void SysCtlPWMClockSet(uint32_t ui32Config);
Nextern uint32_t SysCtlPWMClockGet(void);
Nextern void SysCtlIOSCVerificationSet(bool bEnable);
Xextern void SysCtlIOSCVerificationSet(_Bool bEnable);
Nextern void SysCtlMOSCVerificationSet(bool bEnable);
Xextern void SysCtlMOSCVerificationSet(_Bool bEnable);
Nextern void SysCtlPLLVerificationSet(bool bEnable);
Xextern void SysCtlPLLVerificationSet(_Bool bEnable);
Nextern void SysCtlClkVerificationClear(void);
Nextern void SysCtlGPIOAHBEnable(uint32_t ui32GPIOPeripheral);
Nextern void SysCtlGPIOAHBDisable(uint32_t ui32GPIOPeripheral);
Nextern void SysCtlUSBPLLEnable(void);
Nextern void SysCtlUSBPLLDisable(void);
Nextern uint32_t SysCtlClockFreqSet(uint32_t ui32Config,
N                                   uint32_t ui32SysClock);
Nextern void SysCtlResetBehaviorSet(uint32_t ui32Behavior);
Nextern uint32_t SysCtlResetBehaviorGet(void);
Nextern void SysCtlClockOutConfig(uint32_t ui32Config, uint32_t ui32Div);
Nextern void SysCtlAltClkConfig(uint32_t ui32Config);
Nextern uint32_t SysCtlNMIStatus(void);
Nextern void SysCtlNMIClear(uint32_t ui32Status);
Nextern void SysCtlVoltageEventConfig(uint32_t ui32Config);
Nextern uint32_t SysCtlVoltageEventStatus(void);
Nextern void SysCtlVoltageEventClear(uint32_t ui32Status);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_SYSCTL_H__
L 13 "..\inc_h\system.h" 2
N#include <hw_flash.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_flash.h" 1
N//*****************************************************************************
N//
N// hw_flash.h - Macros used when accessing the flash controller.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_FLASH_H__
N#define __HW_FLASH_H__
N
N//*****************************************************************************
N//
N// The following are defines for the FLASH register offsets.
N//
N//*****************************************************************************
N#define FLASH_FMA               0x400FD000  // Flash Memory Address
N#define FLASH_FMD               0x400FD004  // Flash Memory Data
N#define FLASH_FMC               0x400FD008  // Flash Memory Control
N#define FLASH_FCRIS             0x400FD00C  // Flash Controller Raw Interrupt
N                                            // Status
N#define FLASH_FCIM              0x400FD010  // Flash Controller Interrupt Mask
N#define FLASH_FCMISC            0x400FD014  // Flash Controller Masked
N                                            // Interrupt Status and Clear
N#define FLASH_FMC2              0x400FD020  // Flash Memory Control 2
N#define FLASH_FWBVAL            0x400FD030  // Flash Write Buffer Valid
N#define FLASH_FLPEKEY           0x400FD03C  // Flash Program/Erase Key
N#define FLASH_FWBN              0x400FD100  // Flash Write Buffer n
N#define FLASH_PP                0x400FDFC0  // Flash Peripheral Properties
N#define FLASH_FSIZE             0x400FDFC0  // Flash Size
N#define FLASH_SSIZE             0x400FDFC4  // SRAM Size
N#define FLASH_CONF              0x400FDFC8  // Flash Configuration Register
N#define FLASH_ROMSWMAP          0x400FDFCC  // ROM Software Map
N#define FLASH_DMASZ             0x400FDFD0  // Flash DMA Address Size
N#define FLASH_DMAST             0x400FDFD4  // Flash DMA Starting Address
N#define FLASH_RVP               0x400FE0D4  // Reset Vector Pointer
N#define FLASH_RMCTL             0x400FE0F0  // ROM Control
N#define FLASH_BOOTCFG           0x400FE1D0  // Boot Configuration
N#define FLASH_USERREG0          0x400FE1E0  // User Register 0
N#define FLASH_USERREG1          0x400FE1E4  // User Register 1
N#define FLASH_USERREG2          0x400FE1E8  // User Register 2
N#define FLASH_USERREG3          0x400FE1EC  // User Register 3
N#define FLASH_FMPRE0            0x400FE200  // Flash Memory Protection Read
N                                            // Enable 0
N#define FLASH_FMPRE1            0x400FE204  // Flash Memory Protection Read
N                                            // Enable 1
N#define FLASH_FMPRE2            0x400FE208  // Flash Memory Protection Read
N                                            // Enable 2
N#define FLASH_FMPRE3            0x400FE20C  // Flash Memory Protection Read
N                                            // Enable 3
N#define FLASH_FMPRE4            0x400FE210  // Flash Memory Protection Read
N                                            // Enable 4
N#define FLASH_FMPRE5            0x400FE214  // Flash Memory Protection Read
N                                            // Enable 5
N#define FLASH_FMPRE6            0x400FE218  // Flash Memory Protection Read
N                                            // Enable 6
N#define FLASH_FMPRE7            0x400FE21C  // Flash Memory Protection Read
N                                            // Enable 7
N#define FLASH_FMPRE8            0x400FE220  // Flash Memory Protection Read
N                                            // Enable 8
N#define FLASH_FMPRE9            0x400FE224  // Flash Memory Protection Read
N                                            // Enable 9
N#define FLASH_FMPRE10           0x400FE228  // Flash Memory Protection Read
N                                            // Enable 10
N#define FLASH_FMPRE11           0x400FE22C  // Flash Memory Protection Read
N                                            // Enable 11
N#define FLASH_FMPRE12           0x400FE230  // Flash Memory Protection Read
N                                            // Enable 12
N#define FLASH_FMPRE13           0x400FE234  // Flash Memory Protection Read
N                                            // Enable 13
N#define FLASH_FMPRE14           0x400FE238  // Flash Memory Protection Read
N                                            // Enable 14
N#define FLASH_FMPRE15           0x400FE23C  // Flash Memory Protection Read
N                                            // Enable 15
N#define FLASH_FMPPE0            0x400FE400  // Flash Memory Protection Program
N                                            // Enable 0
N#define FLASH_FMPPE1            0x400FE404  // Flash Memory Protection Program
N                                            // Enable 1
N#define FLASH_FMPPE2            0x400FE408  // Flash Memory Protection Program
N                                            // Enable 2
N#define FLASH_FMPPE3            0x400FE40C  // Flash Memory Protection Program
N                                            // Enable 3
N#define FLASH_FMPPE4            0x400FE410  // Flash Memory Protection Program
N                                            // Enable 4
N#define FLASH_FMPPE5            0x400FE414  // Flash Memory Protection Program
N                                            // Enable 5
N#define FLASH_FMPPE6            0x400FE418  // Flash Memory Protection Program
N                                            // Enable 6
N#define FLASH_FMPPE7            0x400FE41C  // Flash Memory Protection Program
N                                            // Enable 7
N#define FLASH_FMPPE8            0x400FE420  // Flash Memory Protection Program
N                                            // Enable 8
N#define FLASH_FMPPE9            0x400FE424  // Flash Memory Protection Program
N                                            // Enable 9
N#define FLASH_FMPPE10           0x400FE428  // Flash Memory Protection Program
N                                            // Enable 10
N#define FLASH_FMPPE11           0x400FE42C  // Flash Memory Protection Program
N                                            // Enable 11
N#define FLASH_FMPPE12           0x400FE430  // Flash Memory Protection Program
N                                            // Enable 12
N#define FLASH_FMPPE13           0x400FE434  // Flash Memory Protection Program
N                                            // Enable 13
N#define FLASH_FMPPE14           0x400FE438  // Flash Memory Protection Program
N                                            // Enable 14
N#define FLASH_FMPPE15           0x400FE43C  // Flash Memory Protection Program
N                                            // Enable 15
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMA register.
N//
N//*****************************************************************************
N#define FLASH_FMA_OFFSET_M      0x000FFFFF  // Address Offset
N#define FLASH_FMA_OFFSET_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMD register.
N//
N//*****************************************************************************
N#define FLASH_FMD_DATA_M        0xFFFFFFFF  // Data Value
N#define FLASH_FMD_DATA_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMC register.
N//
N//*****************************************************************************
N#define FLASH_FMC_WRKEY         0xA4420000  // FLASH write key
N#define FLASH_FMC_COMT          0x00000008  // Commit Register Value
N#define FLASH_FMC_MERASE        0x00000004  // Mass Erase Flash Memory
N#define FLASH_FMC_ERASE         0x00000002  // Erase a Page of Flash Memory
N#define FLASH_FMC_WRITE         0x00000001  // Write a Word into Flash Memory
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FCRIS register.
N//
N//*****************************************************************************
N#define FLASH_FCRIS_PROGRIS     0x00002000  // Program Verify Error Raw
N                                            // Interrupt Status
N#define FLASH_FCRIS_ERRIS       0x00000800  // Erase Verify Error Raw Interrupt
N                                            // Status
N#define FLASH_FCRIS_INVDRIS     0x00000400  // Invalid Data Raw Interrupt
N                                            // Status
N#define FLASH_FCRIS_VOLTRIS     0x00000200  // Pump Voltage Raw Interrupt
N                                            // Status
N#define FLASH_FCRIS_ERIS        0x00000004  // EEPROM Raw Interrupt Status
N#define FLASH_FCRIS_PRIS        0x00000002  // Programming Raw Interrupt Status
N#define FLASH_FCRIS_ARIS        0x00000001  // Access Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FCIM register.
N//
N//*****************************************************************************
N#define FLASH_FCIM_PROGMASK     0x00002000  // PROGVER Interrupt Mask
N#define FLASH_FCIM_ERMASK       0x00000800  // ERVER Interrupt Mask
N#define FLASH_FCIM_INVDMASK     0x00000400  // Invalid Data Interrupt Mask
N#define FLASH_FCIM_VOLTMASK     0x00000200  // VOLT Interrupt Mask
N#define FLASH_FCIM_EMASK        0x00000004  // EEPROM Interrupt Mask
N#define FLASH_FCIM_PMASK        0x00000002  // Programming Interrupt Mask
N#define FLASH_FCIM_AMASK        0x00000001  // Access Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FCMISC register.
N//
N//*****************************************************************************
N#define FLASH_FCMISC_PROGMISC   0x00002000  // PROGVER Masked Interrupt Status
N                                            // and Clear
N#define FLASH_FCMISC_ERMISC     0x00000800  // ERVER Masked Interrupt Status
N                                            // and Clear
N#define FLASH_FCMISC_INVDMISC   0x00000400  // Invalid Data Masked Interrupt
N                                            // Status and Clear
N#define FLASH_FCMISC_VOLTMISC   0x00000200  // VOLT Masked Interrupt Status and
N                                            // Clear
N#define FLASH_FCMISC_EMISC      0x00000004  // EEPROM Masked Interrupt Status
N                                            // and Clear
N#define FLASH_FCMISC_PMISC      0x00000002  // Programming Masked Interrupt
N                                            // Status and Clear
N#define FLASH_FCMISC_AMISC      0x00000001  // Access Masked Interrupt Status
N                                            // and Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMC2 register.
N//
N//*****************************************************************************
N#define FLASH_FMC2_WRKEY        0xA4420000  // FLASH write key
N#define FLASH_FMC2_WRBUF        0x00000001  // Buffered Flash Memory Write
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FWBVAL register.
N//
N//*****************************************************************************
N#define FLASH_FWBVAL_FWB_M      0xFFFFFFFF  // Flash Memory Write Buffer
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FLPEKEY register.
N//
N//*****************************************************************************
N#define FLASH_FLPEKEY_PEKEY_M   0x0000FFFF  // Key Value
N#define FLASH_FLPEKEY_PEKEY_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FWBN register.
N//
N//*****************************************************************************
N#define FLASH_FWBN_DATA_M       0xFFFFFFFF  // Data
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_PP register.
N//
N//*****************************************************************************
N#define FLASH_PP_PFC            0x40000000  // Prefetch Buffer Mode
N#define FLASH_PP_FMM            0x20000000  // Flash Mirror Mode
N#define FLASH_PP_DFA            0x10000000  // DMA Flash Access
N#define FLASH_PP_EESS_M         0x00780000  // EEPROM Sector Size of the
N                                            // physical bank
N#define FLASH_PP_EESS_1KB       0x00000000  // 1 KB
N#define FLASH_PP_EESS_2KB       0x00080000  // 2 KB
N#define FLASH_PP_EESS_4KB       0x00100000  // 4 KB
N#define FLASH_PP_EESS_8KB       0x00180000  // 8 KB
N#define FLASH_PP_MAINSS_M       0x00070000  // Flash Sector Size of the
N                                            // physical bank
N#define FLASH_PP_MAINSS_1KB     0x00000000  // 1 KB
N#define FLASH_PP_MAINSS_2KB     0x00010000  // 2 KB
N#define FLASH_PP_MAINSS_4KB     0x00020000  // 4 KB
N#define FLASH_PP_MAINSS_8KB     0x00030000  // 8 KB
N#define FLASH_PP_MAINSS_16KB    0x00040000  // 16 KB
N#define FLASH_PP_SIZE_M         0x0000FFFF  // Flash Size
N#define FLASH_PP_SIZE_512KB     0x000000FF  // 512 KB of Flash
N#define FLASH_PP_SIZE_1MB       0x000001FF  // 1024 KB of Flash
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FSIZE register.
N//
N//*****************************************************************************
N#define FLASH_FSIZE_SIZE_M      0x0000FFFF  // Flash Size
N#define FLASH_FSIZE_SIZE_32KB   0x0000000F  // 32 KB of Flash
N#define FLASH_FSIZE_SIZE_64KB   0x0000001F  // 64 KB of Flash
N#define FLASH_FSIZE_SIZE_128KB  0x0000003F  // 128 KB of Flash
N#define FLASH_FSIZE_SIZE_256KB  0x0000007F  // 256 KB of Flash
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_SSIZE register.
N//
N//*****************************************************************************
N#define FLASH_SSIZE_SIZE_M      0x0000FFFF  // SRAM Size
N#define FLASH_SSIZE_SIZE_12KB   0x0000002F  // 12 KB of SRAM
N#define FLASH_SSIZE_SIZE_24KB   0x0000005F  // 24 KB of SRAM
N#define FLASH_SSIZE_SIZE_32KB   0x0000007F  // 32 KB of SRAM
N#define FLASH_SSIZE_SIZE_256KB  0x000003FF  // 256 KB of SRAM
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_CONF register.
N//
N//*****************************************************************************
N#define FLASH_CONF_FMME         0x40000000  // Flash Mirror Mode Enable
N#define FLASH_CONF_SPFE         0x20000000  // Single Prefetch Mode Enable
N#define FLASH_CONF_CLRTV        0x00100000  // Clear Valid Tags
N#define FLASH_CONF_FPFON        0x00020000  // Force Prefetch On
N#define FLASH_CONF_FPFOFF       0x00010000  // Force Prefetch Off
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_ROMSWMAP register.
N//
N//*****************************************************************************
N#define FLASH_ROMSWMAP_SAFERTOS 0x00000001  // SafeRTOS Present
N#define FLASH_ROMSWMAP_SW0EN_M  0x00000003  // ROM SW Region 0 Availability
N#define FLASH_ROMSWMAP_SW0EN_NOTVIS                                           \
N                                0x00000000  // Software region not available to
X#define FLASH_ROMSWMAP_SW0EN_NOTVIS                                                                           0x00000000  
N                                            // the core
N#define FLASH_ROMSWMAP_SW0EN_CORE                                             \
N                                0x00000001  // Region available to core
X#define FLASH_ROMSWMAP_SW0EN_CORE                                                                             0x00000001  
N#define FLASH_ROMSWMAP_SW1EN_M  0x0000000C  // ROM SW Region 1 Availability
N#define FLASH_ROMSWMAP_SW1EN_NOTVIS                                           \
N                                0x00000000  // Software region not available to
X#define FLASH_ROMSWMAP_SW1EN_NOTVIS                                                                           0x00000000  
N                                            // the core
N#define FLASH_ROMSWMAP_SW1EN_CORE                                             \
N                                0x00000004  // Region available to core
X#define FLASH_ROMSWMAP_SW1EN_CORE                                                                             0x00000004  
N#define FLASH_ROMSWMAP_SW2EN_M  0x00000030  // ROM SW Region 2 Availability
N#define FLASH_ROMSWMAP_SW2EN_NOTVIS                                           \
N                                0x00000000  // Software region not available to
X#define FLASH_ROMSWMAP_SW2EN_NOTVIS                                                                           0x00000000  
N                                            // the core
N#define FLASH_ROMSWMAP_SW2EN_CORE                                             \
N                                0x00000010  // Region available to core
X#define FLASH_ROMSWMAP_SW2EN_CORE                                                                             0x00000010  
N#define FLASH_ROMSWMAP_SW3EN_M  0x000000C0  // ROM SW Region 3 Availability
N#define FLASH_ROMSWMAP_SW3EN_NOTVIS                                           \
N                                0x00000000  // Software region not available to
X#define FLASH_ROMSWMAP_SW3EN_NOTVIS                                                                           0x00000000  
N                                            // the core
N#define FLASH_ROMSWMAP_SW3EN_CORE                                             \
N                                0x00000040  // Region available to core
X#define FLASH_ROMSWMAP_SW3EN_CORE                                                                             0x00000040  
N#define FLASH_ROMSWMAP_SW4EN_M  0x00000300  // ROM SW Region 4 Availability
N#define FLASH_ROMSWMAP_SW4EN_NOTVIS                                           \
N                                0x00000000  // Software region not available to
X#define FLASH_ROMSWMAP_SW4EN_NOTVIS                                                                           0x00000000  
N                                            // the core
N#define FLASH_ROMSWMAP_SW4EN_CORE                                             \
N                                0x00000100  // Region available to core
X#define FLASH_ROMSWMAP_SW4EN_CORE                                                                             0x00000100  
N#define FLASH_ROMSWMAP_SW5EN_M  0x00000C00  // ROM SW Region 5 Availability
N#define FLASH_ROMSWMAP_SW5EN_NOTVIS                                           \
N                                0x00000000  // Software region not available to
X#define FLASH_ROMSWMAP_SW5EN_NOTVIS                                                                           0x00000000  
N                                            // the core
N#define FLASH_ROMSWMAP_SW5EN_CORE                                             \
N                                0x00000400  // Region available to core
X#define FLASH_ROMSWMAP_SW5EN_CORE                                                                             0x00000400  
N#define FLASH_ROMSWMAP_SW6EN_M  0x00003000  // ROM SW Region 6 Availability
N#define FLASH_ROMSWMAP_SW6EN_NOTVIS                                           \
N                                0x00000000  // Software region not available to
X#define FLASH_ROMSWMAP_SW6EN_NOTVIS                                                                           0x00000000  
N                                            // the core
N#define FLASH_ROMSWMAP_SW6EN_CORE                                             \
N                                0x00001000  // Region available to core
X#define FLASH_ROMSWMAP_SW6EN_CORE                                                                             0x00001000  
N#define FLASH_ROMSWMAP_SW7EN_M  0x0000C000  // ROM SW Region 7 Availability
N#define FLASH_ROMSWMAP_SW7EN_NOTVIS                                           \
N                                0x00000000  // Software region not available to
X#define FLASH_ROMSWMAP_SW7EN_NOTVIS                                                                           0x00000000  
N                                            // the core
N#define FLASH_ROMSWMAP_SW7EN_CORE                                             \
N                                0x00004000  // Region available to core
X#define FLASH_ROMSWMAP_SW7EN_CORE                                                                             0x00004000  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_DMASZ register.
N//
N//*****************************************************************************
N#define FLASH_DMASZ_SIZE_M      0x0003FFFF  // uDMA-accessible Memory Size
N#define FLASH_DMASZ_SIZE_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_DMAST register.
N//
N//*****************************************************************************
N#define FLASH_DMAST_ADDR_M      0x1FFFF800  // Contains the starting address of
N                                            // the flash region accessible by
N                                            // uDMA if the FLASHPP register DFA
N                                            // bit is set
N#define FLASH_DMAST_ADDR_S      11
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_RVP register.
N//
N//*****************************************************************************
N#define FLASH_RVP_RV_M          0xFFFFFFFF  // Reset Vector Pointer Address
N#define FLASH_RVP_RV_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_RMCTL register.
N//
N//*****************************************************************************
N#define FLASH_RMCTL_BA          0x00000001  // Boot Alias
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_BOOTCFG register.
N//
N//*****************************************************************************
N#define FLASH_BOOTCFG_NW        0x80000000  // Not Written
N#define FLASH_BOOTCFG_PORT_M    0x0000E000  // Boot GPIO Port
N#define FLASH_BOOTCFG_PORT_A    0x00000000  // Port A
N#define FLASH_BOOTCFG_PORT_B    0x00002000  // Port B
N#define FLASH_BOOTCFG_PORT_C    0x00004000  // Port C
N#define FLASH_BOOTCFG_PORT_D    0x00006000  // Port D
N#define FLASH_BOOTCFG_PORT_E    0x00008000  // Port E
N#define FLASH_BOOTCFG_PORT_F    0x0000A000  // Port F
N#define FLASH_BOOTCFG_PORT_G    0x0000C000  // Port G
N#define FLASH_BOOTCFG_PORT_H    0x0000E000  // Port H
N#define FLASH_BOOTCFG_PIN_M     0x00001C00  // Boot GPIO Pin
N#define FLASH_BOOTCFG_PIN_0     0x00000000  // Pin 0
N#define FLASH_BOOTCFG_PIN_1     0x00000400  // Pin 1
N#define FLASH_BOOTCFG_PIN_2     0x00000800  // Pin 2
N#define FLASH_BOOTCFG_PIN_3     0x00000C00  // Pin 3
N#define FLASH_BOOTCFG_PIN_4     0x00001000  // Pin 4
N#define FLASH_BOOTCFG_PIN_5     0x00001400  // Pin 5
N#define FLASH_BOOTCFG_PIN_6     0x00001800  // Pin 6
N#define FLASH_BOOTCFG_PIN_7     0x00001C00  // Pin 7
N#define FLASH_BOOTCFG_POL       0x00000200  // Boot GPIO Polarity
N#define FLASH_BOOTCFG_EN        0x00000100  // Boot GPIO Enable
N#define FLASH_BOOTCFG_KEY       0x00000010  // KEY Select
N#define FLASH_BOOTCFG_DBG1      0x00000002  // Debug Control 1
N#define FLASH_BOOTCFG_DBG0      0x00000001  // Debug Control 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_USERREG0 register.
N//
N//*****************************************************************************
N#define FLASH_USERREG0_DATA_M   0xFFFFFFFF  // User Data
N#define FLASH_USERREG0_DATA_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_USERREG1 register.
N//
N//*****************************************************************************
N#define FLASH_USERREG1_DATA_M   0xFFFFFFFF  // User Data
N#define FLASH_USERREG1_DATA_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_USERREG2 register.
N//
N//*****************************************************************************
N#define FLASH_USERREG2_DATA_M   0xFFFFFFFF  // User Data
N#define FLASH_USERREG2_DATA_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_USERREG3 register.
N//
N//*****************************************************************************
N#define FLASH_USERREG3_DATA_M   0xFFFFFFFF  // User Data
N#define FLASH_USERREG3_DATA_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE8 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE8_READ_ENABLE_M                                            \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE8_READ_ENABLE_M                                                                            0xFFFFFFFF  
N#define FLASH_FMPRE8_READ_ENABLE_S                                            \
N                                0
X#define FLASH_FMPRE8_READ_ENABLE_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE9 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE9_READ_ENABLE_M                                            \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE9_READ_ENABLE_M                                                                            0xFFFFFFFF  
N#define FLASH_FMPRE9_READ_ENABLE_S                                            \
N                                0
X#define FLASH_FMPRE9_READ_ENABLE_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE10 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE10_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE10_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE10_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE10_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE11 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE11_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE11_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE11_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE11_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE12 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE12_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE12_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE12_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE12_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE13 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE13_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE13_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE13_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE13_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE14 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE14_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE14_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE14_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE14_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE15 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE15_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE15_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE15_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE15_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE8 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE8_PROG_ENABLE_M                                            \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE8_PROG_ENABLE_M                                                                            0xFFFFFFFF  
N#define FLASH_FMPPE8_PROG_ENABLE_S                                            \
N                                0
X#define FLASH_FMPPE8_PROG_ENABLE_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE9 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE9_PROG_ENABLE_M                                            \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE9_PROG_ENABLE_M                                                                            0xFFFFFFFF  
N#define FLASH_FMPPE9_PROG_ENABLE_S                                            \
N                                0
X#define FLASH_FMPPE9_PROG_ENABLE_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE10 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE10_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE10_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE10_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE10_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE11 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE11_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE11_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE11_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE11_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE12 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE12_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE12_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE12_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE12_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE13 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE13_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE13_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE13_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE13_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE14 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE14_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE14_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE14_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE14_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE15 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE15_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE15_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE15_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE15_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the erase size of the FLASH block that is
N// erased by an erase operation, and the protect size is the size of the FLASH
N// block that is protected by each protection register.
N//
N//*****************************************************************************
N#define FLASH_PROTECT_SIZE      0x00000800
N#define FLASH_ERASE_SIZE        0x00000400
N
N#endif // __HW_FLASH_H__
L 14 "..\inc_h\system.h" 2
N#include <hw_ints.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_ints.h" 1
N//*****************************************************************************
N//
N// hw_ints.h - Macros that define the interrupt assignment on Tiva C Series
N// MCUs.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_INTS_H__
N#define __HW_INTS_H__
N
N//*****************************************************************************
N//
N// The following are defines for the fault assignments.
N//
N//*****************************************************************************
N#define FAULT_NMI               2           // NMI fault
N#define FAULT_HARD              3           // Hard fault
N#define FAULT_MPU               4           // MPU fault
N#define FAULT_BUS               5           // Bus fault
N#define FAULT_USAGE             6           // Usage fault
N#define FAULT_SVCALL            11          // SVCall
N#define FAULT_DEBUG             12          // Debug monitor
N#define FAULT_PENDSV            14          // PendSV
N#define FAULT_SYSTICK           15          // System Tick
N
N//*****************************************************************************
N//
N// TM4C123 Class Interrupts
N//
N//*****************************************************************************
N#define INT_GPIOA_TM4C123       16          // GPIO Port A
N#define INT_GPIOB_TM4C123       17          // GPIO Port B
N#define INT_GPIOC_TM4C123       18          // GPIO Port C
N#define INT_GPIOD_TM4C123       19          // GPIO Port D
N#define INT_GPIOE_TM4C123       20          // GPIO Port E
N#define INT_UART0_TM4C123       21          // UART0
N#define INT_UART1_TM4C123       22          // UART1
N#define INT_SSI0_TM4C123        23          // SSI0
N#define INT_I2C0_TM4C123        24          // I2C0
N#define INT_PWM0_FAULT_TM4C123  25          // PWM0 Fault
N#define INT_PWM0_0_TM4C123      26          // PWM0 Generator 0
N#define INT_PWM0_1_TM4C123      27          // PWM0 Generator 1
N#define INT_PWM0_2_TM4C123      28          // PWM0 Generator 2
N#define INT_QEI0_TM4C123        29          // QEI0
N#define INT_ADC0SS0_TM4C123     30          // ADC0 Sequence 0
N#define INT_ADC0SS1_TM4C123     31          // ADC0 Sequence 1
N#define INT_ADC0SS2_TM4C123     32          // ADC0 Sequence 2
N#define INT_ADC0SS3_TM4C123     33          // ADC0 Sequence 3
N#define INT_WATCHDOG_TM4C123    34          // Watchdog Timers 0 and 1
N#define INT_TIMER0A_TM4C123     35          // 16/32-Bit Timer 0A
N#define INT_TIMER0B_TM4C123     36          // 16/32-Bit Timer 0B
N#define INT_TIMER1A_TM4C123     37          // 16/32-Bit Timer 1A
N#define INT_TIMER1B_TM4C123     38          // 16/32-Bit Timer 1B
N#define INT_TIMER2A_TM4C123     39          // 16/32-Bit Timer 2A
N#define INT_TIMER2B_TM4C123     40          // 16/32-Bit Timer 2B
N#define INT_COMP0_TM4C123       41          // Analog Comparator 0
N#define INT_COMP1_TM4C123       42          // Analog Comparator 1
N#define INT_COMP2_TM4C123       43          // Analog Comparator 2
N#define INT_SYSCTL_TM4C123      44          // System Control
N#define INT_FLASH_TM4C123       45          // Flash Memory Control and EEPROM
N                                            // Control
N#define INT_GPIOF_TM4C123       46          // GPIO Port F
N#define INT_GPIOG_TM4C123       47          // GPIO Port G
N#define INT_GPIOH_TM4C123       48          // GPIO Port H
N#define INT_UART2_TM4C123       49          // UART2
N#define INT_SSI1_TM4C123        50          // SSI1
N#define INT_TIMER3A_TM4C123     51          // 16/32-Bit Timer 3A
N#define INT_TIMER3B_TM4C123     52          // Timer 3B
N#define INT_I2C1_TM4C123        53          // I2C1
N#define INT_QEI1_TM4C123        54          // QEI1
N#define INT_CAN0_TM4C123        55          // CAN0
N#define INT_CAN1_TM4C123        56          // CAN1
N#define INT_HIBERNATE_TM4C123   59          // Hibernation Module
N#define INT_USB0_TM4C123        60          // USB
N#define INT_PWM0_3_TM4C123      61          // PWM Generator 3
N#define INT_UDMA_TM4C123        62          // uDMA Software
N#define INT_UDMAERR_TM4C123     63          // uDMA Error
N#define INT_ADC1SS0_TM4C123     64          // ADC1 Sequence 0
N#define INT_ADC1SS1_TM4C123     65          // ADC1 Sequence 1
N#define INT_ADC1SS2_TM4C123     66          // ADC1 Sequence 2
N#define INT_ADC1SS3_TM4C123     67          // ADC1 Sequence 3
N#define INT_GPIOJ_TM4C123       70          // GPIO Port J
N#define INT_GPIOK_TM4C123       71          // GPIO Port K
N#define INT_GPIOL_TM4C123       72          // GPIO Port L
N#define INT_SSI2_TM4C123        73          // SSI2
N#define INT_SSI3_TM4C123        74          // SSI3
N#define INT_UART3_TM4C123       75          // UART3
N#define INT_UART4_TM4C123       76          // UART4
N#define INT_UART5_TM4C123       77          // UART5
N#define INT_UART6_TM4C123       78          // UART6
N#define INT_UART7_TM4C123       79          // UART7
N#define INT_I2C2_TM4C123        84          // I2C2
N#define INT_I2C3_TM4C123        85          // I2C3
N#define INT_TIMER4A_TM4C123     86          // 16/32-Bit Timer 4A
N#define INT_TIMER4B_TM4C123     87          // 16/32-Bit Timer 4B
N#define INT_TIMER5A_TM4C123     108         // 16/32-Bit Timer 5A
N#define INT_TIMER5B_TM4C123     109         // 16/32-Bit Timer 5B
N#define INT_WTIMER0A_TM4C123    110         // 32/64-Bit Timer 0A
N#define INT_WTIMER0B_TM4C123    111         // 32/64-Bit Timer 0B
N#define INT_WTIMER1A_TM4C123    112         // 32/64-Bit Timer 1A
N#define INT_WTIMER1B_TM4C123    113         // 32/64-Bit Timer 1B
N#define INT_WTIMER2A_TM4C123    114         // 32/64-Bit Timer 2A
N#define INT_WTIMER2B_TM4C123    115         // 32/64-Bit Timer 2B
N#define INT_WTIMER3A_TM4C123    116         // 32/64-Bit Timer 3A
N#define INT_WTIMER3B_TM4C123    117         // 32/64-Bit Timer 3B
N#define INT_WTIMER4A_TM4C123    118         // 32/64-Bit Timer 4A
N#define INT_WTIMER4B_TM4C123    119         // 32/64-Bit Timer 4B
N#define INT_WTIMER5A_TM4C123    120         // 32/64-Bit Timer 5A
N#define INT_WTIMER5B_TM4C123    121         // 32/64-Bit Timer 5B
N#define INT_SYSEXC_TM4C123      122         // System Exception (imprecise)
N#define INT_I2C4_TM4C123        125         // I2C4
N#define INT_I2C5_TM4C123        126         // I2C5
N#define INT_GPIOM_TM4C123       127         // GPIO Port M
N#define INT_GPION_TM4C123       128         // GPIO Port N
N#define INT_GPIOP0_TM4C123      132         // GPIO Port P (Summary or P0)
N#define INT_GPIOP1_TM4C123      133         // GPIO Port P1
N#define INT_GPIOP2_TM4C123      134         // GPIO Port P2
N#define INT_GPIOP3_TM4C123      135         // GPIO Port P3
N#define INT_GPIOP4_TM4C123      136         // GPIO Port P4
N#define INT_GPIOP5_TM4C123      137         // GPIO Port P5
N#define INT_GPIOP6_TM4C123      138         // GPIO Port P6
N#define INT_GPIOP7_TM4C123      139         // GPIO Port P7
N#define INT_GPIOQ0_TM4C123      140         // GPIO Port Q (Summary or Q0)
N#define INT_GPIOQ1_TM4C123      141         // GPIO Port Q1
N#define INT_GPIOQ2_TM4C123      142         // GPIO Port Q2
N#define INT_GPIOQ3_TM4C123      143         // GPIO Port Q3
N#define INT_GPIOQ4_TM4C123      144         // GPIO Port Q4
N#define INT_GPIOQ5_TM4C123      145         // GPIO Port Q5
N#define INT_GPIOQ6_TM4C123      146         // GPIO Port Q6
N#define INT_GPIOQ7_TM4C123      147         // GPIO Port Q7
N#define INT_PWM1_0_TM4C123      150         // PWM1 Generator 0
N#define INT_PWM1_1_TM4C123      151         // PWM1 Generator 1
N#define INT_PWM1_2_TM4C123      152         // PWM1 Generator 2
N#define INT_PWM1_3_TM4C123      153         // PWM1 Generator 3
N#define INT_PWM1_FAULT_TM4C123  154         // PWM1 Fault
N#define NUM_INTERRUPTS_TM4C123  155
N
N//*****************************************************************************
N//
N// TM4C129 Class Interrupts
N//
N//*****************************************************************************
N#define INT_GPIOA_TM4C129       16          // GPIO Port A
N#define INT_GPIOB_TM4C129       17          // GPIO Port B
N#define INT_GPIOC_TM4C129       18          // GPIO Port C
N#define INT_GPIOD_TM4C129       19          // GPIO Port D
N#define INT_GPIOE_TM4C129       20          // GPIO Port E
N#define INT_UART0_TM4C129       21          // UART0
N#define INT_UART1_TM4C129       22          // UART1
N#define INT_SSI0_TM4C129        23          // SSI0
N#define INT_I2C0_TM4C129        24          // I2C0
N#define INT_PWM0_FAULT_TM4C129  25          // PWM Fault
N#define INT_PWM0_0_TM4C129      26          // PWM Generator 0
N#define INT_PWM0_1_TM4C129      27          // PWM Generator 1
N#define INT_PWM0_2_TM4C129      28          // PWM Generator 2
N#define INT_QEI0_TM4C129        29          // QEI0
N#define INT_ADC0SS0_TM4C129     30          // ADC0 Sequence 0
N#define INT_ADC0SS1_TM4C129     31          // ADC0 Sequence 1
N#define INT_ADC0SS2_TM4C129     32          // ADC0 Sequence 2
N#define INT_ADC0SS3_TM4C129     33          // ADC0 Sequence 3
N#define INT_WATCHDOG_TM4C129    34          // Watchdog Timers 0 and 1
N#define INT_TIMER0A_TM4C129     35          // 16/32-Bit Timer 0A
N#define INT_TIMER0B_TM4C129     36          // 16/32-Bit Timer 0B
N#define INT_TIMER1A_TM4C129     37          // 16/32-Bit Timer 1A
N#define INT_TIMER1B_TM4C129     38          // 16/32-Bit Timer 1B
N#define INT_TIMER2A_TM4C129     39          // 16/32-Bit Timer 2A
N#define INT_TIMER2B_TM4C129     40          // 16/32-Bit Timer 2B
N#define INT_COMP0_TM4C129       41          // Analog Comparator 0
N#define INT_COMP1_TM4C129       42          // Analog Comparator 1
N#define INT_COMP2_TM4C129       43          // Analog Comparator 2
N#define INT_SYSCTL_TM4C129      44          // System Control
N#define INT_FLASH_TM4C129       45          // Flash Memory Control
N#define INT_GPIOF_TM4C129       46          // GPIO Port F
N#define INT_GPIOG_TM4C129       47          // GPIO Port G
N#define INT_GPIOH_TM4C129       48          // GPIO Port H
N#define INT_UART2_TM4C129       49          // UART2
N#define INT_SSI1_TM4C129        50          // SSI1
N#define INT_TIMER3A_TM4C129     51          // 16/32-Bit Timer 3A
N#define INT_TIMER3B_TM4C129     52          // 16/32-Bit Timer 3B
N#define INT_I2C1_TM4C129        53          // I2C1
N#define INT_CAN0_TM4C129        54          // CAN 0
N#define INT_CAN1_TM4C129        55          // CAN1
N#define INT_EMAC0_TM4C129       56          // Ethernet MAC
N#define INT_HIBERNATE_TM4C129   57          // HIB
N#define INT_USB0_TM4C129        58          // USB MAC
N#define INT_PWM0_3_TM4C129      59          // PWM Generator 3
N#define INT_UDMA_TM4C129        60          // uDMA 0 Software
N#define INT_UDMAERR_TM4C129     61          // uDMA 0 Error
N#define INT_ADC1SS0_TM4C129     62          // ADC1 Sequence 0
N#define INT_ADC1SS1_TM4C129     63          // ADC1 Sequence 1
N#define INT_ADC1SS2_TM4C129     64          // ADC1 Sequence 2
N#define INT_ADC1SS3_TM4C129     65          // ADC1 Sequence 3
N#define INT_EPI0_TM4C129        66          // EPI 0
N#define INT_GPIOJ_TM4C129       67          // GPIO Port J
N#define INT_GPIOK_TM4C129       68          // GPIO Port K
N#define INT_GPIOL_TM4C129       69          // GPIO Port L
N#define INT_SSI2_TM4C129        70          // SSI 2
N#define INT_SSI3_TM4C129        71          // SSI 3
N#define INT_UART3_TM4C129       72          // UART 3
N#define INT_UART4_TM4C129       73          // UART 4
N#define INT_UART5_TM4C129       74          // UART 5
N#define INT_UART6_TM4C129       75          // UART 6
N#define INT_UART7_TM4C129       76          // UART 7
N#define INT_I2C2_TM4C129        77          // I2C 2
N#define INT_I2C3_TM4C129        78          // I2C 3
N#define INT_TIMER4A_TM4C129     79          // Timer 4A
N#define INT_TIMER4B_TM4C129     80          // Timer 4B
N#define INT_TIMER5A_TM4C129     81          // Timer 5A
N#define INT_TIMER5B_TM4C129     82          // Timer 5B
N#define INT_SYSEXC_TM4C129      83          // Floating-Point Exception
N                                            // (imprecise)
N#define INT_I2C4_TM4C129        86          // I2C 4
N#define INT_I2C5_TM4C129        87          // I2C 5
N#define INT_GPIOM_TM4C129       88          // GPIO Port M
N#define INT_GPION_TM4C129       89          // GPIO Port N
N#define INT_TAMPER0_TM4C129     91          // Tamper
N#define INT_GPIOP0_TM4C129      92          // GPIO Port P (Summary or P0)
N#define INT_GPIOP1_TM4C129      93          // GPIO Port P1
N#define INT_GPIOP2_TM4C129      94          // GPIO Port P2
N#define INT_GPIOP3_TM4C129      95          // GPIO Port P3
N#define INT_GPIOP4_TM4C129      96          // GPIO Port P4
N#define INT_GPIOP5_TM4C129      97          // GPIO Port P5
N#define INT_GPIOP6_TM4C129      98          // GPIO Port P6
N#define INT_GPIOP7_TM4C129      99          // GPIO Port P7
N#define INT_GPIOQ0_TM4C129      100         // GPIO Port Q (Summary or Q0)
N#define INT_GPIOQ1_TM4C129      101         // GPIO Port Q1
N#define INT_GPIOQ2_TM4C129      102         // GPIO Port Q2
N#define INT_GPIOQ3_TM4C129      103         // GPIO Port Q3
N#define INT_GPIOQ4_TM4C129      104         // GPIO Port Q4
N#define INT_GPIOQ5_TM4C129      105         // GPIO Port Q5
N#define INT_GPIOQ6_TM4C129      106         // GPIO Port Q6
N#define INT_GPIOQ7_TM4C129      107         // GPIO Port Q7
N#define INT_GPIOR_TM4C129       108         // GPIO Port R
N#define INT_GPIOS_TM4C129       109         // GPIO Port S
N#define INT_SHA0_TM4C129        110         // SHA/MD5
N#define INT_AES0_TM4C129        111         // AES
N#define INT_DES0_TM4C129        112         // DES
N#define INT_LCD0_TM4C129        113         // LCD
N#define INT_TIMER6A_TM4C129     114         // 16/32-Bit Timer 6A
N#define INT_TIMER6B_TM4C129     115         // 16/32-Bit Timer 6B
N#define INT_TIMER7A_TM4C129     116         // 16/32-Bit Timer 7A
N#define INT_TIMER7B_TM4C129     117         // 16/32-Bit Timer 7B
N#define INT_I2C6_TM4C129        118         // I2C 6
N#define INT_I2C7_TM4C129        119         // I2C 7
N#define INT_ONEWIRE0_TM4C129    121         // 1-Wire
N#define INT_I2C8_TM4C129        125         // I2C 8
N#define INT_I2C9_TM4C129        126         // I2C 9
N#define INT_GPIOT_TM4C129       127         // GPIO T
N#define NUM_INTERRUPTS_TM4C129  129
N
N//*****************************************************************************
N//
N// TM4C123 Interrupt Class Definition
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) || defined(TARGET_IS_TM4C123_RA2) || \
N    defined(TARGET_IS_TM4C123_RA3) || defined(TARGET_IS_TM4C123_RB0) || \
N    defined(TARGET_IS_TM4C123_RB1) || defined(PART_TM4C1230C3PM) || \
N    defined(PART_TM4C1230D5PM) || defined(PART_TM4C1230E6PM) || \
N    defined(PART_TM4C1230H6PM) || defined(PART_TM4C1231C3PM) || \
N    defined(PART_TM4C1231D5PM) || defined(PART_TM4C1231D5PZ) || \
N    defined(PART_TM4C1231E6PM) || defined(PART_TM4C1231E6PZ) || \
N    defined(PART_TM4C1231H6PM) || defined(PART_TM4C1231H6PZ) || \
N    defined(PART_TM4C1232C3PM) || defined(PART_TM4C1232D5PM) || \
N    defined(PART_TM4C1232E6PM) || defined(PART_TM4C1232H6PM) || \
N    defined(PART_TM4C1233C3PM) || defined(PART_TM4C1233D5PM) || \
N    defined(PART_TM4C1233D5PZ) || defined(PART_TM4C1233E6PM) || \
N    defined(PART_TM4C1233E6PZ) || defined(PART_TM4C1233H6PM) || \
N    defined(PART_TM4C1233H6PZ) || defined(PART_TM4C1236D5PM) || \
N    defined(PART_TM4C1236E6PM) || defined(PART_TM4C1236H6PM) || \
N    defined(PART_TM4C1237D5PM) || defined(PART_TM4C1237D5PZ) || \
N    defined(PART_TM4C1237E6PM) || defined(PART_TM4C1237E6PZ) || \
N    defined(PART_TM4C1237H6PM) || defined(PART_TM4C1237H6PZ) || \
N    defined(PART_TM4C123AE6PM) || defined(PART_TM4C123AH6PM) || \
N    defined(PART_TM4C123BE6PM) || defined(PART_TM4C123BE6PZ) || \
N    defined(PART_TM4C123BH6PM) || defined(PART_TM4C123BH6PZ) || \
N    defined(PART_TM4C123FE6PM) || defined(PART_TM4C123FH6PM) || \
N    defined(PART_TM4C123GE6PM) || defined(PART_TM4C123GE6PZ) || \
N    defined(PART_TM4C123GH6PM) || defined(PART_TM4C123GH6PZ) || \
N    defined(PART_TM4C1231H6PGE) || defined(PART_TM4C1233H6PGE) || \
N    defined(PART_TM4C1237H6PGE) || defined(PART_TM4C123BH6PGE) || \
N    defined(PART_TM4C123BH6ZRB) || defined(PART_TM4C123GH6PGE) || \
N    defined(PART_TM4C123GH6ZRB)
X#if 0L || 0L ||     1L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     1L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L
N#define INT_RESOLVE(intname, class) intname##TM4C123
N
N//*****************************************************************************
N//
N// TM4C129 Interrupt Class Definition
N//
N//*****************************************************************************
N#elif defined(TARGET_IS_TM4C129_RA0) || defined(PART_TM4C1290NCPDT) || \
N    defined(PART_TM4C1290NCZAD) || defined(PART_TM4C1292NCPDT) || \
N    defined(PART_TM4C1292NCZAD) || defined(PART_TM4C1294KCPDT) || \
N    defined(PART_TM4C1294NCPDT) || defined(PART_TM4C1294NCZAD) || \
N    defined(PART_TM4C1297NCZAD) || defined(PART_TM4C1299KCZAD) || \
N    defined(PART_TM4C1299NCZAD) || defined(PART_TM4C129CNCPDT) || \
N    defined(PART_TM4C129CNCZAD) || defined(PART_TM4C129DNCPDT) || \
N    defined(PART_TM4C129DNCZAD) || defined(PART_TM4C129EKCPDT) || \
N    defined(PART_TM4C129ENCPDT) || defined(PART_TM4C129ENCZAD) || \
N    defined(PART_TM4C129LNCZAD) || defined(PART_TM4C129XKCZAD) || \
N    defined(PART_TM4C129XNCZAD)
X#elif defined(TARGET_IS_TM4C129_RA0) || defined(PART_TM4C1290NCPDT) ||     defined(PART_TM4C1290NCZAD) || defined(PART_TM4C1292NCPDT) ||     defined(PART_TM4C1292NCZAD) || defined(PART_TM4C1294KCPDT) ||     defined(PART_TM4C1294NCPDT) || defined(PART_TM4C1294NCZAD) ||     defined(PART_TM4C1297NCZAD) || defined(PART_TM4C1299KCZAD) ||     defined(PART_TM4C1299NCZAD) || defined(PART_TM4C129CNCPDT) ||     defined(PART_TM4C129CNCZAD) || defined(PART_TM4C129DNCPDT) ||     defined(PART_TM4C129DNCZAD) || defined(PART_TM4C129EKCPDT) ||     defined(PART_TM4C129ENCPDT) || defined(PART_TM4C129ENCZAD) ||     defined(PART_TM4C129LNCZAD) || defined(PART_TM4C129XKCZAD) ||     defined(PART_TM4C129XNCZAD)
S#define INT_RESOLVE(intname, class) intname##TM4C129
S#else
S#define INT_DEVICE_CLASS        "UNKNOWN"
N#endif
N
N//*****************************************************************************
N//
N// Macros to resolve the INT_PERIPH_CLASS name to a common INT_PERIPH name.
N//
N//*****************************************************************************
N#define INT_CONCAT(intname, class)  INT_RESOLVE(intname, class)
N
N//*****************************************************************************
N//
N// The following are defines for the interrupt assignments.
N//
N//*****************************************************************************
N#define INT_ADC0SS0             INT_CONCAT(INT_ADC0SS0_, INT_DEVICE_CLASS)
N#define INT_ADC0SS1             INT_CONCAT(INT_ADC0SS1_, INT_DEVICE_CLASS)
N#define INT_ADC0SS2             INT_CONCAT(INT_ADC0SS2_, INT_DEVICE_CLASS)
N#define INT_ADC0SS3             INT_CONCAT(INT_ADC0SS3_, INT_DEVICE_CLASS)
N#define INT_ADC1SS0             INT_CONCAT(INT_ADC1SS0_, INT_DEVICE_CLASS)
N#define INT_ADC1SS1             INT_CONCAT(INT_ADC1SS1_, INT_DEVICE_CLASS)
N#define INT_ADC1SS2             INT_CONCAT(INT_ADC1SS2_, INT_DEVICE_CLASS)
N#define INT_ADC1SS3             INT_CONCAT(INT_ADC1SS3_, INT_DEVICE_CLASS)
N#define INT_AES0                INT_CONCAT(INT_AES0_, INT_DEVICE_CLASS)
N#define INT_CAN0                INT_CONCAT(INT_CAN0_, INT_DEVICE_CLASS)
N#define INT_CAN1                INT_CONCAT(INT_CAN1_, INT_DEVICE_CLASS)
N#define INT_COMP0               INT_CONCAT(INT_COMP0_, INT_DEVICE_CLASS)
N#define INT_COMP1               INT_CONCAT(INT_COMP1_, INT_DEVICE_CLASS)
N#define INT_COMP2               INT_CONCAT(INT_COMP2_, INT_DEVICE_CLASS)
N#define INT_DES0                INT_CONCAT(INT_DES0_, INT_DEVICE_CLASS)
N#define INT_EMAC0               INT_CONCAT(INT_EMAC0_, INT_DEVICE_CLASS)
N#define INT_EPI0                INT_CONCAT(INT_EPI0_, INT_DEVICE_CLASS)
N#define INT_FLASH               INT_CONCAT(INT_FLASH_, INT_DEVICE_CLASS)
N#define INT_GPIOA               INT_CONCAT(INT_GPIOA_, INT_DEVICE_CLASS)
N#define INT_GPIOB               INT_CONCAT(INT_GPIOB_, INT_DEVICE_CLASS)
N#define INT_GPIOC               INT_CONCAT(INT_GPIOC_, INT_DEVICE_CLASS)
N#define INT_GPIOD               INT_CONCAT(INT_GPIOD_, INT_DEVICE_CLASS)
N#define INT_GPIOE               INT_CONCAT(INT_GPIOE_, INT_DEVICE_CLASS)
N#define INT_GPIOF               INT_CONCAT(INT_GPIOF_, INT_DEVICE_CLASS)
N#define INT_GPIOG               INT_CONCAT(INT_GPIOG_, INT_DEVICE_CLASS)
N#define INT_GPIOH               INT_CONCAT(INT_GPIOH_, INT_DEVICE_CLASS)
N#define INT_GPIOJ               INT_CONCAT(INT_GPIOJ_, INT_DEVICE_CLASS)
N#define INT_GPIOK               INT_CONCAT(INT_GPIOK_, INT_DEVICE_CLASS)
N#define INT_GPIOL               INT_CONCAT(INT_GPIOL_, INT_DEVICE_CLASS)
N#define INT_GPIOM               INT_CONCAT(INT_GPIOM_, INT_DEVICE_CLASS)
N#define INT_GPION               INT_CONCAT(INT_GPION_, INT_DEVICE_CLASS)
N#define INT_GPIOP0              INT_CONCAT(INT_GPIOP0_, INT_DEVICE_CLASS)
N#define INT_GPIOP1              INT_CONCAT(INT_GPIOP1_, INT_DEVICE_CLASS)
N#define INT_GPIOP2              INT_CONCAT(INT_GPIOP2_, INT_DEVICE_CLASS)
N#define INT_GPIOP3              INT_CONCAT(INT_GPIOP3_, INT_DEVICE_CLASS)
N#define INT_GPIOP4              INT_CONCAT(INT_GPIOP4_, INT_DEVICE_CLASS)
N#define INT_GPIOP5              INT_CONCAT(INT_GPIOP5_, INT_DEVICE_CLASS)
N#define INT_GPIOP6              INT_CONCAT(INT_GPIOP6_, INT_DEVICE_CLASS)
N#define INT_GPIOP7              INT_CONCAT(INT_GPIOP7_, INT_DEVICE_CLASS)
N#define INT_GPIOQ0              INT_CONCAT(INT_GPIOQ0_, INT_DEVICE_CLASS)
N#define INT_GPIOQ1              INT_CONCAT(INT_GPIOQ1_, INT_DEVICE_CLASS)
N#define INT_GPIOQ2              INT_CONCAT(INT_GPIOQ2_, INT_DEVICE_CLASS)
N#define INT_GPIOQ3              INT_CONCAT(INT_GPIOQ3_, INT_DEVICE_CLASS)
N#define INT_GPIOQ4              INT_CONCAT(INT_GPIOQ4_, INT_DEVICE_CLASS)
N#define INT_GPIOQ5              INT_CONCAT(INT_GPIOQ5_, INT_DEVICE_CLASS)
N#define INT_GPIOQ6              INT_CONCAT(INT_GPIOQ6_, INT_DEVICE_CLASS)
N#define INT_GPIOQ7              INT_CONCAT(INT_GPIOQ7_, INT_DEVICE_CLASS)
N#define INT_GPIOR               INT_CONCAT(INT_GPIOR_, INT_DEVICE_CLASS)
N#define INT_GPIOS               INT_CONCAT(INT_GPIOS_, INT_DEVICE_CLASS)
N#define INT_GPIOT               INT_CONCAT(INT_GPIOT_, INT_DEVICE_CLASS)
N#define INT_HIBERNATE           INT_CONCAT(INT_HIBERNATE_, INT_DEVICE_CLASS)
N#define INT_I2C0                INT_CONCAT(INT_I2C0_, INT_DEVICE_CLASS)
N#define INT_I2C1                INT_CONCAT(INT_I2C1_, INT_DEVICE_CLASS)
N#define INT_I2C2                INT_CONCAT(INT_I2C2_, INT_DEVICE_CLASS)
N#define INT_I2C3                INT_CONCAT(INT_I2C3_, INT_DEVICE_CLASS)
N#define INT_I2C4                INT_CONCAT(INT_I2C4_, INT_DEVICE_CLASS)
N#define INT_I2C5                INT_CONCAT(INT_I2C5_, INT_DEVICE_CLASS)
N#define INT_I2C6                INT_CONCAT(INT_I2C6_, INT_DEVICE_CLASS)
N#define INT_I2C7                INT_CONCAT(INT_I2C7_, INT_DEVICE_CLASS)
N#define INT_I2C8                INT_CONCAT(INT_I2C8_, INT_DEVICE_CLASS)
N#define INT_I2C9                INT_CONCAT(INT_I2C9_, INT_DEVICE_CLASS)
N#define INT_LCD0                INT_CONCAT(INT_LCD0_, INT_DEVICE_CLASS)
N#define INT_ONEWIRE0            INT_CONCAT(INT_ONEWIRE0_, INT_DEVICE_CLASS)
N#define INT_PWM0_0              INT_CONCAT(INT_PWM0_0_, INT_DEVICE_CLASS)
N#define INT_PWM0_1              INT_CONCAT(INT_PWM0_1_, INT_DEVICE_CLASS)
N#define INT_PWM0_2              INT_CONCAT(INT_PWM0_2_, INT_DEVICE_CLASS)
N#define INT_PWM0_3              INT_CONCAT(INT_PWM0_3_, INT_DEVICE_CLASS)
N#define INT_PWM0_FAULT          INT_CONCAT(INT_PWM0_FAULT_, INT_DEVICE_CLASS)
N#define INT_PWM1_0              INT_CONCAT(INT_PWM1_0_, INT_DEVICE_CLASS)
N#define INT_PWM1_1              INT_CONCAT(INT_PWM1_1_, INT_DEVICE_CLASS)
N#define INT_PWM1_2              INT_CONCAT(INT_PWM1_2_, INT_DEVICE_CLASS)
N#define INT_PWM1_3              INT_CONCAT(INT_PWM1_3_, INT_DEVICE_CLASS)
N#define INT_PWM1_FAULT          INT_CONCAT(INT_PWM1_FAULT_, INT_DEVICE_CLASS)
N#define INT_QEI0                INT_CONCAT(INT_QEI0_, INT_DEVICE_CLASS)
N#define INT_QEI1                INT_CONCAT(INT_QEI1_, INT_DEVICE_CLASS)
N#define INT_SHA0                INT_CONCAT(INT_SHA0_, INT_DEVICE_CLASS)
N#define INT_SSI0                INT_CONCAT(INT_SSI0_, INT_DEVICE_CLASS)
N#define INT_SSI1                INT_CONCAT(INT_SSI1_, INT_DEVICE_CLASS)
N#define INT_SSI2                INT_CONCAT(INT_SSI2_, INT_DEVICE_CLASS)
N#define INT_SSI3                INT_CONCAT(INT_SSI3_, INT_DEVICE_CLASS)
N#define INT_SYSCTL              INT_CONCAT(INT_SYSCTL_, INT_DEVICE_CLASS)
N#define INT_SYSEXC              INT_CONCAT(INT_SYSEXC_, INT_DEVICE_CLASS)
N#define INT_TAMPER0             INT_CONCAT(INT_TAMPER0_, INT_DEVICE_CLASS)
N#define INT_TIMER0A             INT_CONCAT(INT_TIMER0A_, INT_DEVICE_CLASS)
N#define INT_TIMER0B             INT_CONCAT(INT_TIMER0B_, INT_DEVICE_CLASS)
N#define INT_TIMER1A             INT_CONCAT(INT_TIMER1A_, INT_DEVICE_CLASS)
N#define INT_TIMER1B             INT_CONCAT(INT_TIMER1B_, INT_DEVICE_CLASS)
N#define INT_TIMER2A             INT_CONCAT(INT_TIMER2A_, INT_DEVICE_CLASS)
N#define INT_TIMER2B             INT_CONCAT(INT_TIMER2B_, INT_DEVICE_CLASS)
N#define INT_TIMER3A             INT_CONCAT(INT_TIMER3A_, INT_DEVICE_CLASS)
N#define INT_TIMER3B             INT_CONCAT(INT_TIMER3B_, INT_DEVICE_CLASS)
N#define INT_TIMER4A             INT_CONCAT(INT_TIMER4A_, INT_DEVICE_CLASS)
N#define INT_TIMER4B             INT_CONCAT(INT_TIMER4B_, INT_DEVICE_CLASS)
N#define INT_TIMER5A             INT_CONCAT(INT_TIMER5A_, INT_DEVICE_CLASS)
N#define INT_TIMER5B             INT_CONCAT(INT_TIMER5B_, INT_DEVICE_CLASS)
N#define INT_TIMER6A             INT_CONCAT(INT_TIMER6A_, INT_DEVICE_CLASS)
N#define INT_TIMER6B             INT_CONCAT(INT_TIMER6B_, INT_DEVICE_CLASS)
N#define INT_TIMER7A             INT_CONCAT(INT_TIMER7A_, INT_DEVICE_CLASS)
N#define INT_TIMER7B             INT_CONCAT(INT_TIMER7B_, INT_DEVICE_CLASS)
N#define INT_UART0               INT_CONCAT(INT_UART0_, INT_DEVICE_CLASS)
N#define INT_UART1               INT_CONCAT(INT_UART1_, INT_DEVICE_CLASS)
N#define INT_UART2               INT_CONCAT(INT_UART2_, INT_DEVICE_CLASS)
N#define INT_UART3               INT_CONCAT(INT_UART3_, INT_DEVICE_CLASS)
N#define INT_UART4               INT_CONCAT(INT_UART4_, INT_DEVICE_CLASS)
N#define INT_UART5               INT_CONCAT(INT_UART5_, INT_DEVICE_CLASS)
N#define INT_UART6               INT_CONCAT(INT_UART6_, INT_DEVICE_CLASS)
N#define INT_UART7               INT_CONCAT(INT_UART7_, INT_DEVICE_CLASS)
N#define INT_UDMA                INT_CONCAT(INT_UDMA_, INT_DEVICE_CLASS)
N#define INT_UDMAERR             INT_CONCAT(INT_UDMAERR_, INT_DEVICE_CLASS)
N#define INT_USB0                INT_CONCAT(INT_USB0_, INT_DEVICE_CLASS)
N#define INT_WATCHDOG            INT_CONCAT(INT_WATCHDOG_, INT_DEVICE_CLASS)
N#define INT_WTIMER0A            INT_CONCAT(INT_WTIMER0A_, INT_DEVICE_CLASS)
N#define INT_WTIMER0B            INT_CONCAT(INT_WTIMER0B_, INT_DEVICE_CLASS)
N#define INT_WTIMER1A            INT_CONCAT(INT_WTIMER1A_, INT_DEVICE_CLASS)
N#define INT_WTIMER1B            INT_CONCAT(INT_WTIMER1B_, INT_DEVICE_CLASS)
N#define INT_WTIMER2A            INT_CONCAT(INT_WTIMER2A_, INT_DEVICE_CLASS)
N#define INT_WTIMER2B            INT_CONCAT(INT_WTIMER2B_, INT_DEVICE_CLASS)
N#define INT_WTIMER3A            INT_CONCAT(INT_WTIMER3A_, INT_DEVICE_CLASS)
N#define INT_WTIMER3B            INT_CONCAT(INT_WTIMER3B_, INT_DEVICE_CLASS)
N#define INT_WTIMER4A            INT_CONCAT(INT_WTIMER4A_, INT_DEVICE_CLASS)
N#define INT_WTIMER4B            INT_CONCAT(INT_WTIMER4B_, INT_DEVICE_CLASS)
N#define INT_WTIMER5A            INT_CONCAT(INT_WTIMER5A_, INT_DEVICE_CLASS)
N#define INT_WTIMER5B            INT_CONCAT(INT_WTIMER5B_, INT_DEVICE_CLASS)
N
N//*****************************************************************************
N//
N// The following are defines for the total number of interrupts.
N//
N//*****************************************************************************
N#define NUM_INTERRUPTS          INT_CONCAT(NUM_INTERRUPTS_, INT_DEVICE_CLASS)
N
N//*****************************************************************************
N//
N// The following are defines for the total number of priority levels.
N//
N//*****************************************************************************
N#define NUM_PRIORITY            8
N#define NUM_PRIORITY_BITS       3
N
N#endif // __HW_INTS_H__
L 15 "..\inc_h\system.h" 2
N#include <hw_sysctl.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_sysctl.h" 1
N//*****************************************************************************
N//
N// hw_sysctl.h - Macros used when accessing the system control hardware.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_SYSCTL_H__
N#define __HW_SYSCTL_H__
N
N//*****************************************************************************
N//
N// The following are defines for the System Control register addresses.
N//
N//*****************************************************************************
N#define SYSCTL_DID0             0x400FE000  // Device Identification 0
N#define SYSCTL_DID1             0x400FE004  // Device Identification 1
N#define SYSCTL_DC0              0x400FE008  // Device Capabilities 0
N#define SYSCTL_DC1              0x400FE010  // Device Capabilities 1
N#define SYSCTL_DC2              0x400FE014  // Device Capabilities 2
N#define SYSCTL_DC3              0x400FE018  // Device Capabilities 3
N#define SYSCTL_DC4              0x400FE01C  // Device Capabilities 4
N#define SYSCTL_DC5              0x400FE020  // Device Capabilities 5
N#define SYSCTL_DC6              0x400FE024  // Device Capabilities 6
N#define SYSCTL_DC7              0x400FE028  // Device Capabilities 7
N#define SYSCTL_DC8              0x400FE02C  // Device Capabilities 8
N#define SYSCTL_PBORCTL          0x400FE030  // Brown-Out Reset Control
N#define SYSCTL_PTBOCTL          0x400FE038  // Power-Temp Brown Out Control
N#define SYSCTL_SRCR0            0x400FE040  // Software Reset Control 0
N#define SYSCTL_SRCR1            0x400FE044  // Software Reset Control 1
N#define SYSCTL_SRCR2            0x400FE048  // Software Reset Control 2
N#define SYSCTL_RIS              0x400FE050  // Raw Interrupt Status
N#define SYSCTL_IMC              0x400FE054  // Interrupt Mask Control
N#define SYSCTL_MISC             0x400FE058  // Masked Interrupt Status and
N                                            // Clear
N#define SYSCTL_RESC             0x400FE05C  // Reset Cause
N#define SYSCTL_PWRTC            0x400FE060  // Power-Temperature Cause
N#define SYSCTL_RCC              0x400FE060  // Run-Mode Clock Configuration
N#define SYSCTL_NMIC             0x400FE064  // NMI Cause Register
N#define SYSCTL_GPIOHBCTL        0x400FE06C  // GPIO High-Performance Bus
N                                            // Control
N#define SYSCTL_RCC2             0x400FE070  // Run-Mode Clock Configuration 2
N#define SYSCTL_MOSCCTL          0x400FE07C  // Main Oscillator Control
N#define SYSCTL_RSCLKCFG         0x400FE0B0  // Run and Sleep Mode Configuration
N                                            // Register
N#define SYSCTL_MEMTIM0          0x400FE0C0  // Memory Timing Parameter Register
N                                            // 0 for Main Flash and EEPROM
N#define SYSCTL_RCGC0            0x400FE100  // Run Mode Clock Gating Control
N                                            // Register 0
N#define SYSCTL_RCGC1            0x400FE104  // Run Mode Clock Gating Control
N                                            // Register 1
N#define SYSCTL_RCGC2            0x400FE108  // Run Mode Clock Gating Control
N                                            // Register 2
N#define SYSCTL_SCGC0            0x400FE110  // Sleep Mode Clock Gating Control
N                                            // Register 0
N#define SYSCTL_SCGC1            0x400FE114  // Sleep Mode Clock Gating Control
N                                            // Register 1
N#define SYSCTL_SCGC2            0x400FE118  // Sleep Mode Clock Gating Control
N                                            // Register 2
N#define SYSCTL_DCGC0            0x400FE120  // Deep Sleep Mode Clock Gating
N                                            // Control Register 0
N#define SYSCTL_DCGC1            0x400FE124  // Deep-Sleep Mode Clock Gating
N                                            // Control Register 1
N#define SYSCTL_DCGC2            0x400FE128  // Deep Sleep Mode Clock Gating
N                                            // Control Register 2
N#define SYSCTL_ALTCLKCFG        0x400FE138  // Alternate Clock Configuration
N#define SYSCTL_DSLPCLKCFG       0x400FE144  // Deep Sleep Clock Configuration
N#define SYSCTL_DSCLKCFG         0x400FE144  // Deep Sleep Clock Configuration
N                                            // Register
N#define SYSCTL_DIVSCLK          0x400FE148  // Divisor and Source Clock
N                                            // Configuration
N#define SYSCTL_SYSPROP          0x400FE14C  // System Properties
N#define SYSCTL_PIOSCCAL         0x400FE150  // Precision Internal Oscillator
N                                            // Calibration
N#define SYSCTL_PIOSCSTAT        0x400FE154  // Precision Internal Oscillator
N                                            // Statistics
N#define SYSCTL_PLLFREQ0         0x400FE160  // PLL Frequency 0
N#define SYSCTL_PLLFREQ1         0x400FE164  // PLL Frequency 1
N#define SYSCTL_PLLSTAT          0x400FE168  // PLL Status
N#define SYSCTL_SLPPWRCFG        0x400FE188  // Sleep Power Configuration
N#define SYSCTL_DSLPPWRCFG       0x400FE18C  // Deep-Sleep Power Configuration
N#define SYSCTL_DC9              0x400FE190  // Device Capabilities 9
N#define SYSCTL_NVMSTAT          0x400FE1A0  // Non-Volatile Memory Information
N#define SYSCTL_LDOSPCTL         0x400FE1B4  // LDO Sleep Power Control
N#define SYSCTL_LDODPCTL         0x400FE1BC  // LDO Deep-Sleep Power Control
N#define SYSCTL_RESBEHAVCTL      0x400FE1D8  // Reset Behavior Control Register
N#define SYSCTL_HSSR             0x400FE1F4  // Hardware System Service Request
N#define SYSCTL_USBPDS           0x400FE280  // USB Power Domain Status
N#define SYSCTL_USBMPC           0x400FE284  // USB Memory Power Control
N#define SYSCTL_EMACPDS          0x400FE288  // Ethernet MAC Power Domain Status
N#define SYSCTL_EMACMPC          0x400FE28C  // Ethernet MAC Memory Power
N                                            // Control
N#define SYSCTL_LCDMPC           0x400FE294  // LCD Memory Power Control
N#define SYSCTL_PPWD             0x400FE300  // Watchdog Timer Peripheral
N                                            // Present
N#define SYSCTL_PPTIMER          0x400FE304  // 16/32-Bit General-Purpose Timer
N                                            // Peripheral Present
N#define SYSCTL_PPGPIO           0x400FE308  // General-Purpose Input/Output
N                                            // Peripheral Present
N#define SYSCTL_PPDMA            0x400FE30C  // Micro Direct Memory Access
N                                            // Peripheral Present
N#define SYSCTL_PPEPI            0x400FE310  // EPI Peripheral Present
N#define SYSCTL_PPHIB            0x400FE314  // Hibernation Peripheral Present
N#define SYSCTL_PPUART           0x400FE318  // Universal Asynchronous
N                                            // Receiver/Transmitter Peripheral
N                                            // Present
N#define SYSCTL_PPSSI            0x400FE31C  // Synchronous Serial Interface
N                                            // Peripheral Present
N#define SYSCTL_PPI2C            0x400FE320  // Inter-Integrated Circuit
N                                            // Peripheral Present
N#define SYSCTL_PPUSB            0x400FE328  // Universal Serial Bus Peripheral
N                                            // Present
N#define SYSCTL_PPEPHY           0x400FE330  // Ethernet PHY Peripheral Present
N#define SYSCTL_PPCAN            0x400FE334  // Controller Area Network
N                                            // Peripheral Present
N#define SYSCTL_PPADC            0x400FE338  // Analog-to-Digital Converter
N                                            // Peripheral Present
N#define SYSCTL_PPACMP           0x400FE33C  // Analog Comparator Peripheral
N                                            // Present
N#define SYSCTL_PPPWM            0x400FE340  // Pulse Width Modulator Peripheral
N                                            // Present
N#define SYSCTL_PPQEI            0x400FE344  // Quadrature Encoder Interface
N                                            // Peripheral Present
N#define SYSCTL_PPLPC            0x400FE348  // Low Pin Count Interface
N                                            // Peripheral Present
N#define SYSCTL_PPPECI           0x400FE350  // Platform Environment Control
N                                            // Interface Peripheral Present
N#define SYSCTL_PPFAN            0x400FE354  // Fan Control Peripheral Present
N#define SYSCTL_PPEEPROM         0x400FE358  // EEPROM Peripheral Present
N#define SYSCTL_PPWTIMER         0x400FE35C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Peripheral Present
N#define SYSCTL_PPRTS            0x400FE370  // Remote Temperature Sensor
N                                            // Peripheral Present
N#define SYSCTL_PPCCM            0x400FE374  // CRC and Cryptographic Modules
N                                            // Peripheral Present
N#define SYSCTL_PPLCD            0x400FE390  // LCD Peripheral Present
N#define SYSCTL_PPOWIRE          0x400FE398  // 1-Wire Peripheral Present
N#define SYSCTL_PPEMAC           0x400FE39C  // Ethernet MAC Peripheral Present
N#define SYSCTL_PPHIM            0x400FE3A4  // Human Interface Master
N                                            // Peripheral Present
N#define SYSCTL_SRWD             0x400FE500  // Watchdog Timer Software Reset
N#define SYSCTL_SRTIMER          0x400FE504  // 16/32-Bit General-Purpose Timer
N                                            // Software Reset
N#define SYSCTL_SRGPIO           0x400FE508  // General-Purpose Input/Output
N                                            // Software Reset
N#define SYSCTL_SRDMA            0x400FE50C  // Micro Direct Memory Access
N                                            // Software Reset
N#define SYSCTL_SREPI            0x400FE510  // EPI Software Reset
N#define SYSCTL_SRHIB            0x400FE514  // Hibernation Software Reset
N#define SYSCTL_SRUART           0x400FE518  // Universal Asynchronous
N                                            // Receiver/Transmitter Software
N                                            // Reset
N#define SYSCTL_SRSSI            0x400FE51C  // Synchronous Serial Interface
N                                            // Software Reset
N#define SYSCTL_SRI2C            0x400FE520  // Inter-Integrated Circuit
N                                            // Software Reset
N#define SYSCTL_SRUSB            0x400FE528  // Universal Serial Bus Software
N                                            // Reset
N#define SYSCTL_SREPHY           0x400FE530  // Ethernet PHY Software Reset
N#define SYSCTL_SRCAN            0x400FE534  // Controller Area Network Software
N                                            // Reset
N#define SYSCTL_SRADC            0x400FE538  // Analog-to-Digital Converter
N                                            // Software Reset
N#define SYSCTL_SRACMP           0x400FE53C  // Analog Comparator Software Reset
N#define SYSCTL_SRPWM            0x400FE540  // Pulse Width Modulator Software
N                                            // Reset
N#define SYSCTL_SRQEI            0x400FE544  // Quadrature Encoder Interface
N                                            // Software Reset
N#define SYSCTL_SREEPROM         0x400FE558  // EEPROM Software Reset
N#define SYSCTL_SRWTIMER         0x400FE55C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Software Reset
N#define SYSCTL_SRCCM            0x400FE574  // CRC and Cryptographic Modules
N                                            // Software Reset
N#define SYSCTL_SRLCD            0x400FE590  // LCD Controller Software Reset
N#define SYSCTL_SROWIRE          0x400FE598  // 1-Wire Software Reset
N#define SYSCTL_SREMAC           0x400FE59C  // Ethernet MAC Software Reset
N#define SYSCTL_RCGCWD           0x400FE600  // Watchdog Timer Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCTIMER        0x400FE604  // 16/32-Bit General-Purpose Timer
N                                            // Run Mode Clock Gating Control
N#define SYSCTL_RCGCGPIO         0x400FE608  // General-Purpose Input/Output Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCDMA          0x400FE60C  // Micro Direct Memory Access Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCEPI          0x400FE610  // EPI Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCHIB          0x400FE614  // Hibernation Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART         0x400FE618  // Universal Asynchronous
N                                            // Receiver/Transmitter Run Mode
N                                            // Clock Gating Control
N#define SYSCTL_RCGCSSI          0x400FE61C  // Synchronous Serial Interface Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCI2C          0x400FE620  // Inter-Integrated Circuit Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCUSB          0x400FE628  // Universal Serial Bus Run Mode
N                                            // Clock Gating Control
N#define SYSCTL_RCGCEPHY         0x400FE630  // Ethernet PHY Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCCAN          0x400FE634  // Controller Area Network Run Mode
N                                            // Clock Gating Control
N#define SYSCTL_RCGCADC          0x400FE638  // Analog-to-Digital Converter Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCACMP         0x400FE63C  // Analog Comparator Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCPWM          0x400FE640  // Pulse Width Modulator Run Mode
N                                            // Clock Gating Control
N#define SYSCTL_RCGCQEI          0x400FE644  // Quadrature Encoder Interface Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCEEPROM       0x400FE658  // EEPROM Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER       0x400FE65C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCCCM          0x400FE674  // CRC and Cryptographic Modules
N                                            // Run Mode Clock Gating Control
N#define SYSCTL_RCGCLCD          0x400FE690  // LCD Controller Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCOWIRE        0x400FE698  // 1-Wire Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCEMAC         0x400FE69C  // Ethernet MAC Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCWD           0x400FE700  // Watchdog Timer Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCTIMER        0x400FE704  // 16/32-Bit General-Purpose Timer
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCGPIO         0x400FE708  // General-Purpose Input/Output
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCDMA          0x400FE70C  // Micro Direct Memory Access Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_SCGCEPI          0x400FE710  // EPI Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCHIB          0x400FE714  // Hibernation Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART         0x400FE718  // Universal Asynchronous
N                                            // Receiver/Transmitter Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCSSI          0x400FE71C  // Synchronous Serial Interface
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCI2C          0x400FE720  // Inter-Integrated Circuit Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_SCGCUSB          0x400FE728  // Universal Serial Bus Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCEPHY         0x400FE730  // Ethernet PHY Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCCAN          0x400FE734  // Controller Area Network Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_SCGCADC          0x400FE738  // Analog-to-Digital Converter
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCACMP         0x400FE73C  // Analog Comparator Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCPWM          0x400FE740  // Pulse Width Modulator Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCQEI          0x400FE744  // Quadrature Encoder Interface
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCEEPROM       0x400FE758  // EEPROM Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER       0x400FE75C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCCCM          0x400FE774  // CRC and Cryptographic Modules
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCLCD          0x400FE790  // LCD Controller Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCOWIRE        0x400FE798  // 1-Wire Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCEMAC         0x400FE79C  // Ethernet MAC Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWD           0x400FE800  // Watchdog Timer Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCTIMER        0x400FE804  // 16/32-Bit General-Purpose Timer
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCGPIO         0x400FE808  // General-Purpose Input/Output
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCDMA          0x400FE80C  // Micro Direct Memory Access
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCEPI          0x400FE810  // EPI Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCHIB          0x400FE814  // Hibernation Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART         0x400FE818  // Universal Asynchronous
N                                            // Receiver/Transmitter Deep-Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_DCGCSSI          0x400FE81C  // Synchronous Serial Interface
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCI2C          0x400FE820  // Inter-Integrated Circuit
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCUSB          0x400FE828  // Universal Serial Bus Deep-Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_DCGCEPHY         0x400FE830  // Ethernet PHY Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCCAN          0x400FE834  // Controller Area Network
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCADC          0x400FE838  // Analog-to-Digital Converter
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCACMP         0x400FE83C  // Analog Comparator Deep-Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_DCGCPWM          0x400FE840  // Pulse Width Modulator Deep-Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_DCGCQEI          0x400FE844  // Quadrature Encoder Interface
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCEEPROM       0x400FE858  // EEPROM Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER       0x400FE85C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCCCM          0x400FE874  // CRC and Cryptographic Modules
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCLCD          0x400FE890  // LCD Controller Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCOWIRE        0x400FE898  // 1-Wire Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCEMAC         0x400FE89C  // Ethernet MAC Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_PCWD             0x400FE900  // Watchdog Timer Power Control
N#define SYSCTL_PCTIMER          0x400FE904  // 16/32-Bit General-Purpose Timer
N                                            // Power Control
N#define SYSCTL_PCGPIO           0x400FE908  // General-Purpose Input/Output
N                                            // Power Control
N#define SYSCTL_PCDMA            0x400FE90C  // Micro Direct Memory Access Power
N                                            // Control
N#define SYSCTL_PCEPI            0x400FE910  // External Peripheral Interface
N                                            // Power Control
N#define SYSCTL_PCHIB            0x400FE914  // Hibernation Power Control
N#define SYSCTL_PCUART           0x400FE918  // Universal Asynchronous
N                                            // Receiver/Transmitter Power
N                                            // Control
N#define SYSCTL_PCSSI            0x400FE91C  // Synchronous Serial Interface
N                                            // Power Control
N#define SYSCTL_PCI2C            0x400FE920  // Inter-Integrated Circuit Power
N                                            // Control
N#define SYSCTL_PCUSB            0x400FE928  // Universal Serial Bus Power
N                                            // Control
N#define SYSCTL_PCEPHY           0x400FE930  // Ethernet PHY Power Control
N#define SYSCTL_PCCAN            0x400FE934  // Controller Area Network Power
N                                            // Control
N#define SYSCTL_PCADC            0x400FE938  // Analog-to-Digital Converter
N                                            // Power Control
N#define SYSCTL_PCACMP           0x400FE93C  // Analog Comparator Power Control
N#define SYSCTL_PCPWM            0x400FE940  // Pulse Width Modulator Power
N                                            // Control
N#define SYSCTL_PCQEI            0x400FE944  // Quadrature Encoder Interface
N                                            // Power Control
N#define SYSCTL_PCEEPROM         0x400FE958  // EEPROM Power Control
N#define SYSCTL_PCCCM            0x400FE974  // CRC and Cryptographic Modules
N                                            // Power Control
N#define SYSCTL_PCLCD            0x400FE990  // LCD Controller Power Control
N#define SYSCTL_PCOWIRE          0x400FE998  // 1-Wire Power Control
N#define SYSCTL_PCEMAC           0x400FE99C  // Ethernet MAC Power Control
N#define SYSCTL_PRWD             0x400FEA00  // Watchdog Timer Peripheral Ready
N#define SYSCTL_PRTIMER          0x400FEA04  // 16/32-Bit General-Purpose Timer
N                                            // Peripheral Ready
N#define SYSCTL_PRGPIO           0x400FEA08  // General-Purpose Input/Output
N                                            // Peripheral Ready
N#define SYSCTL_PRDMA            0x400FEA0C  // Micro Direct Memory Access
N                                            // Peripheral Ready
N#define SYSCTL_PREPI            0x400FEA10  // EPI Peripheral Ready
N#define SYSCTL_PRHIB            0x400FEA14  // Hibernation Peripheral Ready
N#define SYSCTL_PRUART           0x400FEA18  // Universal Asynchronous
N                                            // Receiver/Transmitter Peripheral
N                                            // Ready
N#define SYSCTL_PRSSI            0x400FEA1C  // Synchronous Serial Interface
N                                            // Peripheral Ready
N#define SYSCTL_PRI2C            0x400FEA20  // Inter-Integrated Circuit
N                                            // Peripheral Ready
N#define SYSCTL_PRUSB            0x400FEA28  // Universal Serial Bus Peripheral
N                                            // Ready
N#define SYSCTL_PREPHY           0x400FEA30  // Ethernet PHY Peripheral Ready
N#define SYSCTL_PRCAN            0x400FEA34  // Controller Area Network
N                                            // Peripheral Ready
N#define SYSCTL_PRADC            0x400FEA38  // Analog-to-Digital Converter
N                                            // Peripheral Ready
N#define SYSCTL_PRACMP           0x400FEA3C  // Analog Comparator Peripheral
N                                            // Ready
N#define SYSCTL_PRPWM            0x400FEA40  // Pulse Width Modulator Peripheral
N                                            // Ready
N#define SYSCTL_PRQEI            0x400FEA44  // Quadrature Encoder Interface
N                                            // Peripheral Ready
N#define SYSCTL_PREEPROM         0x400FEA58  // EEPROM Peripheral Ready
N#define SYSCTL_PRWTIMER         0x400FEA5C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Peripheral Ready
N#define SYSCTL_PRCCM            0x400FEA74  // CRC and Cryptographic Modules
N                                            // Peripheral Ready
N#define SYSCTL_PRLCD            0x400FEA90  // LCD Controller Peripheral Ready
N#define SYSCTL_PROWIRE          0x400FEA98  // 1-Wire Peripheral Ready
N#define SYSCTL_PREMAC           0x400FEA9C  // Ethernet MAC Peripheral Ready
N#define SYSCTL_CCMCGREQ         0x44030204  // Cryptographic Modules Clock
N                                            // Gating Request
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DID0 register.
N//
N//*****************************************************************************
N#define SYSCTL_DID0_VER_M       0x70000000  // DID0 Version
N#define SYSCTL_DID0_VER_1       0x10000000  // Second version of the DID0
N                                            // register format.
N#define SYSCTL_DID0_CLASS_M     0x00FF0000  // Device Class
N#define SYSCTL_DID0_CLASS_TM4C123                                             \
N                                0x00050000  // Tiva TM4C123x and TM4E123x
X#define SYSCTL_DID0_CLASS_TM4C123                                                                             0x00050000  
N                                            // microcontrollers
N#define SYSCTL_DID0_CLASS_TM4C129                                             \
N                                0x000A0000  // Tiva(TM) TM4C129-class
X#define SYSCTL_DID0_CLASS_TM4C129                                                                             0x000A0000  
N                                            // microcontrollers
N#define SYSCTL_DID0_MAJ_M       0x0000FF00  // Major Revision
N#define SYSCTL_DID0_MAJ_REVA    0x00000000  // Revision A (initial device)
N#define SYSCTL_DID0_MAJ_REVB    0x00000100  // Revision B (first base layer
N                                            // revision)
N#define SYSCTL_DID0_MAJ_REVC    0x00000200  // Revision C (second base layer
N                                            // revision)
N#define SYSCTL_DID0_MIN_M       0x000000FF  // Minor Revision
N#define SYSCTL_DID0_MIN_0       0x00000000  // Initial device, or a major
N                                            // revision update
N#define SYSCTL_DID0_MIN_1       0x00000001  // First metal layer change
N#define SYSCTL_DID0_MIN_2       0x00000002  // Second metal layer change
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DID1 register.
N//
N//*****************************************************************************
N#define SYSCTL_DID1_VER_M       0xF0000000  // DID1 Version
N#define SYSCTL_DID1_VER_1       0x10000000  // fury_ib
N#define SYSCTL_DID1_FAM_M       0x0F000000  // Family
N#define SYSCTL_DID1_FAM_TIVA    0x00000000  // Tiva family of microcontollers
N#define SYSCTL_DID1_PRTNO_M     0x00FF0000  // Part Number
N#define SYSCTL_DID1_PRTNO_TM4C1230C3PM                                        \
N                                0x00220000  // TM4C1230C3PM
X#define SYSCTL_DID1_PRTNO_TM4C1230C3PM                                                                        0x00220000  
N#define SYSCTL_DID1_PRTNO_TM4C1230D5PM                                        \
N                                0x00230000  // TM4C1230D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1230D5PM                                                                        0x00230000  
N#define SYSCTL_DID1_PRTNO_TM4C1230E6PM                                        \
N                                0x00200000  // TM4C1230E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1230E6PM                                                                        0x00200000  
N#define SYSCTL_DID1_PRTNO_TM4C1230H6PM                                        \
N                                0x00210000  // TM4C1230H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1230H6PM                                                                        0x00210000  
N#define SYSCTL_DID1_PRTNO_TM4C1231C3PM                                        \
N                                0x00180000  // TM4C1231C3PM
X#define SYSCTL_DID1_PRTNO_TM4C1231C3PM                                                                        0x00180000  
N#define SYSCTL_DID1_PRTNO_TM4C1231D5PM                                        \
N                                0x00190000  // TM4C1231D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1231D5PM                                                                        0x00190000  
N#define SYSCTL_DID1_PRTNO_TM4C1231D5PZ                                        \
N                                0x00360000  // TM4C1231D5PZ
X#define SYSCTL_DID1_PRTNO_TM4C1231D5PZ                                                                        0x00360000  
N#define SYSCTL_DID1_PRTNO_TM4C1231E6PM                                        \
N                                0x00100000  // TM4C1231E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1231E6PM                                                                        0x00100000  
N#define SYSCTL_DID1_PRTNO_TM4C1231E6PZ                                        \
N                                0x00300000  // TM4C1231E6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1231E6PZ                                                                        0x00300000  
N#define SYSCTL_DID1_PRTNO_TM4C1231H6PGE                                       \
N                                0x00350000  // TM4C1231H6PGE
X#define SYSCTL_DID1_PRTNO_TM4C1231H6PGE                                                                       0x00350000  
N#define SYSCTL_DID1_PRTNO_TM4C1231H6PM                                        \
N                                0x00110000  // TM4C1231H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1231H6PM                                                                        0x00110000  
N#define SYSCTL_DID1_PRTNO_TM4C1231H6PZ                                        \
N                                0x00310000  // TM4C1231H6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1231H6PZ                                                                        0x00310000  
N#define SYSCTL_DID1_PRTNO_TM4C1232C3PM                                        \
N                                0x00080000  // TM4C1232C3PM
X#define SYSCTL_DID1_PRTNO_TM4C1232C3PM                                                                        0x00080000  
N#define SYSCTL_DID1_PRTNO_TM4C1232D5PM                                        \
N                                0x00090000  // TM4C1232D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1232D5PM                                                                        0x00090000  
N#define SYSCTL_DID1_PRTNO_TM4C1232E6PM                                        \
N                                0x000A0000  // TM4C1232E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1232E6PM                                                                        0x000A0000  
N#define SYSCTL_DID1_PRTNO_TM4C1232H6PM                                        \
N                                0x000B0000  // TM4C1232H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1232H6PM                                                                        0x000B0000  
N#define SYSCTL_DID1_PRTNO_TM4C1233C3PM                                        \
N                                0x00010000  // TM4C1233C3PM
X#define SYSCTL_DID1_PRTNO_TM4C1233C3PM                                                                        0x00010000  
N#define SYSCTL_DID1_PRTNO_TM4C1233D5PM                                        \
N                                0x00020000  // TM4C1233D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1233D5PM                                                                        0x00020000  
N#define SYSCTL_DID1_PRTNO_TM4C1233D5PZ                                        \
N                                0x00D00000  // TM4C1233D5PZ
X#define SYSCTL_DID1_PRTNO_TM4C1233D5PZ                                                                        0x00D00000  
N#define SYSCTL_DID1_PRTNO_TM4C1233E6PM                                        \
N                                0x00030000  // TM4C1233E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1233E6PM                                                                        0x00030000  
N#define SYSCTL_DID1_PRTNO_TM4C1233E6PZ                                        \
N                                0x00D10000  // TM4C1233E6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1233E6PZ                                                                        0x00D10000  
N#define SYSCTL_DID1_PRTNO_TM4C1233H6PGE                                       \
N                                0x00D60000  // TM4C1233H6PGE
X#define SYSCTL_DID1_PRTNO_TM4C1233H6PGE                                                                       0x00D60000  
N#define SYSCTL_DID1_PRTNO_TM4C1233H6PM                                        \
N                                0x00040000  // TM4C1233H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1233H6PM                                                                        0x00040000  
N#define SYSCTL_DID1_PRTNO_TM4C1233H6PZ                                        \
N                                0x00D20000  // TM4C1233H6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1233H6PZ                                                                        0x00D20000  
N#define SYSCTL_DID1_PRTNO_TM4C1236D5PM                                        \
N                                0x00520000  // TM4C1236D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1236D5PM                                                                        0x00520000  
N#define SYSCTL_DID1_PRTNO_TM4C1236E6PM                                        \
N                                0x00500000  // TM4C1236E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1236E6PM                                                                        0x00500000  
N#define SYSCTL_DID1_PRTNO_TM4C1236H6PM                                        \
N                                0x00510000  // TM4C1236H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1236H6PM                                                                        0x00510000  
N#define SYSCTL_DID1_PRTNO_TM4C1237D5PM                                        \
N                                0x00480000  // TM4C1237D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1237D5PM                                                                        0x00480000  
N#define SYSCTL_DID1_PRTNO_TM4C1237D5PZ                                        \
N                                0x00660000  // TM4C1237D5PZ
X#define SYSCTL_DID1_PRTNO_TM4C1237D5PZ                                                                        0x00660000  
N#define SYSCTL_DID1_PRTNO_TM4C1237E6PM                                        \
N                                0x00400000  // TM4C1237E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1237E6PM                                                                        0x00400000  
N#define SYSCTL_DID1_PRTNO_TM4C1237E6PZ                                        \
N                                0x00600000  // TM4C1237E6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1237E6PZ                                                                        0x00600000  
N#define SYSCTL_DID1_PRTNO_TM4C1237H6PGE                                       \
N                                0x00650000  // TM4C1237H6PGE
X#define SYSCTL_DID1_PRTNO_TM4C1237H6PGE                                                                       0x00650000  
N#define SYSCTL_DID1_PRTNO_TM4C1237H6PM                                        \
N                                0x00410000  // TM4C1237H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1237H6PM                                                                        0x00410000  
N#define SYSCTL_DID1_PRTNO_TM4C1237H6PZ                                        \
N                                0x00610000  // TM4C1237H6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1237H6PZ                                                                        0x00610000  
N#define SYSCTL_DID1_PRTNO_TM4C123AE6PM                                        \
N                                0x00800000  // TM4C123AE6PM
X#define SYSCTL_DID1_PRTNO_TM4C123AE6PM                                                                        0x00800000  
N#define SYSCTL_DID1_PRTNO_TM4C123AH6PM                                        \
N                                0x00830000  // TM4C123AH6PM
X#define SYSCTL_DID1_PRTNO_TM4C123AH6PM                                                                        0x00830000  
N#define SYSCTL_DID1_PRTNO_TM4C123BE6PM                                        \
N                                0x00700000  // TM4C123BE6PM
X#define SYSCTL_DID1_PRTNO_TM4C123BE6PM                                                                        0x00700000  
N#define SYSCTL_DID1_PRTNO_TM4C123BE6PZ                                        \
N                                0x00C30000  // TM4C123BE6PZ
X#define SYSCTL_DID1_PRTNO_TM4C123BE6PZ                                                                        0x00C30000  
N#define SYSCTL_DID1_PRTNO_TM4C123BH6PGE                                       \
N                                0x00C60000  // TM4C123BH6PGE
X#define SYSCTL_DID1_PRTNO_TM4C123BH6PGE                                                                       0x00C60000  
N#define SYSCTL_DID1_PRTNO_TM4C123BH6PM                                        \
N                                0x00730000  // TM4C123BH6PM
X#define SYSCTL_DID1_PRTNO_TM4C123BH6PM                                                                        0x00730000  
N#define SYSCTL_DID1_PRTNO_TM4C123BH6PZ                                        \
N                                0x00C40000  // TM4C123BH6PZ
X#define SYSCTL_DID1_PRTNO_TM4C123BH6PZ                                                                        0x00C40000  
N#define SYSCTL_DID1_PRTNO_TM4C123BH6ZRB                                       \
N                                0x00E90000  // TM4C123BH6ZRB
X#define SYSCTL_DID1_PRTNO_TM4C123BH6ZRB                                                                       0x00E90000  
N#define SYSCTL_DID1_PRTNO_TM4C123FE6PM                                        \
N                                0x00B00000  // TM4C123FE6PM
X#define SYSCTL_DID1_PRTNO_TM4C123FE6PM                                                                        0x00B00000  
N#define SYSCTL_DID1_PRTNO_TM4C123FH6PM                                        \
N                                0x00B10000  // TM4C123FH6PM
X#define SYSCTL_DID1_PRTNO_TM4C123FH6PM                                                                        0x00B10000  
N#define SYSCTL_DID1_PRTNO_TM4C123GE6PM                                        \
N                                0x00A00000  // TM4C123GE6PM
X#define SYSCTL_DID1_PRTNO_TM4C123GE6PM                                                                        0x00A00000  
N#define SYSCTL_DID1_PRTNO_TM4C123GE6PZ                                        \
N                                0x00C00000  // TM4C123GE6PZ
X#define SYSCTL_DID1_PRTNO_TM4C123GE6PZ                                                                        0x00C00000  
N#define SYSCTL_DID1_PRTNO_TM4C123GH6PGE                                       \
N                                0x00C50000  // TM4C123GH6PGE
X#define SYSCTL_DID1_PRTNO_TM4C123GH6PGE                                                                       0x00C50000  
N#define SYSCTL_DID1_PRTNO_TM4C123GH6PM                                        \
N                                0x00A10000  // TM4C123GH6PM
X#define SYSCTL_DID1_PRTNO_TM4C123GH6PM                                                                        0x00A10000  
N#define SYSCTL_DID1_PRTNO_TM4C123GH6PZ                                        \
N                                0x00C10000  // TM4C123GH6PZ
X#define SYSCTL_DID1_PRTNO_TM4C123GH6PZ                                                                        0x00C10000  
N#define SYSCTL_DID1_PRTNO_TM4C123GH6ZRB                                       \
N                                0x00E30000  // TM4C123GH6ZRB
X#define SYSCTL_DID1_PRTNO_TM4C123GH6ZRB                                                                       0x00E30000  
N#define SYSCTL_DID1_PRTNO_TM4C1290NCPDT                                       \
N                                0x00190000  // TM4C1290NCPDT
X#define SYSCTL_DID1_PRTNO_TM4C1290NCPDT                                                                       0x00190000  
N#define SYSCTL_DID1_PRTNO_TM4C1290NCZAD                                       \
N                                0x001B0000  // TM4C1290NCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1290NCZAD                                                                       0x001B0000  
N#define SYSCTL_DID1_PRTNO_TM4C1292NCPDT                                       \
N                                0x001C0000  // TM4C1292NCPDT
X#define SYSCTL_DID1_PRTNO_TM4C1292NCPDT                                                                       0x001C0000  
N#define SYSCTL_DID1_PRTNO_TM4C1292NCZAD                                       \
N                                0x001E0000  // TM4C1292NCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1292NCZAD                                                                       0x001E0000  
N#define SYSCTL_DID1_PRTNO_TM4C1294KCPDT                                       \
N                                0x00340000  // TM4C1294KCPDT
X#define SYSCTL_DID1_PRTNO_TM4C1294KCPDT                                                                       0x00340000  
N#define SYSCTL_DID1_PRTNO_TM4C1294NCPDT                                       \
N                                0x001F0000  // TM4C1294NCPDT
X#define SYSCTL_DID1_PRTNO_TM4C1294NCPDT                                                                       0x001F0000  
N#define SYSCTL_DID1_PRTNO_TM4C1294NCZAD                                       \
N                                0x00210000  // TM4C1294NCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1294NCZAD                                                                       0x00210000  
N#define SYSCTL_DID1_PRTNO_TM4C1297NCZAD                                       \
N                                0x00220000  // TM4C1297NCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1297NCZAD                                                                       0x00220000  
N#define SYSCTL_DID1_PRTNO_TM4C1299KCZAD                                       \
N                                0x00360000  // TM4C1299KCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1299KCZAD                                                                       0x00360000  
N#define SYSCTL_DID1_PRTNO_TM4C1299NCZAD                                       \
N                                0x00230000  // TM4C1299NCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1299NCZAD                                                                       0x00230000  
N#define SYSCTL_DID1_PRTNO_TM4C129CNCPDT                                       \
N                                0x00240000  // TM4C129CNCPDT
X#define SYSCTL_DID1_PRTNO_TM4C129CNCPDT                                                                       0x00240000  
N#define SYSCTL_DID1_PRTNO_TM4C129CNCZAD                                       \
N                                0x00260000  // TM4C129CNCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129CNCZAD                                                                       0x00260000  
N#define SYSCTL_DID1_PRTNO_TM4C129DNCPDT                                       \
N                                0x00270000  // TM4C129DNCPDT
X#define SYSCTL_DID1_PRTNO_TM4C129DNCPDT                                                                       0x00270000  
N#define SYSCTL_DID1_PRTNO_TM4C129DNCZAD                                       \
N                                0x00290000  // TM4C129DNCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129DNCZAD                                                                       0x00290000  
N#define SYSCTL_DID1_PRTNO_TM4C129EKCPDT                                       \
N                                0x00350000  // TM4C129EKCPDT
X#define SYSCTL_DID1_PRTNO_TM4C129EKCPDT                                                                       0x00350000  
N#define SYSCTL_DID1_PRTNO_TM4C129ENCPDT                                       \
N                                0x002D0000  // TM4C129ENCPDT
X#define SYSCTL_DID1_PRTNO_TM4C129ENCPDT                                                                       0x002D0000  
N#define SYSCTL_DID1_PRTNO_TM4C129ENCZAD                                       \
N                                0x002F0000  // TM4C129ENCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129ENCZAD                                                                       0x002F0000  
N#define SYSCTL_DID1_PRTNO_TM4C129LNCZAD                                       \
N                                0x00300000  // TM4C129LNCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129LNCZAD                                                                       0x00300000  
N#define SYSCTL_DID1_PRTNO_TM4C129XKCZAD                                       \
N                                0x00370000  // TM4C129XKCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129XKCZAD                                                                       0x00370000  
N#define SYSCTL_DID1_PRTNO_TM4C129XNCZAD                                       \
N                                0x00320000  // TM4C129XNCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129XNCZAD                                                                       0x00320000  
N#define SYSCTL_DID1_PINCNT_M    0x0000E000  // Package Pin Count
N#define SYSCTL_DID1_PINCNT_100  0x00004000  // 100-pin LQFP package
N#define SYSCTL_DID1_PINCNT_64   0x00006000  // 64-pin LQFP package
N#define SYSCTL_DID1_PINCNT_144  0x00008000  // 144-pin LQFP package
N#define SYSCTL_DID1_PINCNT_157  0x0000A000  // 157-pin BGA package
N#define SYSCTL_DID1_PINCNT_128  0x0000C000  // 128-pin TQFP package
N#define SYSCTL_DID1_TEMP_M      0x000000E0  // Temperature Range
N#define SYSCTL_DID1_TEMP_C      0x00000000  // Commercial temperature range
N#define SYSCTL_DID1_TEMP_I      0x00000020  // Industrial temperature range
N#define SYSCTL_DID1_TEMP_E      0x00000040  // Extended temperature range
N#define SYSCTL_DID1_TEMP_IE     0x00000060  // Available in both industrial
N                                            // temperature range (-40C to 85C)
N                                            // and extended temperature range
N                                            // (-40C to 105C) devices. See
N#define SYSCTL_DID1_PKG_M       0x00000018  // Package Type
N#define SYSCTL_DID1_PKG_QFP     0x00000008  // QFP package
N#define SYSCTL_DID1_PKG_BGA     0x00000010  // BGA package
N#define SYSCTL_DID1_ROHS        0x00000004  // RoHS-Compliance
N#define SYSCTL_DID1_QUAL_M      0x00000003  // Qualification Status
N#define SYSCTL_DID1_QUAL_ES     0x00000000  // Engineering Sample (unqualified)
N#define SYSCTL_DID1_QUAL_PP     0x00000001  // Pilot Production (unqualified)
N#define SYSCTL_DID1_QUAL_FQ     0x00000002  // Fully Qualified
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC0 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC0_SRAMSZ_M     0xFFFF0000  // SRAM Size
N#define SYSCTL_DC0_SRAMSZ_2KB   0x00070000  // 2 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_4KB   0x000F0000  // 4 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_6KB   0x00170000  // 6 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_8KB   0x001F0000  // 8 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_12KB  0x002F0000  // 12 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_16KB  0x003F0000  // 16 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_20KB  0x004F0000  // 20 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_24KB  0x005F0000  // 24 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_32KB  0x007F0000  // 32 KB of SRAM
N#define SYSCTL_DC0_FLASHSZ_M    0x0000FFFF  // Flash Size
N#define SYSCTL_DC0_FLASHSZ_8KB  0x00000003  // 8 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_16KB 0x00000007  // 16 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_32KB 0x0000000F  // 32 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_64KB 0x0000001F  // 64 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_96KB 0x0000002F  // 96 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_128K 0x0000003F  // 128 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_192K 0x0000005F  // 192 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_256K 0x0000007F  // 256 KB of Flash
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC1 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC1_WDT1         0x10000000  // Watchdog Timer1 Present
N#define SYSCTL_DC1_CAN1         0x02000000  // CAN Module 1 Present
N#define SYSCTL_DC1_CAN0         0x01000000  // CAN Module 0 Present
N#define SYSCTL_DC1_PWM1         0x00200000  // PWM Module 1 Present
N#define SYSCTL_DC1_PWM0         0x00100000  // PWM Module 0 Present
N#define SYSCTL_DC1_ADC1         0x00020000  // ADC Module 1 Present
N#define SYSCTL_DC1_ADC0         0x00010000  // ADC Module 0 Present
N#define SYSCTL_DC1_MINSYSDIV_M  0x0000F000  // System Clock Divider
N#define SYSCTL_DC1_MINSYSDIV_80 0x00001000  // Specifies an 80-MHz CPU clock
N                                            // with a PLL divider of 2.5
N#define SYSCTL_DC1_MINSYSDIV_66 0x00002000  // Specifies a 66-MHz CPU clock
N                                            // with a PLL divider of 3
N#define SYSCTL_DC1_MINSYSDIV_50 0x00003000  // Specifies a 50-MHz CPU clock
N                                            // with a PLL divider of 4
N#define SYSCTL_DC1_MINSYSDIV_40 0x00004000  // Specifies a 40-MHz CPU clock
N                                            // with a PLL divider of 5
N#define SYSCTL_DC1_MINSYSDIV_25 0x00007000  // Specifies a 25-MHz clock with a
N                                            // PLL divider of 8
N#define SYSCTL_DC1_MINSYSDIV_20 0x00009000  // Specifies a 20-MHz clock with a
N                                            // PLL divider of 10
N#define SYSCTL_DC1_ADC1SPD_M    0x00000C00  // Max ADC1 Speed
N#define SYSCTL_DC1_ADC1SPD_125K 0x00000000  // 125K samples/second
N#define SYSCTL_DC1_ADC1SPD_250K 0x00000400  // 250K samples/second
N#define SYSCTL_DC1_ADC1SPD_500K 0x00000800  // 500K samples/second
N#define SYSCTL_DC1_ADC1SPD_1M   0x00000C00  // 1M samples/second
N#define SYSCTL_DC1_ADC0SPD_M    0x00000300  // Max ADC0 Speed
N#define SYSCTL_DC1_ADC0SPD_125K 0x00000000  // 125K samples/second
N#define SYSCTL_DC1_ADC0SPD_250K 0x00000100  // 250K samples/second
N#define SYSCTL_DC1_ADC0SPD_500K 0x00000200  // 500K samples/second
N#define SYSCTL_DC1_ADC0SPD_1M   0x00000300  // 1M samples/second
N#define SYSCTL_DC1_MPU          0x00000080  // MPU Present
N#define SYSCTL_DC1_HIB          0x00000040  // Hibernation Module Present
N#define SYSCTL_DC1_TEMP         0x00000020  // Temp Sensor Present
N#define SYSCTL_DC1_PLL          0x00000010  // PLL Present
N#define SYSCTL_DC1_WDT0         0x00000008  // Watchdog Timer 0 Present
N#define SYSCTL_DC1_SWO          0x00000004  // SWO Trace Port Present
N#define SYSCTL_DC1_SWD          0x00000002  // SWD Present
N#define SYSCTL_DC1_JTAG         0x00000001  // JTAG Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC2 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC2_EPI0         0x40000000  // EPI Module 0 Present
N#define SYSCTL_DC2_I2S0         0x10000000  // I2S Module 0 Present
N#define SYSCTL_DC2_COMP2        0x04000000  // Analog Comparator 2 Present
N#define SYSCTL_DC2_COMP1        0x02000000  // Analog Comparator 1 Present
N#define SYSCTL_DC2_COMP0        0x01000000  // Analog Comparator 0 Present
N#define SYSCTL_DC2_TIMER3       0x00080000  // Timer Module 3 Present
N#define SYSCTL_DC2_TIMER2       0x00040000  // Timer Module 2 Present
N#define SYSCTL_DC2_TIMER1       0x00020000  // Timer Module 1 Present
N#define SYSCTL_DC2_TIMER0       0x00010000  // Timer Module 0 Present
N#define SYSCTL_DC2_I2C1HS       0x00008000  // I2C Module 1 Speed
N#define SYSCTL_DC2_I2C1         0x00004000  // I2C Module 1 Present
N#define SYSCTL_DC2_I2C0HS       0x00002000  // I2C Module 0 Speed
N#define SYSCTL_DC2_I2C0         0x00001000  // I2C Module 0 Present
N#define SYSCTL_DC2_QEI1         0x00000200  // QEI Module 1 Present
N#define SYSCTL_DC2_QEI0         0x00000100  // QEI Module 0 Present
N#define SYSCTL_DC2_SSI1         0x00000020  // SSI Module 1 Present
N#define SYSCTL_DC2_SSI0         0x00000010  // SSI Module 0 Present
N#define SYSCTL_DC2_UART2        0x00000004  // UART Module 2 Present
N#define SYSCTL_DC2_UART1        0x00000002  // UART Module 1 Present
N#define SYSCTL_DC2_UART0        0x00000001  // UART Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC3 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC3_32KHZ        0x80000000  // 32KHz Input Clock Available
N#define SYSCTL_DC3_CCP5         0x20000000  // T2CCP1 Pin Present
N#define SYSCTL_DC3_CCP4         0x10000000  // T2CCP0 Pin Present
N#define SYSCTL_DC3_CCP3         0x08000000  // T1CCP1 Pin Present
N#define SYSCTL_DC3_CCP2         0x04000000  // T1CCP0 Pin Present
N#define SYSCTL_DC3_CCP1         0x02000000  // T0CCP1 Pin Present
N#define SYSCTL_DC3_CCP0         0x01000000  // T0CCP0 Pin Present
N#define SYSCTL_DC3_ADC0AIN7     0x00800000  // ADC Module 0 AIN7 Pin Present
N#define SYSCTL_DC3_ADC0AIN6     0x00400000  // ADC Module 0 AIN6 Pin Present
N#define SYSCTL_DC3_ADC0AIN5     0x00200000  // ADC Module 0 AIN5 Pin Present
N#define SYSCTL_DC3_ADC0AIN4     0x00100000  // ADC Module 0 AIN4 Pin Present
N#define SYSCTL_DC3_ADC0AIN3     0x00080000  // ADC Module 0 AIN3 Pin Present
N#define SYSCTL_DC3_ADC0AIN2     0x00040000  // ADC Module 0 AIN2 Pin Present
N#define SYSCTL_DC3_ADC0AIN1     0x00020000  // ADC Module 0 AIN1 Pin Present
N#define SYSCTL_DC3_ADC0AIN0     0x00010000  // ADC Module 0 AIN0 Pin Present
N#define SYSCTL_DC3_PWMFAULT     0x00008000  // PWM Fault Pin Present
N#define SYSCTL_DC3_C2O          0x00004000  // C2o Pin Present
N#define SYSCTL_DC3_C2PLUS       0x00002000  // C2+ Pin Present
N#define SYSCTL_DC3_C2MINUS      0x00001000  // C2- Pin Present
N#define SYSCTL_DC3_C1O          0x00000800  // C1o Pin Present
N#define SYSCTL_DC3_C1PLUS       0x00000400  // C1+ Pin Present
N#define SYSCTL_DC3_C1MINUS      0x00000200  // C1- Pin Present
N#define SYSCTL_DC3_C0O          0x00000100  // C0o Pin Present
N#define SYSCTL_DC3_C0PLUS       0x00000080  // C0+ Pin Present
N#define SYSCTL_DC3_C0MINUS      0x00000040  // C0- Pin Present
N#define SYSCTL_DC3_PWM5         0x00000020  // PWM5 Pin Present
N#define SYSCTL_DC3_PWM4         0x00000010  // PWM4 Pin Present
N#define SYSCTL_DC3_PWM3         0x00000008  // PWM3 Pin Present
N#define SYSCTL_DC3_PWM2         0x00000004  // PWM2 Pin Present
N#define SYSCTL_DC3_PWM1         0x00000002  // PWM1 Pin Present
N#define SYSCTL_DC3_PWM0         0x00000001  // PWM0 Pin Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC4 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC4_EPHY0        0x40000000  // Ethernet PHY Layer 0 Present
N#define SYSCTL_DC4_EMAC0        0x10000000  // Ethernet MAC Layer 0 Present
N#define SYSCTL_DC4_E1588        0x01000000  // 1588 Capable
N#define SYSCTL_DC4_PICAL        0x00040000  // PIOSC Calibrate
N#define SYSCTL_DC4_CCP7         0x00008000  // T3CCP1 Pin Present
N#define SYSCTL_DC4_CCP6         0x00004000  // T3CCP0 Pin Present
N#define SYSCTL_DC4_UDMA         0x00002000  // Micro-DMA Module Present
N#define SYSCTL_DC4_ROM          0x00001000  // Internal Code ROM Present
N#define SYSCTL_DC4_GPIOJ        0x00000100  // GPIO Port J Present
N#define SYSCTL_DC4_GPIOH        0x00000080  // GPIO Port H Present
N#define SYSCTL_DC4_GPIOG        0x00000040  // GPIO Port G Present
N#define SYSCTL_DC4_GPIOF        0x00000020  // GPIO Port F Present
N#define SYSCTL_DC4_GPIOE        0x00000010  // GPIO Port E Present
N#define SYSCTL_DC4_GPIOD        0x00000008  // GPIO Port D Present
N#define SYSCTL_DC4_GPIOC        0x00000004  // GPIO Port C Present
N#define SYSCTL_DC4_GPIOB        0x00000002  // GPIO Port B Present
N#define SYSCTL_DC4_GPIOA        0x00000001  // GPIO Port A Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC5 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC5_PWMFAULT3    0x08000000  // PWM Fault 3 Pin Present
N#define SYSCTL_DC5_PWMFAULT2    0x04000000  // PWM Fault 2 Pin Present
N#define SYSCTL_DC5_PWMFAULT1    0x02000000  // PWM Fault 1 Pin Present
N#define SYSCTL_DC5_PWMFAULT0    0x01000000  // PWM Fault 0 Pin Present
N#define SYSCTL_DC5_PWMEFLT      0x00200000  // PWM Extended Fault Active
N#define SYSCTL_DC5_PWMESYNC     0x00100000  // PWM Extended SYNC Active
N#define SYSCTL_DC5_PWM7         0x00000080  // PWM7 Pin Present
N#define SYSCTL_DC5_PWM6         0x00000040  // PWM6 Pin Present
N#define SYSCTL_DC5_PWM5         0x00000020  // PWM5 Pin Present
N#define SYSCTL_DC5_PWM4         0x00000010  // PWM4 Pin Present
N#define SYSCTL_DC5_PWM3         0x00000008  // PWM3 Pin Present
N#define SYSCTL_DC5_PWM2         0x00000004  // PWM2 Pin Present
N#define SYSCTL_DC5_PWM1         0x00000002  // PWM1 Pin Present
N#define SYSCTL_DC5_PWM0         0x00000001  // PWM0 Pin Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC6 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC6_USB0PHY      0x00000010  // USB Module 0 PHY Present
N#define SYSCTL_DC6_USB0_M       0x00000003  // USB Module 0 Present
N#define SYSCTL_DC6_USB0_DEV     0x00000001  // USB0 is Device Only
N#define SYSCTL_DC6_USB0_HOSTDEV 0x00000002  // USB is Device or Host
N#define SYSCTL_DC6_USB0_OTG     0x00000003  // USB0 is OTG
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC7 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC7_DMACH30      0x40000000  // DMA Channel 30
N#define SYSCTL_DC7_DMACH29      0x20000000  // DMA Channel 29
N#define SYSCTL_DC7_DMACH28      0x10000000  // DMA Channel 28
N#define SYSCTL_DC7_DMACH27      0x08000000  // DMA Channel 27
N#define SYSCTL_DC7_DMACH26      0x04000000  // DMA Channel 26
N#define SYSCTL_DC7_DMACH25      0x02000000  // DMA Channel 25
N#define SYSCTL_DC7_DMACH24      0x01000000  // DMA Channel 24
N#define SYSCTL_DC7_DMACH23      0x00800000  // DMA Channel 23
N#define SYSCTL_DC7_DMACH22      0x00400000  // DMA Channel 22
N#define SYSCTL_DC7_DMACH21      0x00200000  // DMA Channel 21
N#define SYSCTL_DC7_DMACH20      0x00100000  // DMA Channel 20
N#define SYSCTL_DC7_DMACH19      0x00080000  // DMA Channel 19
N#define SYSCTL_DC7_DMACH18      0x00040000  // DMA Channel 18
N#define SYSCTL_DC7_DMACH17      0x00020000  // DMA Channel 17
N#define SYSCTL_DC7_DMACH16      0x00010000  // DMA Channel 16
N#define SYSCTL_DC7_DMACH15      0x00008000  // DMA Channel 15
N#define SYSCTL_DC7_DMACH14      0x00004000  // DMA Channel 14
N#define SYSCTL_DC7_DMACH13      0x00002000  // DMA Channel 13
N#define SYSCTL_DC7_DMACH12      0x00001000  // DMA Channel 12
N#define SYSCTL_DC7_DMACH11      0x00000800  // DMA Channel 11
N#define SYSCTL_DC7_DMACH10      0x00000400  // DMA Channel 10
N#define SYSCTL_DC7_DMACH9       0x00000200  // DMA Channel 9
N#define SYSCTL_DC7_DMACH8       0x00000100  // DMA Channel 8
N#define SYSCTL_DC7_DMACH7       0x00000080  // DMA Channel 7
N#define SYSCTL_DC7_DMACH6       0x00000040  // DMA Channel 6
N#define SYSCTL_DC7_DMACH5       0x00000020  // DMA Channel 5
N#define SYSCTL_DC7_DMACH4       0x00000010  // DMA Channel 4
N#define SYSCTL_DC7_DMACH3       0x00000008  // DMA Channel 3
N#define SYSCTL_DC7_DMACH2       0x00000004  // DMA Channel 2
N#define SYSCTL_DC7_DMACH1       0x00000002  // DMA Channel 1
N#define SYSCTL_DC7_DMACH0       0x00000001  // DMA Channel 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC8 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC8_ADC1AIN15    0x80000000  // ADC Module 1 AIN15 Pin Present
N#define SYSCTL_DC8_ADC1AIN14    0x40000000  // ADC Module 1 AIN14 Pin Present
N#define SYSCTL_DC8_ADC1AIN13    0x20000000  // ADC Module 1 AIN13 Pin Present
N#define SYSCTL_DC8_ADC1AIN12    0x10000000  // ADC Module 1 AIN12 Pin Present
N#define SYSCTL_DC8_ADC1AIN11    0x08000000  // ADC Module 1 AIN11 Pin Present
N#define SYSCTL_DC8_ADC1AIN10    0x04000000  // ADC Module 1 AIN10 Pin Present
N#define SYSCTL_DC8_ADC1AIN9     0x02000000  // ADC Module 1 AIN9 Pin Present
N#define SYSCTL_DC8_ADC1AIN8     0x01000000  // ADC Module 1 AIN8 Pin Present
N#define SYSCTL_DC8_ADC1AIN7     0x00800000  // ADC Module 1 AIN7 Pin Present
N#define SYSCTL_DC8_ADC1AIN6     0x00400000  // ADC Module 1 AIN6 Pin Present
N#define SYSCTL_DC8_ADC1AIN5     0x00200000  // ADC Module 1 AIN5 Pin Present
N#define SYSCTL_DC8_ADC1AIN4     0x00100000  // ADC Module 1 AIN4 Pin Present
N#define SYSCTL_DC8_ADC1AIN3     0x00080000  // ADC Module 1 AIN3 Pin Present
N#define SYSCTL_DC8_ADC1AIN2     0x00040000  // ADC Module 1 AIN2 Pin Present
N#define SYSCTL_DC8_ADC1AIN1     0x00020000  // ADC Module 1 AIN1 Pin Present
N#define SYSCTL_DC8_ADC1AIN0     0x00010000  // ADC Module 1 AIN0 Pin Present
N#define SYSCTL_DC8_ADC0AIN15    0x00008000  // ADC Module 0 AIN15 Pin Present
N#define SYSCTL_DC8_ADC0AIN14    0x00004000  // ADC Module 0 AIN14 Pin Present
N#define SYSCTL_DC8_ADC0AIN13    0x00002000  // ADC Module 0 AIN13 Pin Present
N#define SYSCTL_DC8_ADC0AIN12    0x00001000  // ADC Module 0 AIN12 Pin Present
N#define SYSCTL_DC8_ADC0AIN11    0x00000800  // ADC Module 0 AIN11 Pin Present
N#define SYSCTL_DC8_ADC0AIN10    0x00000400  // ADC Module 0 AIN10 Pin Present
N#define SYSCTL_DC8_ADC0AIN9     0x00000200  // ADC Module 0 AIN9 Pin Present
N#define SYSCTL_DC8_ADC0AIN8     0x00000100  // ADC Module 0 AIN8 Pin Present
N#define SYSCTL_DC8_ADC0AIN7     0x00000080  // ADC Module 0 AIN7 Pin Present
N#define SYSCTL_DC8_ADC0AIN6     0x00000040  // ADC Module 0 AIN6 Pin Present
N#define SYSCTL_DC8_ADC0AIN5     0x00000020  // ADC Module 0 AIN5 Pin Present
N#define SYSCTL_DC8_ADC0AIN4     0x00000010  // ADC Module 0 AIN4 Pin Present
N#define SYSCTL_DC8_ADC0AIN3     0x00000008  // ADC Module 0 AIN3 Pin Present
N#define SYSCTL_DC8_ADC0AIN2     0x00000004  // ADC Module 0 AIN2 Pin Present
N#define SYSCTL_DC8_ADC0AIN1     0x00000002  // ADC Module 0 AIN1 Pin Present
N#define SYSCTL_DC8_ADC0AIN0     0x00000001  // ADC Module 0 AIN0 Pin Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PBORCTL register.
N//
N//*****************************************************************************
N#define SYSCTL_PBORCTL_BOR0     0x00000004  // VDD under BOR0 Event Action
N#define SYSCTL_PBORCTL_BOR1     0x00000002  // VDD under BOR1 Event Action
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PTBOCTL register.
N//
N//*****************************************************************************
N#define SYSCTL_PTBOCTL_VDDA_UBOR_M                                            \
N                                0x00000300  // VDDA under BOR Event Action
X#define SYSCTL_PTBOCTL_VDDA_UBOR_M                                                                            0x00000300  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_NONE                                         \
N                                0x00000000  // No Action
X#define SYSCTL_PTBOCTL_VDDA_UBOR_NONE                                                                         0x00000000  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_SYSINT                                       \
N                                0x00000100  // System control interrupt
X#define SYSCTL_PTBOCTL_VDDA_UBOR_SYSINT                                                                       0x00000100  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_NMI                                          \
N                                0x00000200  // NMI
X#define SYSCTL_PTBOCTL_VDDA_UBOR_NMI                                                                          0x00000200  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_RST                                          \
N                                0x00000300  // Reset
X#define SYSCTL_PTBOCTL_VDDA_UBOR_RST                                                                          0x00000300  
N#define SYSCTL_PTBOCTL_VDD_UBOR_M                                             \
N                                0x00000003  // VDD (VDDS) under BOR Event
X#define SYSCTL_PTBOCTL_VDD_UBOR_M                                                                             0x00000003  
N                                            // Action
N#define SYSCTL_PTBOCTL_VDD_UBOR_NONE                                          \
N                                0x00000000  // No Action
X#define SYSCTL_PTBOCTL_VDD_UBOR_NONE                                                                          0x00000000  
N#define SYSCTL_PTBOCTL_VDD_UBOR_SYSINT                                        \
N                                0x00000001  // System control interrupt
X#define SYSCTL_PTBOCTL_VDD_UBOR_SYSINT                                                                        0x00000001  
N#define SYSCTL_PTBOCTL_VDD_UBOR_NMI                                           \
N                                0x00000002  // NMI
X#define SYSCTL_PTBOCTL_VDD_UBOR_NMI                                                                           0x00000002  
N#define SYSCTL_PTBOCTL_VDD_UBOR_RST                                           \
N                                0x00000003  // Reset
X#define SYSCTL_PTBOCTL_VDD_UBOR_RST                                                                           0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCR0 register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCR0_WDT1       0x10000000  // WDT1 Reset Control
N#define SYSCTL_SRCR0_CAN1       0x02000000  // CAN1 Reset Control
N#define SYSCTL_SRCR0_CAN0       0x01000000  // CAN0 Reset Control
N#define SYSCTL_SRCR0_PWM0       0x00100000  // PWM Reset Control
N#define SYSCTL_SRCR0_ADC1       0x00020000  // ADC1 Reset Control
N#define SYSCTL_SRCR0_ADC0       0x00010000  // ADC0 Reset Control
N#define SYSCTL_SRCR0_HIB        0x00000040  // HIB Reset Control
N#define SYSCTL_SRCR0_WDT0       0x00000008  // WDT0 Reset Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCR1 register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCR1_COMP2      0x04000000  // Analog Comp 2 Reset Control
N#define SYSCTL_SRCR1_COMP1      0x02000000  // Analog Comp 1 Reset Control
N#define SYSCTL_SRCR1_COMP0      0x01000000  // Analog Comp 0 Reset Control
N#define SYSCTL_SRCR1_TIMER3     0x00080000  // Timer 3 Reset Control
N#define SYSCTL_SRCR1_TIMER2     0x00040000  // Timer 2 Reset Control
N#define SYSCTL_SRCR1_TIMER1     0x00020000  // Timer 1 Reset Control
N#define SYSCTL_SRCR1_TIMER0     0x00010000  // Timer 0 Reset Control
N#define SYSCTL_SRCR1_I2C1       0x00004000  // I2C1 Reset Control
N#define SYSCTL_SRCR1_I2C0       0x00001000  // I2C0 Reset Control
N#define SYSCTL_SRCR1_QEI1       0x00000200  // QEI1 Reset Control
N#define SYSCTL_SRCR1_QEI0       0x00000100  // QEI0 Reset Control
N#define SYSCTL_SRCR1_SSI1       0x00000020  // SSI1 Reset Control
N#define SYSCTL_SRCR1_SSI0       0x00000010  // SSI0 Reset Control
N#define SYSCTL_SRCR1_UART2      0x00000004  // UART2 Reset Control
N#define SYSCTL_SRCR1_UART1      0x00000002  // UART1 Reset Control
N#define SYSCTL_SRCR1_UART0      0x00000001  // UART0 Reset Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCR2 register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCR2_USB0       0x00010000  // USB0 Reset Control
N#define SYSCTL_SRCR2_UDMA       0x00002000  // Micro-DMA Reset Control
N#define SYSCTL_SRCR2_GPIOJ      0x00000100  // Port J Reset Control
N#define SYSCTL_SRCR2_GPIOH      0x00000080  // Port H Reset Control
N#define SYSCTL_SRCR2_GPIOG      0x00000040  // Port G Reset Control
N#define SYSCTL_SRCR2_GPIOF      0x00000020  // Port F Reset Control
N#define SYSCTL_SRCR2_GPIOE      0x00000010  // Port E Reset Control
N#define SYSCTL_SRCR2_GPIOD      0x00000008  // Port D Reset Control
N#define SYSCTL_SRCR2_GPIOC      0x00000004  // Port C Reset Control
N#define SYSCTL_SRCR2_GPIOB      0x00000002  // Port B Reset Control
N#define SYSCTL_SRCR2_GPIOA      0x00000001  // Port A Reset Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RIS register.
N//
N//*****************************************************************************
N#define SYSCTL_RIS_BOR0RIS      0x00000800  // VDD under BOR0 Raw Interrupt
N                                            // Status
N#define SYSCTL_RIS_VDDARIS      0x00000400  // VDDA Power OK Event Raw
N                                            // Interrupt Status
N#define SYSCTL_RIS_MOSCPUPRIS   0x00000100  // MOSC Power Up Raw Interrupt
N                                            // Status
N#define SYSCTL_RIS_USBPLLLRIS   0x00000080  // USB PLL Lock Raw Interrupt
N                                            // Status
N#define SYSCTL_RIS_PLLLRIS      0x00000040  // PLL Lock Raw Interrupt Status
N#define SYSCTL_RIS_MOFRIS       0x00000008  // Main Oscillator Failure Raw
N                                            // Interrupt Status
N#define SYSCTL_RIS_BOR1RIS      0x00000002  // VDD under BOR1 Raw Interrupt
N                                            // Status
N#define SYSCTL_RIS_BORRIS       0x00000002  // Brown-Out Reset Raw Interrupt
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_IMC register.
N//
N//*****************************************************************************
N#define SYSCTL_IMC_BOR0IM       0x00000800  // VDD under BOR0 Interrupt Mask
N#define SYSCTL_IMC_VDDAIM       0x00000400  // VDDA Power OK Interrupt Mask
N#define SYSCTL_IMC_MOSCPUPIM    0x00000100  // MOSC Power Up Interrupt Mask
N#define SYSCTL_IMC_USBPLLLIM    0x00000080  // USB PLL Lock Interrupt Mask
N#define SYSCTL_IMC_PLLLIM       0x00000040  // PLL Lock Interrupt Mask
N#define SYSCTL_IMC_MOFIM        0x00000008  // Main Oscillator Failure
N                                            // Interrupt Mask
N#define SYSCTL_IMC_BORIM        0x00000002  // Brown-Out Reset Interrupt Mask
N#define SYSCTL_IMC_BOR1IM       0x00000002  // VDD under BOR1 Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_MISC register.
N//
N//*****************************************************************************
N#define SYSCTL_MISC_BOR0MIS     0x00000800  // VDD under BOR0 Masked Interrupt
N                                            // Status
N#define SYSCTL_MISC_VDDAMIS     0x00000400  // VDDA Power OK Masked Interrupt
N                                            // Status
N#define SYSCTL_MISC_MOSCPUPMIS  0x00000100  // MOSC Power Up Masked Interrupt
N                                            // Status
N#define SYSCTL_MISC_USBPLLLMIS  0x00000080  // USB PLL Lock Masked Interrupt
N                                            // Status
N#define SYSCTL_MISC_PLLLMIS     0x00000040  // PLL Lock Masked Interrupt Status
N#define SYSCTL_MISC_MOFMIS      0x00000008  // Main Oscillator Failure Masked
N                                            // Interrupt Status
N#define SYSCTL_MISC_BORMIS      0x00000002  // BOR Masked Interrupt Status
N#define SYSCTL_MISC_BOR1MIS     0x00000002  // VDD under BOR1 Masked Interrupt
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RESC register.
N//
N//*****************************************************************************
N#define SYSCTL_RESC_MOSCFAIL    0x00010000  // MOSC Failure Reset
N#define SYSCTL_RESC_HSSR        0x00001000  // HSSR Reset
N#define SYSCTL_RESC_HIB         0x00000040  // HIB Reset
N#define SYSCTL_RESC_WDT1        0x00000020  // Watchdog Timer 1 Reset
N#define SYSCTL_RESC_SW          0x00000010  // Software Reset
N#define SYSCTL_RESC_WDT0        0x00000008  // Watchdog Timer 0 Reset
N#define SYSCTL_RESC_BOR         0x00000004  // Brown-Out Reset
N#define SYSCTL_RESC_POR         0x00000002  // Power-On Reset
N#define SYSCTL_RESC_EXT         0x00000001  // External Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PWRTC register.
N//
N//*****************************************************************************
N#define SYSCTL_PWRTC_VDDA_UBOR  0x00000010  // VDDA Under BOR Status
N#define SYSCTL_PWRTC_VDD_UBOR   0x00000001  // VDD Under BOR Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCC register.
N//
N//*****************************************************************************
N#define SYSCTL_RCC_ACG          0x08000000  // Auto Clock Gating
N#define SYSCTL_RCC_SYSDIV_M     0x07800000  // System Clock Divisor
N#define SYSCTL_RCC_USESYSDIV    0x00400000  // Enable System Clock Divider
N#define SYSCTL_RCC_USEPWMDIV    0x00100000  // Enable PWM Clock Divisor
N#define SYSCTL_RCC_PWMDIV_M     0x000E0000  // PWM Unit Clock Divisor
N#define SYSCTL_RCC_PWMDIV_2     0x00000000  // PWM clock /2
N#define SYSCTL_RCC_PWMDIV_4     0x00020000  // PWM clock /4
N#define SYSCTL_RCC_PWMDIV_8     0x00040000  // PWM clock /8
N#define SYSCTL_RCC_PWMDIV_16    0x00060000  // PWM clock /16
N#define SYSCTL_RCC_PWMDIV_32    0x00080000  // PWM clock /32
N#define SYSCTL_RCC_PWMDIV_64    0x000A0000  // PWM clock /64
N#define SYSCTL_RCC_PWRDN        0x00002000  // PLL Power Down
N#define SYSCTL_RCC_BYPASS       0x00000800  // PLL Bypass
N#define SYSCTL_RCC_XTAL_M       0x000007C0  // Crystal Value
N#define SYSCTL_RCC_XTAL_4MHZ    0x00000180  // 4 MHz
N#define SYSCTL_RCC_XTAL_4_09MHZ 0x000001C0  // 4.096 MHz
N#define SYSCTL_RCC_XTAL_4_91MHZ 0x00000200  // 4.9152 MHz
N#define SYSCTL_RCC_XTAL_5MHZ    0x00000240  // 5 MHz
N#define SYSCTL_RCC_XTAL_5_12MHZ 0x00000280  // 5.12 MHz
N#define SYSCTL_RCC_XTAL_6MHZ    0x000002C0  // 6 MHz
N#define SYSCTL_RCC_XTAL_6_14MHZ 0x00000300  // 6.144 MHz
N#define SYSCTL_RCC_XTAL_7_37MHZ 0x00000340  // 7.3728 MHz
N#define SYSCTL_RCC_XTAL_8MHZ    0x00000380  // 8 MHz
N#define SYSCTL_RCC_XTAL_8_19MHZ 0x000003C0  // 8.192 MHz
N#define SYSCTL_RCC_XTAL_10MHZ   0x00000400  // 10 MHz
N#define SYSCTL_RCC_XTAL_12MHZ   0x00000440  // 12 MHz
N#define SYSCTL_RCC_XTAL_12_2MHZ 0x00000480  // 12.288 MHz
N#define SYSCTL_RCC_XTAL_13_5MHZ 0x000004C0  // 13.56 MHz
N#define SYSCTL_RCC_XTAL_14_3MHZ 0x00000500  // 14.31818 MHz
N#define SYSCTL_RCC_XTAL_16MHZ   0x00000540  // 16 MHz
N#define SYSCTL_RCC_XTAL_16_3MHZ 0x00000580  // 16.384 MHz
N#define SYSCTL_RCC_XTAL_18MHZ   0x000005C0  // 18.0 MHz (USB)
N#define SYSCTL_RCC_XTAL_20MHZ   0x00000600  // 20.0 MHz (USB)
N#define SYSCTL_RCC_XTAL_24MHZ   0x00000640  // 24.0 MHz (USB)
N#define SYSCTL_RCC_XTAL_25MHZ   0x00000680  // 25.0 MHz (USB)
N#define SYSCTL_RCC_OSCSRC_M     0x00000030  // Oscillator Source
N#define SYSCTL_RCC_OSCSRC_MAIN  0x00000000  // MOSC
N#define SYSCTL_RCC_OSCSRC_INT   0x00000010  // IOSC
N#define SYSCTL_RCC_OSCSRC_INT4  0x00000020  // IOSC/4
N#define SYSCTL_RCC_OSCSRC_30    0x00000030  // LFIOSC
N#define SYSCTL_RCC_MOSCDIS      0x00000001  // Main Oscillator Disable
N#define SYSCTL_RCC_SYSDIV_S     23
N#define SYSCTL_RCC_XTAL_S       6           // Shift to the XTAL field
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_NMIC register.
N//
N//*****************************************************************************
N#define SYSCTL_NMIC_MOSCFAIL    0x00010000  // MOSC Failure NMI
N#define SYSCTL_NMIC_TAMPER      0x00000200  // Tamper Event NMI
N#define SYSCTL_NMIC_WDT1        0x00000020  // Watch Dog Timer (WDT) 1 NMI
N#define SYSCTL_NMIC_WDT0        0x00000008  // Watch Dog Timer (WDT) 0 NMI
N#define SYSCTL_NMIC_POWER       0x00000004  // Power/Brown Out Event NMI
N#define SYSCTL_NMIC_EXTERNAL    0x00000001  // External Pin NMI
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_GPIOHBCTL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_GPIOHBCTL_PORTJ  0x00000100  // Port J Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTH  0x00000080  // Port H Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTG  0x00000040  // Port G Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTF  0x00000020  // Port F Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTE  0x00000010  // Port E Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTD  0x00000008  // Port D Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTC  0x00000004  // Port C Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTB  0x00000002  // Port B Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTA  0x00000001  // Port A Advanced High-Performance
N                                            // Bus
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCC2 register.
N//
N//*****************************************************************************
N#define SYSCTL_RCC2_USERCC2     0x80000000  // Use RCC2
N#define SYSCTL_RCC2_DIV400      0x40000000  // Divide PLL as 400 MHz vs. 200
N                                            // MHz
N#define SYSCTL_RCC2_SYSDIV2_M   0x1F800000  // System Clock Divisor 2
N#define SYSCTL_RCC2_SYSDIV2LSB  0x00400000  // Additional LSB for SYSDIV2
N#define SYSCTL_RCC2_USBPWRDN    0x00004000  // Power-Down USB PLL
N#define SYSCTL_RCC2_PWRDN2      0x00002000  // Power-Down PLL 2
N#define SYSCTL_RCC2_BYPASS2     0x00000800  // PLL Bypass 2
N#define SYSCTL_RCC2_OSCSRC2_M   0x00000070  // Oscillator Source 2
N#define SYSCTL_RCC2_OSCSRC2_MO  0x00000000  // MOSC
N#define SYSCTL_RCC2_OSCSRC2_IO  0x00000010  // PIOSC
N#define SYSCTL_RCC2_OSCSRC2_IO4 0x00000020  // PIOSC/4
N#define SYSCTL_RCC2_OSCSRC2_30  0x00000030  // LFIOSC
N#define SYSCTL_RCC2_OSCSRC2_32  0x00000070  // 32.768 kHz
N#define SYSCTL_RCC2_SYSDIV2_S   23
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_MOSCCTL register.
N//
N//*****************************************************************************
N#define SYSCTL_MOSCCTL_OSCRNG   0x00000010  // Oscillator Range
N#define SYSCTL_MOSCCTL_PWRDN    0x00000008  // Power Down
N#define SYSCTL_MOSCCTL_NOXTAL   0x00000004  // No Crystal Connected
N#define SYSCTL_MOSCCTL_MOSCIM   0x00000002  // MOSC Failure Action
N#define SYSCTL_MOSCCTL_CVAL     0x00000001  // Clock Validation for MOSC
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RSCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RSCLKCFG_MEMTIMU 0x80000000  // Memory Timing Register Update
N#define SYSCTL_RSCLKCFG_NEWFREQ 0x40000000  // New PLLFREQ Accept
N#define SYSCTL_RSCLKCFG_ACG     0x20000000  // Auto Clock Gating
N#define SYSCTL_RSCLKCFG_USEPLL  0x10000000  // Use PLL
N#define SYSCTL_RSCLKCFG_PLLSRC_M                                              \
N                                0x0F000000  // PLL Source
X#define SYSCTL_RSCLKCFG_PLLSRC_M                                                                              0x0F000000  
N#define SYSCTL_RSCLKCFG_PLLSRC_PIOSC                                          \
N                                0x00000000  // PIOSC is PLL input clock source
X#define SYSCTL_RSCLKCFG_PLLSRC_PIOSC                                                                          0x00000000  
N#define SYSCTL_RSCLKCFG_PLLSRC_MOSC                                           \
N                                0x03000000  // MOSC is the PLL input clock
X#define SYSCTL_RSCLKCFG_PLLSRC_MOSC                                                                           0x03000000  
N                                            // source
N#define SYSCTL_RSCLKCFG_OSCSRC_M                                              \
N                                0x00F00000  // Oscillator Source
X#define SYSCTL_RSCLKCFG_OSCSRC_M                                                                              0x00F00000  
N#define SYSCTL_RSCLKCFG_OSCSRC_PIOSC                                          \
N                                0x00000000  // PIOSC is oscillator source
X#define SYSCTL_RSCLKCFG_OSCSRC_PIOSC                                                                          0x00000000  
N#define SYSCTL_RSCLKCFG_OSCSRC_LFIOSC                                         \
N                                0x00200000  // LFIOSC is oscillator source
X#define SYSCTL_RSCLKCFG_OSCSRC_LFIOSC                                                                         0x00200000  
N#define SYSCTL_RSCLKCFG_OSCSRC_MOSC                                           \
N                                0x00300000  // MOSC is oscillator source
X#define SYSCTL_RSCLKCFG_OSCSRC_MOSC                                                                           0x00300000  
N#define SYSCTL_RSCLKCFG_OSCSRC_RTC                                            \
N                                0x00400000  // Hibernation Module RTC
X#define SYSCTL_RSCLKCFG_OSCSRC_RTC                                                                            0x00400000  
N                                            // Oscillator (RTCOSC)
N#define SYSCTL_RSCLKCFG_OSYSDIV_M                                             \
N                                0x000FFC00  // Oscillator System Clock Divisor
X#define SYSCTL_RSCLKCFG_OSYSDIV_M                                                                             0x000FFC00  
N#define SYSCTL_RSCLKCFG_PSYSDIV_M                                             \
N                                0x000003FF  // PLL System Clock Divisor
X#define SYSCTL_RSCLKCFG_PSYSDIV_M                                                                             0x000003FF  
N#define SYSCTL_RSCLKCFG_OSYSDIV_S                                             \
N                                10
X#define SYSCTL_RSCLKCFG_OSYSDIV_S                                                                             10
N#define SYSCTL_RSCLKCFG_PSYSDIV_S                                             \
N                                0
X#define SYSCTL_RSCLKCFG_PSYSDIV_S                                                                             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_MEMTIM0 register.
N//
N//*****************************************************************************
N#define SYSCTL_MEMTIM0_EBCHT_M  0x03C00000  // EEPROM Clock High Time
N#define SYSCTL_MEMTIM0_EBCHT_0_5                                              \
N                                0x00000000  // 1/2 system clock period
X#define SYSCTL_MEMTIM0_EBCHT_0_5                                                                              0x00000000  
N#define SYSCTL_MEMTIM0_EBCHT_1  0x00400000  // 1 system clock period
N#define SYSCTL_MEMTIM0_EBCHT_1_5                                              \
N                                0x00800000  // 1.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_1_5                                                                              0x00800000  
N#define SYSCTL_MEMTIM0_EBCHT_2  0x00C00000  // 2 system clock periods
N#define SYSCTL_MEMTIM0_EBCHT_2_5                                              \
N                                0x01000000  // 2.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_2_5                                                                              0x01000000  
N#define SYSCTL_MEMTIM0_EBCHT_3  0x01400000  // 3 system clock periods
N#define SYSCTL_MEMTIM0_EBCHT_3_5                                              \
N                                0x01800000  // 3.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_3_5                                                                              0x01800000  
N#define SYSCTL_MEMTIM0_EBCHT_4  0x01C00000  // 4 system clock periods
N#define SYSCTL_MEMTIM0_EBCHT_4_5                                              \
N                                0x02000000  // 4.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_4_5                                                                              0x02000000  
N#define SYSCTL_MEMTIM0_EBCE     0x00200000  // EEPROM Bank Clock Edge
N#define SYSCTL_MEMTIM0_MB1      0x00100010  // Must be one
N#define SYSCTL_MEMTIM0_EWS_M    0x000F0000  // EEPROM Wait States
N#define SYSCTL_MEMTIM0_FBCHT_M  0x000003C0  // Flash Bank Clock High Time
N#define SYSCTL_MEMTIM0_FBCHT_0_5                                              \
N                                0x00000000  // 1/2 system clock period
X#define SYSCTL_MEMTIM0_FBCHT_0_5                                                                              0x00000000  
N#define SYSCTL_MEMTIM0_FBCHT_1  0x00000040  // 1 system clock period
N#define SYSCTL_MEMTIM0_FBCHT_1_5                                              \
N                                0x00000080  // 1.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_1_5                                                                              0x00000080  
N#define SYSCTL_MEMTIM0_FBCHT_2  0x000000C0  // 2 system clock periods
N#define SYSCTL_MEMTIM0_FBCHT_2_5                                              \
N                                0x00000100  // 2.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_2_5                                                                              0x00000100  
N#define SYSCTL_MEMTIM0_FBCHT_3  0x00000140  // 3 system clock periods
N#define SYSCTL_MEMTIM0_FBCHT_3_5                                              \
N                                0x00000180  // 3.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_3_5                                                                              0x00000180  
N#define SYSCTL_MEMTIM0_FBCHT_4  0x000001C0  // 4 system clock periods
N#define SYSCTL_MEMTIM0_FBCHT_4_5                                              \
N                                0x00000200  // 4.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_4_5                                                                              0x00000200  
N#define SYSCTL_MEMTIM0_FBCE     0x00000020  // Flash Bank Clock Edge
N#define SYSCTL_MEMTIM0_FWS_M    0x0000000F  // Flash Wait State
N#define SYSCTL_MEMTIM0_EWS_S    16
N#define SYSCTL_MEMTIM0_FWS_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGC0 register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGC0_WDT1       0x10000000  // WDT1 Clock Gating Control
N#define SYSCTL_RCGC0_CAN1       0x02000000  // CAN1 Clock Gating Control
N#define SYSCTL_RCGC0_CAN0       0x01000000  // CAN0 Clock Gating Control
N#define SYSCTL_RCGC0_PWM0       0x00100000  // PWM Clock Gating Control
N#define SYSCTL_RCGC0_ADC1       0x00020000  // ADC1 Clock Gating Control
N#define SYSCTL_RCGC0_ADC0       0x00010000  // ADC0 Clock Gating Control
N#define SYSCTL_RCGC0_ADC1SPD_M  0x00000C00  // ADC1 Sample Speed
N#define SYSCTL_RCGC0_ADC1SPD_125K                                             \
N                                0x00000000  // 125K samples/second
X#define SYSCTL_RCGC0_ADC1SPD_125K                                                                             0x00000000  
N#define SYSCTL_RCGC0_ADC1SPD_250K                                             \
N                                0x00000400  // 250K samples/second
X#define SYSCTL_RCGC0_ADC1SPD_250K                                                                             0x00000400  
N#define SYSCTL_RCGC0_ADC1SPD_500K                                             \
N                                0x00000800  // 500K samples/second
X#define SYSCTL_RCGC0_ADC1SPD_500K                                                                             0x00000800  
N#define SYSCTL_RCGC0_ADC1SPD_1M 0x00000C00  // 1M samples/second
N#define SYSCTL_RCGC0_ADC0SPD_M  0x00000300  // ADC0 Sample Speed
N#define SYSCTL_RCGC0_ADC0SPD_125K                                             \
N                                0x00000000  // 125K samples/second
X#define SYSCTL_RCGC0_ADC0SPD_125K                                                                             0x00000000  
N#define SYSCTL_RCGC0_ADC0SPD_250K                                             \
N                                0x00000100  // 250K samples/second
X#define SYSCTL_RCGC0_ADC0SPD_250K                                                                             0x00000100  
N#define SYSCTL_RCGC0_ADC0SPD_500K                                             \
N                                0x00000200  // 500K samples/second
X#define SYSCTL_RCGC0_ADC0SPD_500K                                                                             0x00000200  
N#define SYSCTL_RCGC0_ADC0SPD_1M 0x00000300  // 1M samples/second
N#define SYSCTL_RCGC0_HIB        0x00000040  // HIB Clock Gating Control
N#define SYSCTL_RCGC0_WDT0       0x00000008  // WDT0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGC1 register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGC1_COMP2      0x04000000  // Analog Comparator 2 Clock Gating
N#define SYSCTL_RCGC1_COMP1      0x02000000  // Analog Comparator 1 Clock Gating
N#define SYSCTL_RCGC1_COMP0      0x01000000  // Analog Comparator 0 Clock Gating
N#define SYSCTL_RCGC1_TIMER3     0x00080000  // Timer 3 Clock Gating Control
N#define SYSCTL_RCGC1_TIMER2     0x00040000  // Timer 2 Clock Gating Control
N#define SYSCTL_RCGC1_TIMER1     0x00020000  // Timer 1 Clock Gating Control
N#define SYSCTL_RCGC1_TIMER0     0x00010000  // Timer 0 Clock Gating Control
N#define SYSCTL_RCGC1_I2C1       0x00004000  // I2C1 Clock Gating Control
N#define SYSCTL_RCGC1_I2C0       0x00001000  // I2C0 Clock Gating Control
N#define SYSCTL_RCGC1_QEI1       0x00000200  // QEI1 Clock Gating Control
N#define SYSCTL_RCGC1_QEI0       0x00000100  // QEI0 Clock Gating Control
N#define SYSCTL_RCGC1_SSI1       0x00000020  // SSI1 Clock Gating Control
N#define SYSCTL_RCGC1_SSI0       0x00000010  // SSI0 Clock Gating Control
N#define SYSCTL_RCGC1_UART2      0x00000004  // UART2 Clock Gating Control
N#define SYSCTL_RCGC1_UART1      0x00000002  // UART1 Clock Gating Control
N#define SYSCTL_RCGC1_UART0      0x00000001  // UART0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGC2 register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGC2_USB0       0x00010000  // USB0 Clock Gating Control
N#define SYSCTL_RCGC2_UDMA       0x00002000  // Micro-DMA Clock Gating Control
N#define SYSCTL_RCGC2_GPIOJ      0x00000100  // Port J Clock Gating Control
N#define SYSCTL_RCGC2_GPIOH      0x00000080  // Port H Clock Gating Control
N#define SYSCTL_RCGC2_GPIOG      0x00000040  // Port G Clock Gating Control
N#define SYSCTL_RCGC2_GPIOF      0x00000020  // Port F Clock Gating Control
N#define SYSCTL_RCGC2_GPIOE      0x00000010  // Port E Clock Gating Control
N#define SYSCTL_RCGC2_GPIOD      0x00000008  // Port D Clock Gating Control
N#define SYSCTL_RCGC2_GPIOC      0x00000004  // Port C Clock Gating Control
N#define SYSCTL_RCGC2_GPIOB      0x00000002  // Port B Clock Gating Control
N#define SYSCTL_RCGC2_GPIOA      0x00000001  // Port A Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGC0 register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGC0_WDT1       0x10000000  // WDT1 Clock Gating Control
N#define SYSCTL_SCGC0_CAN1       0x02000000  // CAN1 Clock Gating Control
N#define SYSCTL_SCGC0_CAN0       0x01000000  // CAN0 Clock Gating Control
N#define SYSCTL_SCGC0_PWM0       0x00100000  // PWM Clock Gating Control
N#define SYSCTL_SCGC0_ADC1       0x00020000  // ADC1 Clock Gating Control
N#define SYSCTL_SCGC0_ADC0       0x00010000  // ADC0 Clock Gating Control
N#define SYSCTL_SCGC0_ADCSPD_M   0x00000F00  // ADC Sample Speed
N#define SYSCTL_SCGC0_HIB        0x00000040  // HIB Clock Gating Control
N#define SYSCTL_SCGC0_WDT0       0x00000008  // WDT0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGC1 register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGC1_COMP2      0x04000000  // Analog Comparator 2 Clock Gating
N#define SYSCTL_SCGC1_COMP1      0x02000000  // Analog Comparator 1 Clock Gating
N#define SYSCTL_SCGC1_COMP0      0x01000000  // Analog Comparator 0 Clock Gating
N#define SYSCTL_SCGC1_TIMER3     0x00080000  // Timer 3 Clock Gating Control
N#define SYSCTL_SCGC1_TIMER2     0x00040000  // Timer 2 Clock Gating Control
N#define SYSCTL_SCGC1_TIMER1     0x00020000  // Timer 1 Clock Gating Control
N#define SYSCTL_SCGC1_TIMER0     0x00010000  // Timer 0 Clock Gating Control
N#define SYSCTL_SCGC1_I2C1       0x00004000  // I2C1 Clock Gating Control
N#define SYSCTL_SCGC1_I2C0       0x00001000  // I2C0 Clock Gating Control
N#define SYSCTL_SCGC1_QEI1       0x00000200  // QEI1 Clock Gating Control
N#define SYSCTL_SCGC1_QEI0       0x00000100  // QEI0 Clock Gating Control
N#define SYSCTL_SCGC1_SSI1       0x00000020  // SSI1 Clock Gating Control
N#define SYSCTL_SCGC1_SSI0       0x00000010  // SSI0 Clock Gating Control
N#define SYSCTL_SCGC1_UART2      0x00000004  // UART2 Clock Gating Control
N#define SYSCTL_SCGC1_UART1      0x00000002  // UART1 Clock Gating Control
N#define SYSCTL_SCGC1_UART0      0x00000001  // UART0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGC2 register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGC2_USB0       0x00010000  // USB0 Clock Gating Control
N#define SYSCTL_SCGC2_UDMA       0x00002000  // Micro-DMA Clock Gating Control
N#define SYSCTL_SCGC2_GPIOJ      0x00000100  // Port J Clock Gating Control
N#define SYSCTL_SCGC2_GPIOH      0x00000080  // Port H Clock Gating Control
N#define SYSCTL_SCGC2_GPIOG      0x00000040  // Port G Clock Gating Control
N#define SYSCTL_SCGC2_GPIOF      0x00000020  // Port F Clock Gating Control
N#define SYSCTL_SCGC2_GPIOE      0x00000010  // Port E Clock Gating Control
N#define SYSCTL_SCGC2_GPIOD      0x00000008  // Port D Clock Gating Control
N#define SYSCTL_SCGC2_GPIOC      0x00000004  // Port C Clock Gating Control
N#define SYSCTL_SCGC2_GPIOB      0x00000002  // Port B Clock Gating Control
N#define SYSCTL_SCGC2_GPIOA      0x00000001  // Port A Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGC0 register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGC0_WDT1       0x10000000  // WDT1 Clock Gating Control
N#define SYSCTL_DCGC0_CAN1       0x02000000  // CAN1 Clock Gating Control
N#define SYSCTL_DCGC0_CAN0       0x01000000  // CAN0 Clock Gating Control
N#define SYSCTL_DCGC0_PWM0       0x00100000  // PWM Clock Gating Control
N#define SYSCTL_DCGC0_ADC1       0x00020000  // ADC1 Clock Gating Control
N#define SYSCTL_DCGC0_ADC0       0x00010000  // ADC0 Clock Gating Control
N#define SYSCTL_DCGC0_HIB        0x00000040  // HIB Clock Gating Control
N#define SYSCTL_DCGC0_WDT0       0x00000008  // WDT0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGC1 register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGC1_COMP2      0x04000000  // Analog Comparator 2 Clock Gating
N#define SYSCTL_DCGC1_COMP1      0x02000000  // Analog Comparator 1 Clock Gating
N#define SYSCTL_DCGC1_COMP0      0x01000000  // Analog Comparator 0 Clock Gating
N#define SYSCTL_DCGC1_TIMER3     0x00080000  // Timer 3 Clock Gating Control
N#define SYSCTL_DCGC1_TIMER2     0x00040000  // Timer 2 Clock Gating Control
N#define SYSCTL_DCGC1_TIMER1     0x00020000  // Timer 1 Clock Gating Control
N#define SYSCTL_DCGC1_TIMER0     0x00010000  // Timer 0 Clock Gating Control
N#define SYSCTL_DCGC1_I2C1       0x00004000  // I2C1 Clock Gating Control
N#define SYSCTL_DCGC1_I2C0       0x00001000  // I2C0 Clock Gating Control
N#define SYSCTL_DCGC1_QEI1       0x00000200  // QEI1 Clock Gating Control
N#define SYSCTL_DCGC1_QEI0       0x00000100  // QEI0 Clock Gating Control
N#define SYSCTL_DCGC1_SSI1       0x00000020  // SSI1 Clock Gating Control
N#define SYSCTL_DCGC1_SSI0       0x00000010  // SSI0 Clock Gating Control
N#define SYSCTL_DCGC1_UART2      0x00000004  // UART2 Clock Gating Control
N#define SYSCTL_DCGC1_UART1      0x00000002  // UART1 Clock Gating Control
N#define SYSCTL_DCGC1_UART0      0x00000001  // UART0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGC2 register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGC2_USB0       0x00010000  // USB0 Clock Gating Control
N#define SYSCTL_DCGC2_UDMA       0x00002000  // Micro-DMA Clock Gating Control
N#define SYSCTL_DCGC2_GPIOJ      0x00000100  // Port J Clock Gating Control
N#define SYSCTL_DCGC2_GPIOH      0x00000080  // Port H Clock Gating Control
N#define SYSCTL_DCGC2_GPIOG      0x00000040  // Port G Clock Gating Control
N#define SYSCTL_DCGC2_GPIOF      0x00000020  // Port F Clock Gating Control
N#define SYSCTL_DCGC2_GPIOE      0x00000010  // Port E Clock Gating Control
N#define SYSCTL_DCGC2_GPIOD      0x00000008  // Port D Clock Gating Control
N#define SYSCTL_DCGC2_GPIOC      0x00000004  // Port C Clock Gating Control
N#define SYSCTL_DCGC2_GPIOB      0x00000002  // Port B Clock Gating Control
N#define SYSCTL_DCGC2_GPIOA      0x00000001  // Port A Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_ALTCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_ALTCLKCFG_ALTCLK_M                                             \
N                                0x0000000F  // Alternate Clock Source
X#define SYSCTL_ALTCLKCFG_ALTCLK_M                                                                             0x0000000F  
N#define SYSCTL_ALTCLKCFG_ALTCLK_PIOSC                                         \
N                                0x00000000  // PIOSC
X#define SYSCTL_ALTCLKCFG_ALTCLK_PIOSC                                                                         0x00000000  
N#define SYSCTL_ALTCLKCFG_ALTCLK_RTCOSC                                        \
N                                0x00000003  // Hibernation Module Real-time
X#define SYSCTL_ALTCLKCFG_ALTCLK_RTCOSC                                                                        0x00000003  
N                                            // clock output (RTCOSC)
N#define SYSCTL_ALTCLKCFG_ALTCLK_LFIOSC                                        \
N                                0x00000004  // Low-frequency internal
X#define SYSCTL_ALTCLKCFG_ALTCLK_LFIOSC                                                                        0x00000004  
N                                            // oscillator (LFIOSC)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DSLPCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DSLPCLKCFG_D_M   0x1F800000  // Divider Field Override
N#define SYSCTL_DSLPCLKCFG_O_M   0x00000070  // Clock Source
N#define SYSCTL_DSLPCLKCFG_O_IGN 0x00000000  // MOSC
N#define SYSCTL_DSLPCLKCFG_O_IO  0x00000010  // PIOSC
N#define SYSCTL_DSLPCLKCFG_O_30  0x00000030  // LFIOSC
N#define SYSCTL_DSLPCLKCFG_O_32  0x00000070  // 32.768 kHz
N#define SYSCTL_DSLPCLKCFG_PIOSCPD                                             \
N                                0x00000002  // PIOSC Power Down Request
X#define SYSCTL_DSLPCLKCFG_PIOSCPD                                                                             0x00000002  
N#define SYSCTL_DSLPCLKCFG_D_S   23
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DSCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DSCLKCFG_PIOSCPD 0x80000000  // PIOSC Power Down
N#define SYSCTL_DSCLKCFG_MOSCDPD 0x40000000  // MOSC Disable Power Down
N#define SYSCTL_DSCLKCFG_DSOSCSRC_M                                            \
N                                0x00F00000  // Deep Sleep Oscillator Source
X#define SYSCTL_DSCLKCFG_DSOSCSRC_M                                                                            0x00F00000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_PIOSC                                        \
N                                0x00000000  // PIOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_PIOSC                                                                        0x00000000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_LFIOSC                                       \
N                                0x00200000  // LFIOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_LFIOSC                                                                       0x00200000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_MOSC                                         \
N                                0x00300000  // MOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_MOSC                                                                         0x00300000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_RTC                                          \
N                                0x00400000  // Hibernation Module RTCOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_RTC                                                                          0x00400000  
N#define SYSCTL_DSCLKCFG_DSSYSDIV_M                                            \
N                                0x000003FF  // Deep Sleep Clock Divisor
X#define SYSCTL_DSCLKCFG_DSSYSDIV_M                                                                            0x000003FF  
N#define SYSCTL_DSCLKCFG_DSSYSDIV_S                                            \
N                                0
X#define SYSCTL_DSCLKCFG_DSSYSDIV_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DIVSCLK register.
N//
N//*****************************************************************************
N#define SYSCTL_DIVSCLK_EN       0x80000000  // DIVSCLK Enable
N#define SYSCTL_DIVSCLK_SRC_M    0x00030000  // Clock Source
N#define SYSCTL_DIVSCLK_SRC_SYSCLK                                             \
N                                0x00000000  // System Clock
X#define SYSCTL_DIVSCLK_SRC_SYSCLK                                                                             0x00000000  
N#define SYSCTL_DIVSCLK_SRC_PIOSC                                              \
N                                0x00010000  // PIOSC
X#define SYSCTL_DIVSCLK_SRC_PIOSC                                                                              0x00010000  
N#define SYSCTL_DIVSCLK_SRC_MOSC 0x00020000  // MOSC
N#define SYSCTL_DIVSCLK_DIV_M    0x000000FF  // Divisor Value
N#define SYSCTL_DIVSCLK_DIV_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SYSPROP register.
N//
N//*****************************************************************************
N#define SYSCTL_SYSPROP_FPU      0x00000001  // FPU Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PIOSCCAL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSCCAL_UTEN    0x80000000  // Use User Trim Value
N#define SYSCTL_PIOSCCAL_CAL     0x00000200  // Start Calibration
N#define SYSCTL_PIOSCCAL_UPDATE  0x00000100  // Update Trim
N#define SYSCTL_PIOSCCAL_UT_M    0x0000007F  // User Trim Value
N#define SYSCTL_PIOSCCAL_UT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PIOSCSTAT
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSCSTAT_DT_M   0x007F0000  // Default Trim Value
N#define SYSCTL_PIOSCSTAT_CR_M   0x00000300  // Calibration Result
N#define SYSCTL_PIOSCSTAT_CRNONE 0x00000000  // Calibration has not been
N                                            // attempted
N#define SYSCTL_PIOSCSTAT_CRPASS 0x00000100  // The last calibration operation
N                                            // completed to meet 1% accuracy
N#define SYSCTL_PIOSCSTAT_CRFAIL 0x00000200  // The last calibration operation
N                                            // failed to meet 1% accuracy
N#define SYSCTL_PIOSCSTAT_CT_M   0x0000007F  // Calibration Trim Value
N#define SYSCTL_PIOSCSTAT_DT_S   16
N#define SYSCTL_PIOSCSTAT_CT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PLLFREQ0
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PLLFREQ0_PLLPWR  0x00800000  // PLL Power
N#define SYSCTL_PLLFREQ0_MFRAC_M 0x000FFC00  // PLL M Fractional Value
N#define SYSCTL_PLLFREQ0_MINT_M  0x000003FF  // PLL M Integer Value
N#define SYSCTL_PLLFREQ0_MFRAC_S 10
N#define SYSCTL_PLLFREQ0_MINT_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PLLFREQ1
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PLLFREQ1_Q_M     0x00001F00  // PLL Q Value
N#define SYSCTL_PLLFREQ1_N_M     0x0000001F  // PLL N Value
N#define SYSCTL_PLLFREQ1_Q_S     8
N#define SYSCTL_PLLFREQ1_N_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PLLSTAT register.
N//
N//*****************************************************************************
N#define SYSCTL_PLLSTAT_LOCK     0x00000001  // PLL Lock
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SLPPWRCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SLPPWRCFG_FLASHPM_M                                            \
N                                0x00000030  // Flash Power Modes
X#define SYSCTL_SLPPWRCFG_FLASHPM_M                                                                            0x00000030  
N#define SYSCTL_SLPPWRCFG_FLASHPM_NRM                                          \
N                                0x00000000  // Active Mode
X#define SYSCTL_SLPPWRCFG_FLASHPM_NRM                                                                          0x00000000  
N#define SYSCTL_SLPPWRCFG_FLASHPM_SLP                                          \
N                                0x00000020  // Low Power Mode
X#define SYSCTL_SLPPWRCFG_FLASHPM_SLP                                                                          0x00000020  
N#define SYSCTL_SLPPWRCFG_SRAMPM_M                                             \
N                                0x00000003  // SRAM Power Modes
X#define SYSCTL_SLPPWRCFG_SRAMPM_M                                                                             0x00000003  
N#define SYSCTL_SLPPWRCFG_SRAMPM_NRM                                           \
N                                0x00000000  // Active Mode
X#define SYSCTL_SLPPWRCFG_SRAMPM_NRM                                                                           0x00000000  
N#define SYSCTL_SLPPWRCFG_SRAMPM_SBY                                           \
N                                0x00000001  // Standby Mode
X#define SYSCTL_SLPPWRCFG_SRAMPM_SBY                                                                           0x00000001  
N#define SYSCTL_SLPPWRCFG_SRAMPM_LP                                            \
N                                0x00000003  // Low Power Mode
X#define SYSCTL_SLPPWRCFG_SRAMPM_LP                                                                            0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DSLPPWRCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DSLPPWRCFG_LDOSM 0x00000200  // LDO Sleep Mode
N#define SYSCTL_DSLPPWRCFG_TSPD  0x00000100  // Temperature Sense Power Down
N#define SYSCTL_DSLPPWRCFG_FLASHPM_M                                           \
N                                0x00000030  // Flash Power Modes
X#define SYSCTL_DSLPPWRCFG_FLASHPM_M                                                                           0x00000030  
N#define SYSCTL_DSLPPWRCFG_FLASHPM_NRM                                         \
N                                0x00000000  // Active Mode
X#define SYSCTL_DSLPPWRCFG_FLASHPM_NRM                                                                         0x00000000  
N#define SYSCTL_DSLPPWRCFG_FLASHPM_SLP                                         \
N                                0x00000020  // Low Power Mode
X#define SYSCTL_DSLPPWRCFG_FLASHPM_SLP                                                                         0x00000020  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_M                                            \
N                                0x00000003  // SRAM Power Modes
X#define SYSCTL_DSLPPWRCFG_SRAMPM_M                                                                            0x00000003  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_NRM                                          \
N                                0x00000000  // Active Mode
X#define SYSCTL_DSLPPWRCFG_SRAMPM_NRM                                                                          0x00000000  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_SBY                                          \
N                                0x00000001  // Standby Mode
X#define SYSCTL_DSLPPWRCFG_SRAMPM_SBY                                                                          0x00000001  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_LP                                           \
N                                0x00000003  // Low Power Mode
X#define SYSCTL_DSLPPWRCFG_SRAMPM_LP                                                                           0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC9 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC9_ADC1DC7      0x00800000  // ADC1 DC7 Present
N#define SYSCTL_DC9_ADC1DC6      0x00400000  // ADC1 DC6 Present
N#define SYSCTL_DC9_ADC1DC5      0x00200000  // ADC1 DC5 Present
N#define SYSCTL_DC9_ADC1DC4      0x00100000  // ADC1 DC4 Present
N#define SYSCTL_DC9_ADC1DC3      0x00080000  // ADC1 DC3 Present
N#define SYSCTL_DC9_ADC1DC2      0x00040000  // ADC1 DC2 Present
N#define SYSCTL_DC9_ADC1DC1      0x00020000  // ADC1 DC1 Present
N#define SYSCTL_DC9_ADC1DC0      0x00010000  // ADC1 DC0 Present
N#define SYSCTL_DC9_ADC0DC7      0x00000080  // ADC0 DC7 Present
N#define SYSCTL_DC9_ADC0DC6      0x00000040  // ADC0 DC6 Present
N#define SYSCTL_DC9_ADC0DC5      0x00000020  // ADC0 DC5 Present
N#define SYSCTL_DC9_ADC0DC4      0x00000010  // ADC0 DC4 Present
N#define SYSCTL_DC9_ADC0DC3      0x00000008  // ADC0 DC3 Present
N#define SYSCTL_DC9_ADC0DC2      0x00000004  // ADC0 DC2 Present
N#define SYSCTL_DC9_ADC0DC1      0x00000002  // ADC0 DC1 Present
N#define SYSCTL_DC9_ADC0DC0      0x00000001  // ADC0 DC0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_NVMSTAT register.
N//
N//*****************************************************************************
N#define SYSCTL_NVMSTAT_FWB      0x00000001  // 32 Word Flash Write Buffer
N                                            // Available
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_LDOSPCTL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_LDOSPCTL_VADJEN  0x80000000  // Voltage Adjust Enable
N#define SYSCTL_LDOSPCTL_VLDO_M  0x000000FF  // LDO Output Voltage
N#define SYSCTL_LDOSPCTL_VLDO_0_90V                                            \
N                                0x00000012  // 0.90 V
X#define SYSCTL_LDOSPCTL_VLDO_0_90V                                                                            0x00000012  
N#define SYSCTL_LDOSPCTL_VLDO_0_95V                                            \
N                                0x00000013  // 0.95 V
X#define SYSCTL_LDOSPCTL_VLDO_0_95V                                                                            0x00000013  
N#define SYSCTL_LDOSPCTL_VLDO_1_00V                                            \
N                                0x00000014  // 1.00 V
X#define SYSCTL_LDOSPCTL_VLDO_1_00V                                                                            0x00000014  
N#define SYSCTL_LDOSPCTL_VLDO_1_05V                                            \
N                                0x00000015  // 1.05 V
X#define SYSCTL_LDOSPCTL_VLDO_1_05V                                                                            0x00000015  
N#define SYSCTL_LDOSPCTL_VLDO_1_10V                                            \
N                                0x00000016  // 1.10 V
X#define SYSCTL_LDOSPCTL_VLDO_1_10V                                                                            0x00000016  
N#define SYSCTL_LDOSPCTL_VLDO_1_15V                                            \
N                                0x00000017  // 1.15 V
X#define SYSCTL_LDOSPCTL_VLDO_1_15V                                                                            0x00000017  
N#define SYSCTL_LDOSPCTL_VLDO_1_20V                                            \
N                                0x00000018  // 1.20 V
X#define SYSCTL_LDOSPCTL_VLDO_1_20V                                                                            0x00000018  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_LDODPCTL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_LDODPCTL_VADJEN  0x80000000  // Voltage Adjust Enable
N#define SYSCTL_LDODPCTL_VLDO_M  0x000000FF  // LDO Output Voltage
N#define SYSCTL_LDODPCTL_VLDO_0_90V                                            \
N                                0x00000012  // 0.90 V
X#define SYSCTL_LDODPCTL_VLDO_0_90V                                                                            0x00000012  
N#define SYSCTL_LDODPCTL_VLDO_0_95V                                            \
N                                0x00000013  // 0.95 V
X#define SYSCTL_LDODPCTL_VLDO_0_95V                                                                            0x00000013  
N#define SYSCTL_LDODPCTL_VLDO_1_00V                                            \
N                                0x00000014  // 1.00 V
X#define SYSCTL_LDODPCTL_VLDO_1_00V                                                                            0x00000014  
N#define SYSCTL_LDODPCTL_VLDO_1_05V                                            \
N                                0x00000015  // 1.05 V
X#define SYSCTL_LDODPCTL_VLDO_1_05V                                                                            0x00000015  
N#define SYSCTL_LDODPCTL_VLDO_1_10V                                            \
N                                0x00000016  // 1.10 V
X#define SYSCTL_LDODPCTL_VLDO_1_10V                                                                            0x00000016  
N#define SYSCTL_LDODPCTL_VLDO_1_15V                                            \
N                                0x00000017  // 1.15 V
X#define SYSCTL_LDODPCTL_VLDO_1_15V                                                                            0x00000017  
N#define SYSCTL_LDODPCTL_VLDO_1_20V                                            \
N                                0x00000018  // 1.20 V
X#define SYSCTL_LDODPCTL_VLDO_1_20V                                                                            0x00000018  
N#define SYSCTL_LDODPCTL_VLDO_1_25V                                            \
N                                0x00000019  // 1.25 V
X#define SYSCTL_LDODPCTL_VLDO_1_25V                                                                            0x00000019  
N#define SYSCTL_LDODPCTL_VLDO_1_30V                                            \
N                                0x0000001A  // 1.30 V
X#define SYSCTL_LDODPCTL_VLDO_1_30V                                                                            0x0000001A  
N#define SYSCTL_LDODPCTL_VLDO_1_35V                                            \
N                                0x0000001B  // 1.35 V
X#define SYSCTL_LDODPCTL_VLDO_1_35V                                                                            0x0000001B  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RESBEHAVCTL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RESBEHAVCTL_WDOG1_M                                            \
N                                0x000000C0  // Watchdog 1 Reset Operation
X#define SYSCTL_RESBEHAVCTL_WDOG1_M                                                                            0x000000C0  
N#define SYSCTL_RESBEHAVCTL_WDOG1_SYSRST                                       \
N                                0x00000080  // Watchdog 1 issues a system
X#define SYSCTL_RESBEHAVCTL_WDOG1_SYSRST                                                                       0x00000080  
N                                            // reset. The application starts
N                                            // within 10 us
N#define SYSCTL_RESBEHAVCTL_WDOG1_POR                                          \
N                                0x000000C0  // Watchdog 1 issues a simulated
X#define SYSCTL_RESBEHAVCTL_WDOG1_POR                                                                          0x000000C0  
N                                            // POR sequence. Application starts
N                                            // less than 500 us after
N                                            // deassertion (Default)
N#define SYSCTL_RESBEHAVCTL_WDOG0_M                                            \
N                                0x00000030  // Watchdog 0 Reset Operation
X#define SYSCTL_RESBEHAVCTL_WDOG0_M                                                                            0x00000030  
N#define SYSCTL_RESBEHAVCTL_WDOG0_SYSRST                                       \
N                                0x00000020  // Watchdog 0 issues a system
X#define SYSCTL_RESBEHAVCTL_WDOG0_SYSRST                                                                       0x00000020  
N                                            // reset. The application starts
N                                            // within 10 us
N#define SYSCTL_RESBEHAVCTL_WDOG0_POR                                          \
N                                0x00000030  // Watchdog 0 issues a simulated
X#define SYSCTL_RESBEHAVCTL_WDOG0_POR                                                                          0x00000030  
N                                            // POR sequence. Application starts
N                                            // less than 500 us after
N                                            // deassertion (Default)
N#define SYSCTL_RESBEHAVCTL_BOR_M                                              \
N                                0x0000000C  // BOR Reset operation
X#define SYSCTL_RESBEHAVCTL_BOR_M                                                                              0x0000000C  
N#define SYSCTL_RESBEHAVCTL_BOR_SYSRST                                         \
N                                0x00000008  // Brown Out Reset issues system
X#define SYSCTL_RESBEHAVCTL_BOR_SYSRST                                                                         0x00000008  
N                                            // reset. The application starts
N                                            // within 10 us
N#define SYSCTL_RESBEHAVCTL_BOR_POR                                            \
N                                0x0000000C  // Brown Out Reset issues a
X#define SYSCTL_RESBEHAVCTL_BOR_POR                                                                            0x0000000C  
N                                            // simulated POR sequence. The
N                                            // application starts less than 500
N                                            // us after deassertion (Default)
N#define SYSCTL_RESBEHAVCTL_EXTRES_M                                           \
N                                0x00000003  // External RST Pin Operation
X#define SYSCTL_RESBEHAVCTL_EXTRES_M                                                                           0x00000003  
N#define SYSCTL_RESBEHAVCTL_EXTRES_SYSRST                                      \
N                                0x00000002  // External RST assertion issues a
X#define SYSCTL_RESBEHAVCTL_EXTRES_SYSRST                                                                      0x00000002  
N                                            // system reset. The application
N                                            // starts within 10 us
N#define SYSCTL_RESBEHAVCTL_EXTRES_POR                                         \
N                                0x00000003  // External RST assertion issues a
X#define SYSCTL_RESBEHAVCTL_EXTRES_POR                                                                         0x00000003  
N                                            // simulated POR sequence.
N                                            // Application starts less than 500
N                                            // us after deassertion (Default)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_HSSR register.
N//
N//*****************************************************************************
N#define SYSCTL_HSSR_KEY_M       0xFF000000  // Write Key
N#define SYSCTL_HSSR_CDOFF_M     0x00FFFFFF  // Command Descriptor Pointer
N#define SYSCTL_HSSR_KEY_S       24
N#define SYSCTL_HSSR_CDOFF_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_USBPDS register.
N//
N//*****************************************************************************
N#define SYSCTL_USBPDS_MEMSTAT_M 0x0000000C  // Memory Array Power Status
N#define SYSCTL_USBPDS_MEMSTAT_OFF                                             \
N                                0x00000000  // Array OFF
X#define SYSCTL_USBPDS_MEMSTAT_OFF                                                                             0x00000000  
N#define SYSCTL_USBPDS_MEMSTAT_RETAIN                                          \
N                                0x00000004  // SRAM Retention
X#define SYSCTL_USBPDS_MEMSTAT_RETAIN                                                                          0x00000004  
N#define SYSCTL_USBPDS_MEMSTAT_ON                                              \
N                                0x0000000C  // Array On
X#define SYSCTL_USBPDS_MEMSTAT_ON                                                                              0x0000000C  
N#define SYSCTL_USBPDS_PWRSTAT_M 0x00000003  // Power Domain Status
N#define SYSCTL_USBPDS_PWRSTAT_OFF                                             \
N                                0x00000000  // OFF
X#define SYSCTL_USBPDS_PWRSTAT_OFF                                                                             0x00000000  
N#define SYSCTL_USBPDS_PWRSTAT_ON                                              \
N                                0x00000003  // ON
X#define SYSCTL_USBPDS_PWRSTAT_ON                                                                              0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_USBMPC register.
N//
N//*****************************************************************************
N#define SYSCTL_USBMPC_PWRCTL_M  0x00000003  // Memory Array Power Control
N#define SYSCTL_USBMPC_PWRCTL_OFF                                              \
N                                0x00000000  // Array OFF
X#define SYSCTL_USBMPC_PWRCTL_OFF                                                                              0x00000000  
N#define SYSCTL_USBMPC_PWRCTL_RETAIN                                           \
N                                0x00000001  // SRAM Retention
X#define SYSCTL_USBMPC_PWRCTL_RETAIN                                                                           0x00000001  
N#define SYSCTL_USBMPC_PWRCTL_ON 0x00000003  // Array On
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_EMACPDS register.
N//
N//*****************************************************************************
N#define SYSCTL_EMACPDS_MEMSTAT_M                                              \
N                                0x0000000C  // Memory Array Power Status
X#define SYSCTL_EMACPDS_MEMSTAT_M                                                                              0x0000000C  
N#define SYSCTL_EMACPDS_MEMSTAT_OFF                                            \
N                                0x00000000  // Array OFF
X#define SYSCTL_EMACPDS_MEMSTAT_OFF                                                                            0x00000000  
N#define SYSCTL_EMACPDS_MEMSTAT_ON                                             \
N                                0x0000000C  // Array On
X#define SYSCTL_EMACPDS_MEMSTAT_ON                                                                             0x0000000C  
N#define SYSCTL_EMACPDS_PWRSTAT_M                                              \
N                                0x00000003  // Power Domain Status
X#define SYSCTL_EMACPDS_PWRSTAT_M                                                                              0x00000003  
N#define SYSCTL_EMACPDS_PWRSTAT_OFF                                            \
N                                0x00000000  // OFF
X#define SYSCTL_EMACPDS_PWRSTAT_OFF                                                                            0x00000000  
N#define SYSCTL_EMACPDS_PWRSTAT_ON                                             \
N                                0x00000003  // ON
X#define SYSCTL_EMACPDS_PWRSTAT_ON                                                                             0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_EMACMPC register.
N//
N//*****************************************************************************
N#define SYSCTL_EMACMPC_PWRCTL_M 0x00000003  // Memory Array Power Control
N#define SYSCTL_EMACMPC_PWRCTL_OFF                                             \
N                                0x00000000  // Array OFF
X#define SYSCTL_EMACMPC_PWRCTL_OFF                                                                             0x00000000  
N#define SYSCTL_EMACMPC_PWRCTL_ON                                              \
N                                0x00000003  // Array On
X#define SYSCTL_EMACMPC_PWRCTL_ON                                                                              0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_LCDMPC register.
N//
N//*****************************************************************************
N#define SYSCTL_LCDMPC_PWRCTL_M  0x00000003  // Memory Array Power Control
N#define SYSCTL_LCDMPC_PWRCTL_OFF                                              \
N                                0x00000000  // Array OFF
X#define SYSCTL_LCDMPC_PWRCTL_OFF                                                                              0x00000000  
N#define SYSCTL_LCDMPC_PWRCTL_ON 0x00000003  // Array On
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPWD register.
N//
N//*****************************************************************************
N#define SYSCTL_PPWD_P1          0x00000002  // Watchdog Timer 1 Present
N#define SYSCTL_PPWD_P0          0x00000001  // Watchdog Timer 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_PPTIMER_P7       0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Present
N#define SYSCTL_PPTIMER_P6       0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Present
N#define SYSCTL_PPTIMER_P5       0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Present
N#define SYSCTL_PPTIMER_P4       0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Present
N#define SYSCTL_PPTIMER_P3       0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Present
N#define SYSCTL_PPTIMER_P2       0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Present
N#define SYSCTL_PPTIMER_P1       0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Present
N#define SYSCTL_PPTIMER_P0       0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_PPGPIO_P17       0x00020000  // GPIO Port T Present
N#define SYSCTL_PPGPIO_P16       0x00010000  // GPIO Port S Present
N#define SYSCTL_PPGPIO_P15       0x00008000  // GPIO Port R Present
N#define SYSCTL_PPGPIO_P14       0x00004000  // GPIO Port Q Present
N#define SYSCTL_PPGPIO_P13       0x00002000  // GPIO Port P Present
N#define SYSCTL_PPGPIO_P12       0x00001000  // GPIO Port N Present
N#define SYSCTL_PPGPIO_P11       0x00000800  // GPIO Port M Present
N#define SYSCTL_PPGPIO_P10       0x00000400  // GPIO Port L Present
N#define SYSCTL_PPGPIO_P9        0x00000200  // GPIO Port K Present
N#define SYSCTL_PPGPIO_P8        0x00000100  // GPIO Port J Present
N#define SYSCTL_PPGPIO_P7        0x00000080  // GPIO Port H Present
N#define SYSCTL_PPGPIO_P6        0x00000040  // GPIO Port G Present
N#define SYSCTL_PPGPIO_P5        0x00000020  // GPIO Port F Present
N#define SYSCTL_PPGPIO_P4        0x00000010  // GPIO Port E Present
N#define SYSCTL_PPGPIO_P3        0x00000008  // GPIO Port D Present
N#define SYSCTL_PPGPIO_P2        0x00000004  // GPIO Port C Present
N#define SYSCTL_PPGPIO_P1        0x00000002  // GPIO Port B Present
N#define SYSCTL_PPGPIO_P0        0x00000001  // GPIO Port A Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_PPDMA_P0         0x00000001  // uDMA Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEPI_P0         0x00000001  // EPI Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_PPHIB_P0         0x00000001  // Hibernation Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPUART register.
N//
N//*****************************************************************************
N#define SYSCTL_PPUART_P7        0x00000080  // UART Module 7 Present
N#define SYSCTL_PPUART_P6        0x00000040  // UART Module 6 Present
N#define SYSCTL_PPUART_P5        0x00000020  // UART Module 5 Present
N#define SYSCTL_PPUART_P4        0x00000010  // UART Module 4 Present
N#define SYSCTL_PPUART_P3        0x00000008  // UART Module 3 Present
N#define SYSCTL_PPUART_P2        0x00000004  // UART Module 2 Present
N#define SYSCTL_PPUART_P1        0x00000002  // UART Module 1 Present
N#define SYSCTL_PPUART_P0        0x00000001  // UART Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPSSI_P3         0x00000008  // SSI Module 3 Present
N#define SYSCTL_PPSSI_P2         0x00000004  // SSI Module 2 Present
N#define SYSCTL_PPSSI_P1         0x00000002  // SSI Module 1 Present
N#define SYSCTL_PPSSI_P0         0x00000001  // SSI Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_PPI2C_P9         0x00000200  // I2C Module 9 Present
N#define SYSCTL_PPI2C_P8         0x00000100  // I2C Module 8 Present
N#define SYSCTL_PPI2C_P7         0x00000080  // I2C Module 7 Present
N#define SYSCTL_PPI2C_P6         0x00000040  // I2C Module 6 Present
N#define SYSCTL_PPI2C_P5         0x00000020  // I2C Module 5 Present
N#define SYSCTL_PPI2C_P4         0x00000010  // I2C Module 4 Present
N#define SYSCTL_PPI2C_P3         0x00000008  // I2C Module 3 Present
N#define SYSCTL_PPI2C_P2         0x00000004  // I2C Module 2 Present
N#define SYSCTL_PPI2C_P1         0x00000002  // I2C Module 1 Present
N#define SYSCTL_PPI2C_P0         0x00000001  // I2C Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_PPUSB_P0         0x00000001  // USB Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEPHY_P0        0x00000001  // Ethernet PHY Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PPCAN_P1         0x00000002  // CAN Module 1 Present
N#define SYSCTL_PPCAN_P0         0x00000001  // CAN Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPADC register.
N//
N//*****************************************************************************
N#define SYSCTL_PPADC_P1         0x00000002  // ADC Module 1 Present
N#define SYSCTL_PPADC_P0         0x00000001  // ADC Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_PPACMP_P0        0x00000001  // Analog Comparator Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_PPPWM_P1         0x00000002  // PWM Module 1 Present
N#define SYSCTL_PPPWM_P0         0x00000001  // PWM Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPQEI_P1         0x00000002  // QEI Module 1 Present
N#define SYSCTL_PPQEI_P0         0x00000001  // QEI Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPLPC register.
N//
N//*****************************************************************************
N#define SYSCTL_PPLPC_P0         0x00000001  // LPC Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPPECI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPPECI_P0        0x00000001  // PECI Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPFAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PPFAN_P0         0x00000001  // FAN Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEEPROM_P0      0x00000001  // EEPROM Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PPWTIMER_P5      0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Present
N#define SYSCTL_PPWTIMER_P4      0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Present
N#define SYSCTL_PPWTIMER_P3      0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Present
N#define SYSCTL_PPWTIMER_P2      0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Present
N#define SYSCTL_PPWTIMER_P1      0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Present
N#define SYSCTL_PPWTIMER_P0      0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPRTS register.
N//
N//*****************************************************************************
N#define SYSCTL_PPRTS_P0         0x00000001  // RTS Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_PPCCM_P0         0x00000001  // CRC and Cryptographic Modules
N                                            // Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_PPLCD_P0         0x00000001  // LCD Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPOWIRE register.
N//
N//*****************************************************************************
N#define SYSCTL_PPOWIRE_P0       0x00000001  // 1-Wire Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEMAC_P0        0x00000001  // Ethernet Controller Module
N                                            // Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPHIM register.
N//
N//*****************************************************************************
N#define SYSCTL_PPHIM_P0         0x00000001  // HIM Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRWD register.
N//
N//*****************************************************************************
N#define SYSCTL_SRWD_R1          0x00000002  // Watchdog Timer 1 Software Reset
N#define SYSCTL_SRWD_R0          0x00000001  // Watchdog Timer 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_SRTIMER_R7       0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Software Reset
N#define SYSCTL_SRTIMER_R6       0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Software Reset
N#define SYSCTL_SRTIMER_R5       0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Software Reset
N#define SYSCTL_SRTIMER_R4       0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Software Reset
N#define SYSCTL_SRTIMER_R3       0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Software Reset
N#define SYSCTL_SRTIMER_R2       0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Software Reset
N#define SYSCTL_SRTIMER_R1       0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Software Reset
N#define SYSCTL_SRTIMER_R0       0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_SRGPIO_R17       0x00020000  // GPIO Port T Software Reset
N#define SYSCTL_SRGPIO_R16       0x00010000  // GPIO Port S Software Reset
N#define SYSCTL_SRGPIO_R15       0x00008000  // GPIO Port R Software Reset
N#define SYSCTL_SRGPIO_R14       0x00004000  // GPIO Port Q Software Reset
N#define SYSCTL_SRGPIO_R13       0x00002000  // GPIO Port P Software Reset
N#define SYSCTL_SRGPIO_R12       0x00001000  // GPIO Port N Software Reset
N#define SYSCTL_SRGPIO_R11       0x00000800  // GPIO Port M Software Reset
N#define SYSCTL_SRGPIO_R10       0x00000400  // GPIO Port L Software Reset
N#define SYSCTL_SRGPIO_R9        0x00000200  // GPIO Port K Software Reset
N#define SYSCTL_SRGPIO_R8        0x00000100  // GPIO Port J Software Reset
N#define SYSCTL_SRGPIO_R7        0x00000080  // GPIO Port H Software Reset
N#define SYSCTL_SRGPIO_R6        0x00000040  // GPIO Port G Software Reset
N#define SYSCTL_SRGPIO_R5        0x00000020  // GPIO Port F Software Reset
N#define SYSCTL_SRGPIO_R4        0x00000010  // GPIO Port E Software Reset
N#define SYSCTL_SRGPIO_R3        0x00000008  // GPIO Port D Software Reset
N#define SYSCTL_SRGPIO_R2        0x00000004  // GPIO Port C Software Reset
N#define SYSCTL_SRGPIO_R1        0x00000002  // GPIO Port B Software Reset
N#define SYSCTL_SRGPIO_R0        0x00000001  // GPIO Port A Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_SRDMA_R0         0x00000001  // uDMA Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREPI register.
N//
N//*****************************************************************************
N#define SYSCTL_SREPI_R0         0x00000001  // EPI Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_SRHIB_R0         0x00000001  // Hibernation Module Software
N                                            // Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRUART register.
N//
N//*****************************************************************************
N#define SYSCTL_SRUART_R7        0x00000080  // UART Module 7 Software Reset
N#define SYSCTL_SRUART_R6        0x00000040  // UART Module 6 Software Reset
N#define SYSCTL_SRUART_R5        0x00000020  // UART Module 5 Software Reset
N#define SYSCTL_SRUART_R4        0x00000010  // UART Module 4 Software Reset
N#define SYSCTL_SRUART_R3        0x00000008  // UART Module 3 Software Reset
N#define SYSCTL_SRUART_R2        0x00000004  // UART Module 2 Software Reset
N#define SYSCTL_SRUART_R1        0x00000002  // UART Module 1 Software Reset
N#define SYSCTL_SRUART_R0        0x00000001  // UART Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_SRSSI_R3         0x00000008  // SSI Module 3 Software Reset
N#define SYSCTL_SRSSI_R2         0x00000004  // SSI Module 2 Software Reset
N#define SYSCTL_SRSSI_R1         0x00000002  // SSI Module 1 Software Reset
N#define SYSCTL_SRSSI_R0         0x00000001  // SSI Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_SRI2C_R9         0x00000200  // I2C Module 9 Software Reset
N#define SYSCTL_SRI2C_R8         0x00000100  // I2C Module 8 Software Reset
N#define SYSCTL_SRI2C_R7         0x00000080  // I2C Module 7 Software Reset
N#define SYSCTL_SRI2C_R6         0x00000040  // I2C Module 6 Software Reset
N#define SYSCTL_SRI2C_R5         0x00000020  // I2C Module 5 Software Reset
N#define SYSCTL_SRI2C_R4         0x00000010  // I2C Module 4 Software Reset
N#define SYSCTL_SRI2C_R3         0x00000008  // I2C Module 3 Software Reset
N#define SYSCTL_SRI2C_R2         0x00000004  // I2C Module 2 Software Reset
N#define SYSCTL_SRI2C_R1         0x00000002  // I2C Module 1 Software Reset
N#define SYSCTL_SRI2C_R0         0x00000001  // I2C Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_SRUSB_R0         0x00000001  // USB Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_SREPHY_R0        0x00000001  // Ethernet PHY Module Software
N                                            // Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCAN_R1         0x00000002  // CAN Module 1 Software Reset
N#define SYSCTL_SRCAN_R0         0x00000001  // CAN Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRADC register.
N//
N//*****************************************************************************
N#define SYSCTL_SRADC_R1         0x00000002  // ADC Module 1 Software Reset
N#define SYSCTL_SRADC_R0         0x00000001  // ADC Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_SRACMP_R0        0x00000001  // Analog Comparator Module 0
N                                            // Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_SRPWM_R1         0x00000002  // PWM Module 1 Software Reset
N#define SYSCTL_SRPWM_R0         0x00000001  // PWM Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_SRQEI_R1         0x00000002  // QEI Module 1 Software Reset
N#define SYSCTL_SRQEI_R0         0x00000001  // QEI Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SREEPROM_R0      0x00000001  // EEPROM Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SRWTIMER_R5      0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Software Reset
N#define SYSCTL_SRWTIMER_R4      0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Software Reset
N#define SYSCTL_SRWTIMER_R3      0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Software Reset
N#define SYSCTL_SRWTIMER_R2      0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Software Reset
N#define SYSCTL_SRWTIMER_R1      0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Software Reset
N#define SYSCTL_SRWTIMER_R0      0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCCM_R0         0x00000001  // CRC and Cryptographic Modules
N                                            // Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_SRLCD_R0         0x00000001  // LCD Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SROWIRE register.
N//
N//*****************************************************************************
N#define SYSCTL_SROWIRE_R0       0x00000001  // 1-Wire Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_SREMAC_R0        0x00000001  // Ethernet Controller MAC Module 0
N                                            // Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCWD_R1        0x00000002  // Watchdog Timer 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCWD_R0        0x00000001  // Watchdog Timer 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCTIMER_R7     0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R6     0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R5     0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R4     0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R3     0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R2     0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R1     0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R0     0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Run Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCGPIO
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCGPIO_R17     0x00020000  // GPIO Port T Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R16     0x00010000  // GPIO Port S Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R15     0x00008000  // GPIO Port R Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R14     0x00004000  // GPIO Port Q Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R13     0x00002000  // GPIO Port P Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R12     0x00001000  // GPIO Port N Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R11     0x00000800  // GPIO Port M Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R10     0x00000400  // GPIO Port L Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R9      0x00000200  // GPIO Port K Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R8      0x00000100  // GPIO Port J Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R7      0x00000080  // GPIO Port H Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R6      0x00000040  // GPIO Port G Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R5      0x00000020  // GPIO Port F Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R4      0x00000010  // GPIO Port E Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R3      0x00000008  // GPIO Port D Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R2      0x00000004  // GPIO Port C Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R1      0x00000002  // GPIO Port B Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R0      0x00000001  // GPIO Port A Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCDMA_R0       0x00000001  // uDMA Module Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEPI_R0       0x00000001  // EPI Module Run Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCHIB_R0       0x00000001  // Hibernation Module Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCUART
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCUART_R7      0x00000080  // UART Module 7 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R6      0x00000040  // UART Module 6 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R5      0x00000020  // UART Module 5 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R4      0x00000010  // UART Module 4 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R3      0x00000008  // UART Module 3 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R2      0x00000004  // UART Module 2 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R1      0x00000002  // UART Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R0      0x00000001  // UART Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCSSI_R3       0x00000008  // SSI Module 3 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCSSI_R2       0x00000004  // SSI Module 2 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCSSI_R1       0x00000002  // SSI Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCSSI_R0       0x00000001  // SSI Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCI2C_R9       0x00000200  // I2C Module 9 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R8       0x00000100  // I2C Module 8 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R7       0x00000080  // I2C Module 7 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R6       0x00000040  // I2C Module 6 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R5       0x00000020  // I2C Module 5 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R4       0x00000010  // I2C Module 4 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R3       0x00000008  // I2C Module 3 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R2       0x00000004  // I2C Module 2 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R1       0x00000002  // I2C Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R0       0x00000001  // I2C Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCUSB_R0       0x00000001  // USB Module Run Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEPHY
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEPHY_R0      0x00000001  // Ethernet PHY Module Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCCAN_R1       0x00000002  // CAN Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCCAN_R0       0x00000001  // CAN Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCADC_R1       0x00000002  // ADC Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCADC_R0       0x00000001  // ADC Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCACMP
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCACMP_R0      0x00000001  // Analog Comparator Module 0 Run
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCPWM_R1       0x00000002  // PWM Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCPWM_R0       0x00000001  // PWM Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCQEI_R1       0x00000002  // QEI Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCQEI_R0       0x00000001  // QEI Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEEPROM_R0    0x00000001  // EEPROM Module Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCWTIMER_R5    0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER_R4    0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER_R3    0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER_R2    0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER_R1    0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER_R0    0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Run Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCCCM_R0       0x00000001  // CRC and Cryptographic Modules
N                                            // Run Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCLCD_R0       0x00000001  // LCD Controller Module 0 Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCOWIRE
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCOWIRE_R0     0x00000001  // 1-Wire Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEMAC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEMAC_R0      0x00000001  // Ethernet MAC Module 0 Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCWD_S1        0x00000002  // Watchdog Timer 1 Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCWD_S0        0x00000001  // Watchdog Timer 0 Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCTIMER_S7     0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S6     0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S5     0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S4     0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S3     0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S2     0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S1     0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S0     0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCGPIO
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCGPIO_S17     0x00020000  // GPIO Port T Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S16     0x00010000  // GPIO Port S Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S15     0x00008000  // GPIO Port R Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S14     0x00004000  // GPIO Port Q Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S13     0x00002000  // GPIO Port P Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S12     0x00001000  // GPIO Port N Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S11     0x00000800  // GPIO Port M Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S10     0x00000400  // GPIO Port L Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S9      0x00000200  // GPIO Port K Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S8      0x00000100  // GPIO Port J Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S7      0x00000080  // GPIO Port H Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S6      0x00000040  // GPIO Port G Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S5      0x00000020  // GPIO Port F Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S4      0x00000010  // GPIO Port E Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S3      0x00000008  // GPIO Port D Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S2      0x00000004  // GPIO Port C Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S1      0x00000002  // GPIO Port B Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S0      0x00000001  // GPIO Port A Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCDMA_S0       0x00000001  // uDMA Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEPI_S0       0x00000001  // EPI Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCHIB_S0       0x00000001  // Hibernation Module Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCUART
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCUART_S7      0x00000080  // UART Module 7 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S6      0x00000040  // UART Module 6 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S5      0x00000020  // UART Module 5 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S4      0x00000010  // UART Module 4 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S3      0x00000008  // UART Module 3 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S2      0x00000004  // UART Module 2 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S1      0x00000002  // UART Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S0      0x00000001  // UART Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCSSI_S3       0x00000008  // SSI Module 3 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCSSI_S2       0x00000004  // SSI Module 2 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCSSI_S1       0x00000002  // SSI Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCSSI_S0       0x00000001  // SSI Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCI2C_S9       0x00000200  // I2C Module 9 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S8       0x00000100  // I2C Module 8 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S7       0x00000080  // I2C Module 7 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S6       0x00000040  // I2C Module 6 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S5       0x00000020  // I2C Module 5 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S4       0x00000010  // I2C Module 4 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S3       0x00000008  // I2C Module 3 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S2       0x00000004  // I2C Module 2 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S1       0x00000002  // I2C Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S0       0x00000001  // I2C Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCUSB_S0       0x00000001  // USB Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEPHY
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEPHY_S0      0x00000001  // PHY Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCCAN_S1       0x00000002  // CAN Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCCAN_S0       0x00000001  // CAN Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCADC_S1       0x00000002  // ADC Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCADC_S0       0x00000001  // ADC Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCACMP
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCACMP_S0      0x00000001  // Analog Comparator Module 0 Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCPWM_S1       0x00000002  // PWM Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCPWM_S0       0x00000001  // PWM Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCQEI_S1       0x00000002  // QEI Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCQEI_S0       0x00000001  // QEI Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEEPROM_S0    0x00000001  // EEPROM Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCWTIMER_S5    0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER_S4    0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER_S3    0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER_S2    0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER_S1    0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER_S0    0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCCCM_S0       0x00000001  // CRC and Cryptographic Modules
N                                            // Sleep Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCLCD_S0       0x00000001  // LCD Controller Module 0 Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCOWIRE
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCOWIRE_S0     0x00000001  // 1-Wire Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEMAC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEMAC_S0      0x00000001  // Ethernet MAC Module 0 Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCWD_D1        0x00000002  // Watchdog Timer 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCWD_D0        0x00000001  // Watchdog Timer 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCTIMER_D7     0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D6     0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D5     0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D4     0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D3     0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D2     0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D1     0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D0     0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Deep-Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCGPIO
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCGPIO_D17     0x00020000  // GPIO Port T Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D16     0x00010000  // GPIO Port S Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D15     0x00008000  // GPIO Port R Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D14     0x00004000  // GPIO Port Q Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D13     0x00002000  // GPIO Port P Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D12     0x00001000  // GPIO Port N Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D11     0x00000800  // GPIO Port M Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D10     0x00000400  // GPIO Port L Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D9      0x00000200  // GPIO Port K Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D8      0x00000100  // GPIO Port J Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D7      0x00000080  // GPIO Port H Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D6      0x00000040  // GPIO Port G Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D5      0x00000020  // GPIO Port F Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D4      0x00000010  // GPIO Port E Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D3      0x00000008  // GPIO Port D Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D2      0x00000004  // GPIO Port C Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D1      0x00000002  // GPIO Port B Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D0      0x00000001  // GPIO Port A Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCDMA_D0       0x00000001  // uDMA Module Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEPI_D0       0x00000001  // EPI Module Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCHIB_D0       0x00000001  // Hibernation Module Deep-Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCUART
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCUART_D7      0x00000080  // UART Module 7 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D6      0x00000040  // UART Module 6 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D5      0x00000020  // UART Module 5 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D4      0x00000010  // UART Module 4 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D3      0x00000008  // UART Module 3 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D2      0x00000004  // UART Module 2 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D1      0x00000002  // UART Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D0      0x00000001  // UART Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCSSI_D3       0x00000008  // SSI Module 3 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCSSI_D2       0x00000004  // SSI Module 2 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCSSI_D1       0x00000002  // SSI Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCSSI_D0       0x00000001  // SSI Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCI2C_D9       0x00000200  // I2C Module 9 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D8       0x00000100  // I2C Module 8 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D7       0x00000080  // I2C Module 7 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D6       0x00000040  // I2C Module 6 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D5       0x00000020  // I2C Module 5 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D4       0x00000010  // I2C Module 4 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D3       0x00000008  // I2C Module 3 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D2       0x00000004  // I2C Module 2 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D1       0x00000002  // I2C Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D0       0x00000001  // I2C Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCUSB_D0       0x00000001  // USB Module Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEPHY
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEPHY_D0      0x00000001  // PHY Module Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCCAN_D1       0x00000002  // CAN Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCCAN_D0       0x00000001  // CAN Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCADC_D1       0x00000002  // ADC Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCADC_D0       0x00000001  // ADC Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCACMP
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCACMP_D0      0x00000001  // Analog Comparator Module 0
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCPWM_D1       0x00000002  // PWM Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCPWM_D0       0x00000001  // PWM Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCQEI_D1       0x00000002  // QEI Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCQEI_D0       0x00000001  // QEI Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEEPROM_D0    0x00000001  // EEPROM Module Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCWTIMER_D5    0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER_D4    0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER_D3    0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER_D2    0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER_D1    0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER_D0    0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCCCM_D0       0x00000001  // CRC and Cryptographic Modules
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCLCD_D0       0x00000001  // LCD Controller Module 0
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCOWIRE
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCOWIRE_D0     0x00000001  // 1-Wire Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEMAC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEMAC_D0      0x00000001  // Ethernet MAC Module 0 Deep-Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_PCWD_P1          0x00000002  // Watchdog Timer 1 Power Control
N#define SYSCTL_PCWD_P0          0x00000001  // Watchdog Timer 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_PCTIMER_P7       0x00000080  // General-Purpose Timer 7 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P6       0x00000040  // General-Purpose Timer 6 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P5       0x00000020  // General-Purpose Timer 5 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P4       0x00000010  // General-Purpose Timer 4 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P3       0x00000008  // General-Purpose Timer 3 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P2       0x00000004  // General-Purpose Timer 2 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P1       0x00000002  // General-Purpose Timer 1 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P0       0x00000001  // General-Purpose Timer 0 Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_PCGPIO_P17       0x00020000  // GPIO Port T Power Control
N#define SYSCTL_PCGPIO_P16       0x00010000  // GPIO Port S Power Control
N#define SYSCTL_PCGPIO_P15       0x00008000  // GPIO Port R Power Control
N#define SYSCTL_PCGPIO_P14       0x00004000  // GPIO Port Q Power Control
N#define SYSCTL_PCGPIO_P13       0x00002000  // GPIO Port P Power Control
N#define SYSCTL_PCGPIO_P12       0x00001000  // GPIO Port N Power Control
N#define SYSCTL_PCGPIO_P11       0x00000800  // GPIO Port M Power Control
N#define SYSCTL_PCGPIO_P10       0x00000400  // GPIO Port L Power Control
N#define SYSCTL_PCGPIO_P9        0x00000200  // GPIO Port K Power Control
N#define SYSCTL_PCGPIO_P8        0x00000100  // GPIO Port J Power Control
N#define SYSCTL_PCGPIO_P7        0x00000080  // GPIO Port H Power Control
N#define SYSCTL_PCGPIO_P6        0x00000040  // GPIO Port G Power Control
N#define SYSCTL_PCGPIO_P5        0x00000020  // GPIO Port F Power Control
N#define SYSCTL_PCGPIO_P4        0x00000010  // GPIO Port E Power Control
N#define SYSCTL_PCGPIO_P3        0x00000008  // GPIO Port D Power Control
N#define SYSCTL_PCGPIO_P2        0x00000004  // GPIO Port C Power Control
N#define SYSCTL_PCGPIO_P1        0x00000002  // GPIO Port B Power Control
N#define SYSCTL_PCGPIO_P0        0x00000001  // GPIO Port A Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_PCDMA_P0         0x00000001  // uDMA Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEPI_P0         0x00000001  // EPI Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_PCHIB_P0         0x00000001  // Hibernation Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCUART register.
N//
N//*****************************************************************************
N#define SYSCTL_PCUART_P7        0x00000080  // UART Module 7 Power Control
N#define SYSCTL_PCUART_P6        0x00000040  // UART Module 6 Power Control
N#define SYSCTL_PCUART_P5        0x00000020  // UART Module 5 Power Control
N#define SYSCTL_PCUART_P4        0x00000010  // UART Module 4 Power Control
N#define SYSCTL_PCUART_P3        0x00000008  // UART Module 3 Power Control
N#define SYSCTL_PCUART_P2        0x00000004  // UART Module 2 Power Control
N#define SYSCTL_PCUART_P1        0x00000002  // UART Module 1 Power Control
N#define SYSCTL_PCUART_P0        0x00000001  // UART Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_PCSSI_P3         0x00000008  // SSI Module 3 Power Control
N#define SYSCTL_PCSSI_P2         0x00000004  // SSI Module 2 Power Control
N#define SYSCTL_PCSSI_P1         0x00000002  // SSI Module 1 Power Control
N#define SYSCTL_PCSSI_P0         0x00000001  // SSI Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_PCI2C_P9         0x00000200  // I2C Module 9 Power Control
N#define SYSCTL_PCI2C_P8         0x00000100  // I2C Module 8 Power Control
N#define SYSCTL_PCI2C_P7         0x00000080  // I2C Module 7 Power Control
N#define SYSCTL_PCI2C_P6         0x00000040  // I2C Module 6 Power Control
N#define SYSCTL_PCI2C_P5         0x00000020  // I2C Module 5 Power Control
N#define SYSCTL_PCI2C_P4         0x00000010  // I2C Module 4 Power Control
N#define SYSCTL_PCI2C_P3         0x00000008  // I2C Module 3 Power Control
N#define SYSCTL_PCI2C_P2         0x00000004  // I2C Module 2 Power Control
N#define SYSCTL_PCI2C_P1         0x00000002  // I2C Module 1 Power Control
N#define SYSCTL_PCI2C_P0         0x00000001  // I2C Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_PCUSB_P0         0x00000001  // USB Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEPHY_P0        0x00000001  // Ethernet PHY Module Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PCCAN_P1         0x00000002  // CAN Module 1 Power Control
N#define SYSCTL_PCCAN_P0         0x00000001  // CAN Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_PCADC_P1         0x00000002  // ADC Module 1 Power Control
N#define SYSCTL_PCADC_P0         0x00000001  // ADC Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_PCACMP_P0        0x00000001  // Analog Comparator Module 0 Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_PCPWM_P0         0x00000001  // PWM Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_PCQEI_P0         0x00000001  // QEI Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEEPROM_P0      0x00000001  // EEPROM Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_PCCCM_P0         0x00000001  // CRC and Cryptographic Modules
N                                            // Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_PCLCD_P0         0x00000001  // LCD Controller Module 0 Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCOWIRE register.
N//
N//*****************************************************************************
N#define SYSCTL_PCOWIRE_P0       0x00000001  // 1-Wire Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEMAC_P0        0x00000001  // Ethernet MAC Module 0 Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRWD register.
N//
N//*****************************************************************************
N#define SYSCTL_PRWD_R1          0x00000002  // Watchdog Timer 1 Peripheral
N                                            // Ready
N#define SYSCTL_PRWD_R0          0x00000001  // Watchdog Timer 0 Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_PRTIMER_R7       0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Peripheral Ready
N#define SYSCTL_PRTIMER_R6       0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Peripheral Ready
N#define SYSCTL_PRTIMER_R5       0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Peripheral Ready
N#define SYSCTL_PRTIMER_R4       0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Peripheral Ready
N#define SYSCTL_PRTIMER_R3       0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Peripheral Ready
N#define SYSCTL_PRTIMER_R2       0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Peripheral Ready
N#define SYSCTL_PRTIMER_R1       0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Peripheral Ready
N#define SYSCTL_PRTIMER_R0       0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_PRGPIO_R17       0x00020000  // GPIO Port T Peripheral Ready
N#define SYSCTL_PRGPIO_R16       0x00010000  // GPIO Port S Peripheral Ready
N#define SYSCTL_PRGPIO_R15       0x00008000  // GPIO Port R Peripheral Ready
N#define SYSCTL_PRGPIO_R14       0x00004000  // GPIO Port Q Peripheral Ready
N#define SYSCTL_PRGPIO_R13       0x00002000  // GPIO Port P Peripheral Ready
N#define SYSCTL_PRGPIO_R12       0x00001000  // GPIO Port N Peripheral Ready
N#define SYSCTL_PRGPIO_R11       0x00000800  // GPIO Port M Peripheral Ready
N#define SYSCTL_PRGPIO_R10       0x00000400  // GPIO Port L Peripheral Ready
N#define SYSCTL_PRGPIO_R9        0x00000200  // GPIO Port K Peripheral Ready
N#define SYSCTL_PRGPIO_R8        0x00000100  // GPIO Port J Peripheral Ready
N#define SYSCTL_PRGPIO_R7        0x00000080  // GPIO Port H Peripheral Ready
N#define SYSCTL_PRGPIO_R6        0x00000040  // GPIO Port G Peripheral Ready
N#define SYSCTL_PRGPIO_R5        0x00000020  // GPIO Port F Peripheral Ready
N#define SYSCTL_PRGPIO_R4        0x00000010  // GPIO Port E Peripheral Ready
N#define SYSCTL_PRGPIO_R3        0x00000008  // GPIO Port D Peripheral Ready
N#define SYSCTL_PRGPIO_R2        0x00000004  // GPIO Port C Peripheral Ready
N#define SYSCTL_PRGPIO_R1        0x00000002  // GPIO Port B Peripheral Ready
N#define SYSCTL_PRGPIO_R0        0x00000001  // GPIO Port A Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_PRDMA_R0         0x00000001  // uDMA Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREPI register.
N//
N//*****************************************************************************
N#define SYSCTL_PREPI_R0         0x00000001  // EPI Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_PRHIB_R0         0x00000001  // Hibernation Module Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRUART register.
N//
N//*****************************************************************************
N#define SYSCTL_PRUART_R7        0x00000080  // UART Module 7 Peripheral Ready
N#define SYSCTL_PRUART_R6        0x00000040  // UART Module 6 Peripheral Ready
N#define SYSCTL_PRUART_R5        0x00000020  // UART Module 5 Peripheral Ready
N#define SYSCTL_PRUART_R4        0x00000010  // UART Module 4 Peripheral Ready
N#define SYSCTL_PRUART_R3        0x00000008  // UART Module 3 Peripheral Ready
N#define SYSCTL_PRUART_R2        0x00000004  // UART Module 2 Peripheral Ready
N#define SYSCTL_PRUART_R1        0x00000002  // UART Module 1 Peripheral Ready
N#define SYSCTL_PRUART_R0        0x00000001  // UART Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_PRSSI_R3         0x00000008  // SSI Module 3 Peripheral Ready
N#define SYSCTL_PRSSI_R2         0x00000004  // SSI Module 2 Peripheral Ready
N#define SYSCTL_PRSSI_R1         0x00000002  // SSI Module 1 Peripheral Ready
N#define SYSCTL_PRSSI_R0         0x00000001  // SSI Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_PRI2C_R9         0x00000200  // I2C Module 9 Peripheral Ready
N#define SYSCTL_PRI2C_R8         0x00000100  // I2C Module 8 Peripheral Ready
N#define SYSCTL_PRI2C_R7         0x00000080  // I2C Module 7 Peripheral Ready
N#define SYSCTL_PRI2C_R6         0x00000040  // I2C Module 6 Peripheral Ready
N#define SYSCTL_PRI2C_R5         0x00000020  // I2C Module 5 Peripheral Ready
N#define SYSCTL_PRI2C_R4         0x00000010  // I2C Module 4 Peripheral Ready
N#define SYSCTL_PRI2C_R3         0x00000008  // I2C Module 3 Peripheral Ready
N#define SYSCTL_PRI2C_R2         0x00000004  // I2C Module 2 Peripheral Ready
N#define SYSCTL_PRI2C_R1         0x00000002  // I2C Module 1 Peripheral Ready
N#define SYSCTL_PRI2C_R0         0x00000001  // I2C Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_PRUSB_R0         0x00000001  // USB Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_PREPHY_R0        0x00000001  // Ethernet PHY Module Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PRCAN_R1         0x00000002  // CAN Module 1 Peripheral Ready
N#define SYSCTL_PRCAN_R0         0x00000001  // CAN Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRADC register.
N//
N//*****************************************************************************
N#define SYSCTL_PRADC_R1         0x00000002  // ADC Module 1 Peripheral Ready
N#define SYSCTL_PRADC_R0         0x00000001  // ADC Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_PRACMP_R0        0x00000001  // Analog Comparator Module 0
N                                            // Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_PRPWM_R1         0x00000002  // PWM Module 1 Peripheral Ready
N#define SYSCTL_PRPWM_R0         0x00000001  // PWM Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_PRQEI_R1         0x00000002  // QEI Module 1 Peripheral Ready
N#define SYSCTL_PRQEI_R0         0x00000001  // QEI Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PREEPROM_R0      0x00000001  // EEPROM Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PRWTIMER_R5      0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Peripheral Ready
N#define SYSCTL_PRWTIMER_R4      0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Peripheral Ready
N#define SYSCTL_PRWTIMER_R3      0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Peripheral Ready
N#define SYSCTL_PRWTIMER_R2      0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Peripheral Ready
N#define SYSCTL_PRWTIMER_R1      0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Peripheral Ready
N#define SYSCTL_PRWTIMER_R0      0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_PRCCM_R0         0x00000001  // CRC and Cryptographic Modules
N                                            // Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_PRLCD_R0         0x00000001  // LCD Controller Module 0
N                                            // Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PROWIRE register.
N//
N//*****************************************************************************
N#define SYSCTL_PROWIRE_R0       0x00000001  // 1-Wire Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_PREMAC_R0        0x00000001  // Ethernet MAC Module 0 Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_CCMCGREQ
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_CCMCGREQ_DESCFG  0x00000004  // DES Clock Gating Request
N#define SYSCTL_CCMCGREQ_AESCFG  0x00000002  // AES Clock Gating Request
N#define SYSCTL_CCMCGREQ_SHACFG  0x00000001  // SHA/MD5 Clock Gating Request
N
N//*****************************************************************************
N//
N// The following definitions are deprecated.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the SYSCTL_DID0
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DID0_CLASS_BLIZZARD                                            \
N                                0x00050000  // Tiva(TM) C Series TM4C123-class
X#define SYSCTL_DID0_CLASS_BLIZZARD                                                                            0x00050000  
N                                            // microcontrollers
N#define SYSCTL_DID0_CLASS_SNOWFLAKE                                           \
N                                0x000A0000  // Tiva(TM) C Series TM4C129-class
X#define SYSCTL_DID0_CLASS_SNOWFLAKE                                                                           0x000A0000  
N                                            // microcontrollers
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the SYSCTL_PWRTC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PWRTC_VDDA_UBOR0 0x00000010  // VDDA Under BOR0 Status
N#define SYSCTL_PWRTC_VDD_UBOR0  0x00000001  // VDD Under BOR0 Status
N
N#endif
N
N#endif // __HW_SYSCTL_H__
L 16 "..\inc_h\system.h" 2
N#include <hw_types.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_types.h" 1
N//*****************************************************************************
N//
N// hw_types.h - Common types and macros.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_TYPES_H__
N#define __HW_TYPES_H__
N
N//*****************************************************************************
N//
N// Macros for hardware access, both direct and via the bit-band region.
N//
N//*****************************************************************************
N#define HWREG(x)                                                              \
N        (*((volatile uint32_t *)(x)))
X#define HWREG(x)                                                                      (*((volatile uint32_t *)(x)))
N#define HWREGH(x)                                                             \
N        (*((volatile uint16_t *)(x)))
X#define HWREGH(x)                                                                     (*((volatile uint16_t *)(x)))
N#define HWREGB(x)                                                             \
N        (*((volatile uint8_t *)(x)))
X#define HWREGB(x)                                                                     (*((volatile uint8_t *)(x)))
N#define HWREGBITW(x, b)                                                       \
N        HWREG(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                     \
N              (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITW(x, b)                                                               HWREG(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITH(x, b)                                                       \
N        HWREGH(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                    \
N               (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITH(x, b)                                                               HWREGH(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITB(x, b)                                                       \
N        HWREGB(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                    \
N               (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITB(x, b)                                                               HWREGB(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N
N//*****************************************************************************
N//
N// Helper Macros for determining silicon revisions, etc.
N//
N// These macros will be used by Driverlib at "run-time" to create necessary
N// conditional code blocks that will allow a single version of the Driverlib
N// "binary" code to support multiple(all) Tiva silicon revisions.
N//
N// It is expected that these macros will be used inside of a standard 'C'
N// conditional block of code, e.g.
N//
N//     if(CLASS_IS_TM4C123)
N//     {
N//         do some TM4C123-class specific code here.
N//     }
N//
N// By default, these macros will be defined as run-time checks of the
N// appropriate register(s) to allow creation of run-time conditional code
N// blocks for a common DriverLib across the entire Tiva family.
N//
N// However, if code-space optimization is required, these macros can be "hard-
N// coded" for a specific version of Tiva silicon.  Many compilers will then
N// detect the "hard-coded" conditionals, and appropriately optimize the code
N// blocks, eliminating any "unreachable" code.  This would result in a smaller
N// Driverlib, thus producing a smaller final application size, but at the cost
N// of limiting the Driverlib binary to a specific Tiva silicon revision.
N//
N//*****************************************************************************
N#ifndef CLASS_IS_TM4C123
N#define CLASS_IS_TM4C123                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C123))
X#define CLASS_IS_TM4C123                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C123))
N#endif
N
N#ifndef CLASS_IS_TM4C129
N#define CLASS_IS_TM4C129                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C129))
X#define CLASS_IS_TM4C129                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C129))
N#endif
N
N#ifndef REVISION_IS_A0
N#define REVISION_IS_A0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A1
N#define REVISION_IS_A1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A2
N#define REVISION_IS_A2                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
X#define REVISION_IS_A2                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
N#endif
N
N#ifndef REVISION_IS_B0
N#define REVISION_IS_B0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_B0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_B1
N#define REVISION_IS_B1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
X#define REVISION_IS_B1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
N#endif
N
N//*****************************************************************************
N//
N// For TivaWare 2.1, we removed all references to Tiva IC codenames from the
N// source.  To ensure that existing customer code doesn't break as a result
N// of this change, make sure that the old definitions are still available at
N// least for the time being.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N#define CLASS_IS_BLIZZARD CLASS_IS_TM4C123
N#define CLASS_IS_SNOWFLAKE CLASS_IS_TM4C123
N#endif
N
N#endif // __HW_TYPES_H__
L 17 "..\inc_h\system.h" 2
N#include <hw_uart.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_uart.h" 1
N//*****************************************************************************
N//
N// hw_uart.h - Macros and defines used when accessing the UART hardware.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_UART_H__
N#define __HW_UART_H__
N
N//*****************************************************************************
N//
N// The following are defines for the UART register offsets.
N//
N//*****************************************************************************
N#define UART_O_DR               0x00000000  // UART Data
N#define UART_O_RSR              0x00000004  // UART Receive Status/Error Clear
N#define UART_O_ECR              0x00000004  // UART Receive Status/Error Clear
N#define UART_O_FR               0x00000018  // UART Flag
N#define UART_O_ILPR             0x00000020  // UART IrDA Low-Power Register
N#define UART_O_IBRD             0x00000024  // UART Integer Baud-Rate Divisor
N#define UART_O_FBRD             0x00000028  // UART Fractional Baud-Rate
N                                            // Divisor
N#define UART_O_LCRH             0x0000002C  // UART Line Control
N#define UART_O_CTL              0x00000030  // UART Control
N#define UART_O_IFLS             0x00000034  // UART Interrupt FIFO Level Select
N#define UART_O_IM               0x00000038  // UART Interrupt Mask
N#define UART_O_RIS              0x0000003C  // UART Raw Interrupt Status
N#define UART_O_MIS              0x00000040  // UART Masked Interrupt Status
N#define UART_O_ICR              0x00000044  // UART Interrupt Clear
N#define UART_O_DMACTL           0x00000048  // UART DMA Control
N#define UART_O_9BITADDR         0x000000A4  // UART 9-Bit Self Address
N#define UART_O_9BITAMASK        0x000000A8  // UART 9-Bit Self Address Mask
N#define UART_O_PP               0x00000FC0  // UART Peripheral Properties
N#define UART_O_CC               0x00000FC8  // UART Clock Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_DR register.
N//
N//*****************************************************************************
N#define UART_DR_OE              0x00000800  // UART Overrun Error
N#define UART_DR_BE              0x00000400  // UART Break Error
N#define UART_DR_PE              0x00000200  // UART Parity Error
N#define UART_DR_FE              0x00000100  // UART Framing Error
N#define UART_DR_DATA_M          0x000000FF  // Data Transmitted or Received
N#define UART_DR_DATA_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_RSR register.
N//
N//*****************************************************************************
N#define UART_RSR_OE             0x00000008  // UART Overrun Error
N#define UART_RSR_BE             0x00000004  // UART Break Error
N#define UART_RSR_PE             0x00000002  // UART Parity Error
N#define UART_RSR_FE             0x00000001  // UART Framing Error
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_ECR register.
N//
N//*****************************************************************************
N#define UART_ECR_DATA_M         0x000000FF  // Error Clear
N#define UART_ECR_DATA_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_FR register.
N//
N//*****************************************************************************
N#define UART_FR_RI              0x00000100  // Ring Indicator
N#define UART_FR_TXFE            0x00000080  // UART Transmit FIFO Empty
N#define UART_FR_RXFF            0x00000040  // UART Receive FIFO Full
N#define UART_FR_TXFF            0x00000020  // UART Transmit FIFO Full
N#define UART_FR_RXFE            0x00000010  // UART Receive FIFO Empty
N#define UART_FR_BUSY            0x00000008  // UART Busy
N#define UART_FR_DCD             0x00000004  // Data Carrier Detect
N#define UART_FR_DSR             0x00000002  // Data Set Ready
N#define UART_FR_CTS             0x00000001  // Clear To Send
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_ILPR register.
N//
N//*****************************************************************************
N#define UART_ILPR_ILPDVSR_M     0x000000FF  // IrDA Low-Power Divisor
N#define UART_ILPR_ILPDVSR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_IBRD register.
N//
N//*****************************************************************************
N#define UART_IBRD_DIVINT_M      0x0000FFFF  // Integer Baud-Rate Divisor
N#define UART_IBRD_DIVINT_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_FBRD register.
N//
N//*****************************************************************************
N#define UART_FBRD_DIVFRAC_M     0x0000003F  // Fractional Baud-Rate Divisor
N#define UART_FBRD_DIVFRAC_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_LCRH register.
N//
N//*****************************************************************************
N#define UART_LCRH_SPS           0x00000080  // UART Stick Parity Select
N#define UART_LCRH_WLEN_M        0x00000060  // UART Word Length
N#define UART_LCRH_WLEN_5        0x00000000  // 5 bits (default)
N#define UART_LCRH_WLEN_6        0x00000020  // 6 bits
N#define UART_LCRH_WLEN_7        0x00000040  // 7 bits
N#define UART_LCRH_WLEN_8        0x00000060  // 8 bits
N#define UART_LCRH_FEN           0x00000010  // UART Enable FIFOs
N#define UART_LCRH_STP2          0x00000008  // UART Two Stop Bits Select
N#define UART_LCRH_EPS           0x00000004  // UART Even Parity Select
N#define UART_LCRH_PEN           0x00000002  // UART Parity Enable
N#define UART_LCRH_BRK           0x00000001  // UART Send Break
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_CTL register.
N//
N//*****************************************************************************
N#define UART_CTL_CTSEN          0x00008000  // Enable Clear To Send
N#define UART_CTL_RTSEN          0x00004000  // Enable Request to Send
N#define UART_CTL_RTS            0x00000800  // Request to Send
N#define UART_CTL_DTR            0x00000400  // Data Terminal Ready
N#define UART_CTL_RXE            0x00000200  // UART Receive Enable
N#define UART_CTL_TXE            0x00000100  // UART Transmit Enable
N#define UART_CTL_LBE            0x00000080  // UART Loop Back Enable
N#define UART_CTL_HSE            0x00000020  // High-Speed Enable
N#define UART_CTL_EOT            0x00000010  // End of Transmission
N#define UART_CTL_SMART          0x00000008  // ISO 7816 Smart Card Support
N#define UART_CTL_SIRLP          0x00000004  // UART SIR Low-Power Mode
N#define UART_CTL_SIREN          0x00000002  // UART SIR Enable
N#define UART_CTL_UARTEN         0x00000001  // UART Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_IFLS register.
N//
N//*****************************************************************************
N#define UART_IFLS_RX_M          0x00000038  // UART Receive Interrupt FIFO
N                                            // Level Select
N#define UART_IFLS_RX1_8         0x00000000  // RX FIFO >= 1/8 full
N#define UART_IFLS_RX2_8         0x00000008  // RX FIFO >= 1/4 full
N#define UART_IFLS_RX4_8         0x00000010  // RX FIFO >= 1/2 full (default)
N#define UART_IFLS_RX6_8         0x00000018  // RX FIFO >= 3/4 full
N#define UART_IFLS_RX7_8         0x00000020  // RX FIFO >= 7/8 full
N#define UART_IFLS_TX_M          0x00000007  // UART Transmit Interrupt FIFO
N                                            // Level Select
N#define UART_IFLS_TX1_8         0x00000000  // TX FIFO <= 1/8 full
N#define UART_IFLS_TX2_8         0x00000001  // TX FIFO <= 1/4 full
N#define UART_IFLS_TX4_8         0x00000002  // TX FIFO <= 1/2 full (default)
N#define UART_IFLS_TX6_8         0x00000003  // TX FIFO <= 3/4 full
N#define UART_IFLS_TX7_8         0x00000004  // TX FIFO <= 7/8 full
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_IM register.
N//
N//*****************************************************************************
N#define UART_IM_DMATXIM         0x00020000  // Transmit DMA Interrupt Mask
N#define UART_IM_DMARXIM         0x00010000  // Receive DMA Interrupt Mask
N#define UART_IM_9BITIM          0x00001000  // 9-Bit Mode Interrupt Mask
N#define UART_IM_EOTIM           0x00000800  // End of Transmission Interrupt
N                                            // Mask
N#define UART_IM_OEIM            0x00000400  // UART Overrun Error Interrupt
N                                            // Mask
N#define UART_IM_BEIM            0x00000200  // UART Break Error Interrupt Mask
N#define UART_IM_PEIM            0x00000100  // UART Parity Error Interrupt Mask
N#define UART_IM_FEIM            0x00000080  // UART Framing Error Interrupt
N                                            // Mask
N#define UART_IM_RTIM            0x00000040  // UART Receive Time-Out Interrupt
N                                            // Mask
N#define UART_IM_TXIM            0x00000020  // UART Transmit Interrupt Mask
N#define UART_IM_RXIM            0x00000010  // UART Receive Interrupt Mask
N#define UART_IM_DSRMIM          0x00000008  // UART Data Set Ready Modem
N                                            // Interrupt Mask
N#define UART_IM_DCDMIM          0x00000004  // UART Data Carrier Detect Modem
N                                            // Interrupt Mask
N#define UART_IM_CTSMIM          0x00000002  // UART Clear to Send Modem
N                                            // Interrupt Mask
N#define UART_IM_RIMIM           0x00000001  // UART Ring Indicator Modem
N                                            // Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_RIS register.
N//
N//*****************************************************************************
N#define UART_RIS_DMATXRIS       0x00020000  // Transmit DMA Raw Interrupt
N                                            // Status
N#define UART_RIS_DMARXRIS       0x00010000  // Receive DMA Raw Interrupt Status
N#define UART_RIS_9BITRIS        0x00001000  // 9-Bit Mode Raw Interrupt Status
N#define UART_RIS_EOTRIS         0x00000800  // End of Transmission Raw
N                                            // Interrupt Status
N#define UART_RIS_OERIS          0x00000400  // UART Overrun Error Raw Interrupt
N                                            // Status
N#define UART_RIS_BERIS          0x00000200  // UART Break Error Raw Interrupt
N                                            // Status
N#define UART_RIS_PERIS          0x00000100  // UART Parity Error Raw Interrupt
N                                            // Status
N#define UART_RIS_FERIS          0x00000080  // UART Framing Error Raw Interrupt
N                                            // Status
N#define UART_RIS_RTRIS          0x00000040  // UART Receive Time-Out Raw
N                                            // Interrupt Status
N#define UART_RIS_TXRIS          0x00000020  // UART Transmit Raw Interrupt
N                                            // Status
N#define UART_RIS_RXRIS          0x00000010  // UART Receive Raw Interrupt
N                                            // Status
N#define UART_RIS_DSRRIS         0x00000008  // UART Data Set Ready Modem Raw
N                                            // Interrupt Status
N#define UART_RIS_DCDRIS         0x00000004  // UART Data Carrier Detect Modem
N                                            // Raw Interrupt Status
N#define UART_RIS_CTSRIS         0x00000002  // UART Clear to Send Modem Raw
N                                            // Interrupt Status
N#define UART_RIS_RIRIS          0x00000001  // UART Ring Indicator Modem Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_MIS register.
N//
N//*****************************************************************************
N#define UART_MIS_DMATXMIS       0x00020000  // Transmit DMA Masked Interrupt
N                                            // Status
N#define UART_MIS_DMARXMIS       0x00010000  // Receive DMA Masked Interrupt
N                                            // Status
N#define UART_MIS_9BITMIS        0x00001000  // 9-Bit Mode Masked Interrupt
N                                            // Status
N#define UART_MIS_EOTMIS         0x00000800  // End of Transmission Masked
N                                            // Interrupt Status
N#define UART_MIS_OEMIS          0x00000400  // UART Overrun Error Masked
N                                            // Interrupt Status
N#define UART_MIS_BEMIS          0x00000200  // UART Break Error Masked
N                                            // Interrupt Status
N#define UART_MIS_PEMIS          0x00000100  // UART Parity Error Masked
N                                            // Interrupt Status
N#define UART_MIS_FEMIS          0x00000080  // UART Framing Error Masked
N                                            // Interrupt Status
N#define UART_MIS_RTMIS          0x00000040  // UART Receive Time-Out Masked
N                                            // Interrupt Status
N#define UART_MIS_TXMIS          0x00000020  // UART Transmit Masked Interrupt
N                                            // Status
N#define UART_MIS_RXMIS          0x00000010  // UART Receive Masked Interrupt
N                                            // Status
N#define UART_MIS_DSRMIS         0x00000008  // UART Data Set Ready Modem Masked
N                                            // Interrupt Status
N#define UART_MIS_DCDMIS         0x00000004  // UART Data Carrier Detect Modem
N                                            // Masked Interrupt Status
N#define UART_MIS_CTSMIS         0x00000002  // UART Clear to Send Modem Masked
N                                            // Interrupt Status
N#define UART_MIS_RIMIS          0x00000001  // UART Ring Indicator Modem Masked
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_ICR register.
N//
N//*****************************************************************************
N#define UART_ICR_DMATXIC        0x00020000  // Transmit DMA Interrupt Clear
N#define UART_ICR_DMARXIC        0x00010000  // Receive DMA Interrupt Clear
N#define UART_ICR_9BITIC         0x00001000  // 9-Bit Mode Interrupt Clear
N#define UART_ICR_EOTIC          0x00000800  // End of Transmission Interrupt
N                                            // Clear
N#define UART_ICR_OEIC           0x00000400  // Overrun Error Interrupt Clear
N#define UART_ICR_BEIC           0x00000200  // Break Error Interrupt Clear
N#define UART_ICR_PEIC           0x00000100  // Parity Error Interrupt Clear
N#define UART_ICR_FEIC           0x00000080  // Framing Error Interrupt Clear
N#define UART_ICR_RTIC           0x00000040  // Receive Time-Out Interrupt Clear
N#define UART_ICR_TXIC           0x00000020  // Transmit Interrupt Clear
N#define UART_ICR_RXIC           0x00000010  // Receive Interrupt Clear
N#define UART_ICR_DSRMIC         0x00000008  // UART Data Set Ready Modem
N                                            // Interrupt Clear
N#define UART_ICR_DCDMIC         0x00000004  // UART Data Carrier Detect Modem
N                                            // Interrupt Clear
N#define UART_ICR_CTSMIC         0x00000002  // UART Clear to Send Modem
N                                            // Interrupt Clear
N#define UART_ICR_RIMIC          0x00000001  // UART Ring Indicator Modem
N                                            // Interrupt Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_DMACTL register.
N//
N//*****************************************************************************
N#define UART_DMACTL_DMAERR      0x00000004  // DMA on Error
N#define UART_DMACTL_TXDMAE      0x00000002  // Transmit DMA Enable
N#define UART_DMACTL_RXDMAE      0x00000001  // Receive DMA Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_9BITADDR
N// register.
N//
N//*****************************************************************************
N#define UART_9BITADDR_9BITEN    0x00008000  // Enable 9-Bit Mode
N#define UART_9BITADDR_ADDR_M    0x000000FF  // Self Address for 9-Bit Mode
N#define UART_9BITADDR_ADDR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_9BITAMASK
N// register.
N//
N//*****************************************************************************
N#define UART_9BITAMASK_MASK_M   0x000000FF  // Self Address Mask for 9-Bit Mode
N#define UART_9BITAMASK_MASK_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_PP register.
N//
N//*****************************************************************************
N#define UART_PP_MSE             0x00000008  // Modem Support Extended
N#define UART_PP_MS              0x00000004  // Modem Support
N#define UART_PP_NB              0x00000002  // 9-Bit Support
N#define UART_PP_SC              0x00000001  // Smart Card Support
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_CC register.
N//
N//*****************************************************************************
N#define UART_CC_CS_M            0x0000000F  // UART Baud Clock Source
N#define UART_CC_CS_SYSCLK       0x00000000  // System clock (based on clock
N                                            // source and divisor factor)
N#define UART_CC_CS_PIOSC        0x00000005  // PIOSC
N
N#endif // __HW_UART_H__
L 18 "..\inc_h\system.h" 2
N#include <hw_adc.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_adc.h" 1
N//*****************************************************************************
N//
N// hw_adc.h - Macros used when accessing the ADC hardware.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_ADC_H__
N#define __HW_ADC_H__
N
N//*****************************************************************************
N//
N// The following are defines for the ADC register offsets.
N//
N//*****************************************************************************
N#define ADC_O_ACTSS             0x00000000  // ADC Active Sample Sequencer
N#define ADC_O_RIS               0x00000004  // ADC Raw Interrupt Status
N#define ADC_O_IM                0x00000008  // ADC Interrupt Mask
N#define ADC_O_ISC               0x0000000C  // ADC Interrupt Status and Clear
N#define ADC_O_OSTAT             0x00000010  // ADC Overflow Status
N#define ADC_O_EMUX              0x00000014  // ADC Event Multiplexer Select
N#define ADC_O_USTAT             0x00000018  // ADC Underflow Status
N#define ADC_O_TSSEL             0x0000001C  // ADC Trigger Source Select
N#define ADC_O_SSPRI             0x00000020  // ADC Sample Sequencer Priority
N#define ADC_O_SPC               0x00000024  // ADC Sample Phase Control
N#define ADC_O_PSSI              0x00000028  // ADC Processor Sample Sequence
N                                            // Initiate
N#define ADC_O_SAC               0x00000030  // ADC Sample Averaging Control
N#define ADC_O_DCISC             0x00000034  // ADC Digital Comparator Interrupt
N                                            // Status and Clear
N#define ADC_O_CTL               0x00000038  // ADC Control
N#define ADC_O_SSMUX0            0x00000040  // ADC Sample Sequence Input
N                                            // Multiplexer Select 0
N#define ADC_O_SSCTL0            0x00000044  // ADC Sample Sequence Control 0
N#define ADC_O_SSFIFO0           0x00000048  // ADC Sample Sequence Result FIFO
N                                            // 0
N#define ADC_O_SSFSTAT0          0x0000004C  // ADC Sample Sequence FIFO 0
N                                            // Status
N#define ADC_O_SSOP0             0x00000050  // ADC Sample Sequence 0 Operation
N#define ADC_O_SSDC0             0x00000054  // ADC Sample Sequence 0 Digital
N                                            // Comparator Select
N#define ADC_O_SSEMUX0           0x00000058  // ADC Sample Sequence Extended
N                                            // Input Multiplexer Select 0
N#define ADC_O_SSTSH0            0x0000005C  // ADC Sample Sequence 0 Sample and
N                                            // Hold Time
N#define ADC_O_SSMUX1            0x00000060  // ADC Sample Sequence Input
N                                            // Multiplexer Select 1
N#define ADC_O_SSCTL1            0x00000064  // ADC Sample Sequence Control 1
N#define ADC_O_SSFIFO1           0x00000068  // ADC Sample Sequence Result FIFO
N                                            // 1
N#define ADC_O_SSFSTAT1          0x0000006C  // ADC Sample Sequence FIFO 1
N                                            // Status
N#define ADC_O_SSOP1             0x00000070  // ADC Sample Sequence 1 Operation
N#define ADC_O_SSDC1             0x00000074  // ADC Sample Sequence 1 Digital
N                                            // Comparator Select
N#define ADC_O_SSEMUX1           0x00000078  // ADC Sample Sequence Extended
N                                            // Input Multiplexer Select 1
N#define ADC_O_SSTSH1            0x0000007C  // ADC Sample Sequence 1 Sample and
N                                            // Hold Time
N#define ADC_O_SSMUX2            0x00000080  // ADC Sample Sequence Input
N                                            // Multiplexer Select 2
N#define ADC_O_SSCTL2            0x00000084  // ADC Sample Sequence Control 2
N#define ADC_O_SSFIFO2           0x00000088  // ADC Sample Sequence Result FIFO
N                                            // 2
N#define ADC_O_SSFSTAT2          0x0000008C  // ADC Sample Sequence FIFO 2
N                                            // Status
N#define ADC_O_SSOP2             0x00000090  // ADC Sample Sequence 2 Operation
N#define ADC_O_SSDC2             0x00000094  // ADC Sample Sequence 2 Digital
N                                            // Comparator Select
N#define ADC_O_SSEMUX2           0x00000098  // ADC Sample Sequence Extended
N                                            // Input Multiplexer Select 2
N#define ADC_O_SSTSH2            0x0000009C  // ADC Sample Sequence 2 Sample and
N                                            // Hold Time
N#define ADC_O_SSMUX3            0x000000A0  // ADC Sample Sequence Input
N                                            // Multiplexer Select 3
N#define ADC_O_SSCTL3            0x000000A4  // ADC Sample Sequence Control 3
N#define ADC_O_SSFIFO3           0x000000A8  // ADC Sample Sequence Result FIFO
N                                            // 3
N#define ADC_O_SSFSTAT3          0x000000AC  // ADC Sample Sequence FIFO 3
N                                            // Status
N#define ADC_O_SSOP3             0x000000B0  // ADC Sample Sequence 3 Operation
N#define ADC_O_SSDC3             0x000000B4  // ADC Sample Sequence 3 Digital
N                                            // Comparator Select
N#define ADC_O_SSEMUX3           0x000000B8  // ADC Sample Sequence Extended
N                                            // Input Multiplexer Select 3
N#define ADC_O_SSTSH3            0x000000BC  // ADC Sample Sequence 3 Sample and
N                                            // Hold Time
N#define ADC_O_DCRIC             0x00000D00  // ADC Digital Comparator Reset
N                                            // Initial Conditions
N#define ADC_O_DCCTL0            0x00000E00  // ADC Digital Comparator Control 0
N#define ADC_O_DCCTL1            0x00000E04  // ADC Digital Comparator Control 1
N#define ADC_O_DCCTL2            0x00000E08  // ADC Digital Comparator Control 2
N#define ADC_O_DCCTL3            0x00000E0C  // ADC Digital Comparator Control 3
N#define ADC_O_DCCTL4            0x00000E10  // ADC Digital Comparator Control 4
N#define ADC_O_DCCTL5            0x00000E14  // ADC Digital Comparator Control 5
N#define ADC_O_DCCTL6            0x00000E18  // ADC Digital Comparator Control 6
N#define ADC_O_DCCTL7            0x00000E1C  // ADC Digital Comparator Control 7
N#define ADC_O_DCCMP0            0x00000E40  // ADC Digital Comparator Range 0
N#define ADC_O_DCCMP1            0x00000E44  // ADC Digital Comparator Range 1
N#define ADC_O_DCCMP2            0x00000E48  // ADC Digital Comparator Range 2
N#define ADC_O_DCCMP3            0x00000E4C  // ADC Digital Comparator Range 3
N#define ADC_O_DCCMP4            0x00000E50  // ADC Digital Comparator Range 4
N#define ADC_O_DCCMP5            0x00000E54  // ADC Digital Comparator Range 5
N#define ADC_O_DCCMP6            0x00000E58  // ADC Digital Comparator Range 6
N#define ADC_O_DCCMP7            0x00000E5C  // ADC Digital Comparator Range 7
N#define ADC_O_PP                0x00000FC0  // ADC Peripheral Properties
N#define ADC_O_PC                0x00000FC4  // ADC Peripheral Configuration
N#define ADC_O_CC                0x00000FC8  // ADC Clock Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_ACTSS register.
N//
N//*****************************************************************************
N#define ADC_ACTSS_BUSY          0x00010000  // ADC Busy
N#define ADC_ACTSS_ADEN3         0x00000800  // ADC SS3 DMA Enable
N#define ADC_ACTSS_ADEN2         0x00000400  // ADC SS2 DMA Enable
N#define ADC_ACTSS_ADEN1         0x00000200  // ADC SS1 DMA Enable
N#define ADC_ACTSS_ADEN0         0x00000100  // ADC SS1 DMA Enable
N#define ADC_ACTSS_ASEN3         0x00000008  // ADC SS3 Enable
N#define ADC_ACTSS_ASEN2         0x00000004  // ADC SS2 Enable
N#define ADC_ACTSS_ASEN1         0x00000002  // ADC SS1 Enable
N#define ADC_ACTSS_ASEN0         0x00000001  // ADC SS0 Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_RIS register.
N//
N//*****************************************************************************
N#define ADC_RIS_INRDC           0x00010000  // Digital Comparator Raw Interrupt
N                                            // Status
N#define ADC_RIS_DMAINR3         0x00000800  // SS3 DMA Raw Interrupt Status
N#define ADC_RIS_DMAINR2         0x00000400  // SS2 DMA Raw Interrupt Status
N#define ADC_RIS_DMAINR1         0x00000200  // SS1 DMA Raw Interrupt Status
N#define ADC_RIS_DMAINR0         0x00000100  // SS0 DMA Raw Interrupt Status
N#define ADC_RIS_INR3            0x00000008  // SS3 Raw Interrupt Status
N#define ADC_RIS_INR2            0x00000004  // SS2 Raw Interrupt Status
N#define ADC_RIS_INR1            0x00000002  // SS1 Raw Interrupt Status
N#define ADC_RIS_INR0            0x00000001  // SS0 Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_IM register.
N//
N//*****************************************************************************
N#define ADC_IM_DCONSS3          0x00080000  // Digital Comparator Interrupt on
N                                            // SS3
N#define ADC_IM_DCONSS2          0x00040000  // Digital Comparator Interrupt on
N                                            // SS2
N#define ADC_IM_DCONSS1          0x00020000  // Digital Comparator Interrupt on
N                                            // SS1
N#define ADC_IM_DCONSS0          0x00010000  // Digital Comparator Interrupt on
N                                            // SS0
N#define ADC_IM_DMAMASK3         0x00000800  // SS3 DMA Interrupt Mask
N#define ADC_IM_DMAMASK2         0x00000400  // SS2 DMA Interrupt Mask
N#define ADC_IM_DMAMASK1         0x00000200  // SS1 DMA Interrupt Mask
N#define ADC_IM_DMAMASK0         0x00000100  // SS0 DMA Interrupt Mask
N#define ADC_IM_MASK3            0x00000008  // SS3 Interrupt Mask
N#define ADC_IM_MASK2            0x00000004  // SS2 Interrupt Mask
N#define ADC_IM_MASK1            0x00000002  // SS1 Interrupt Mask
N#define ADC_IM_MASK0            0x00000001  // SS0 Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_ISC register.
N//
N//*****************************************************************************
N#define ADC_ISC_DCINSS3         0x00080000  // Digital Comparator Interrupt
N                                            // Status on SS3
N#define ADC_ISC_DCINSS2         0x00040000  // Digital Comparator Interrupt
N                                            // Status on SS2
N#define ADC_ISC_DCINSS1         0x00020000  // Digital Comparator Interrupt
N                                            // Status on SS1
N#define ADC_ISC_DCINSS0         0x00010000  // Digital Comparator Interrupt
N                                            // Status on SS0
N#define ADC_ISC_DMAIN3          0x00000800  // SS3 DMA Interrupt Status and
N                                            // Clear
N#define ADC_ISC_DMAIN2          0x00000400  // SS2 DMA Interrupt Status and
N                                            // Clear
N#define ADC_ISC_DMAIN1          0x00000200  // SS1 DMA Interrupt Status and
N                                            // Clear
N#define ADC_ISC_DMAIN0          0x00000100  // SS0 DMA Interrupt Status and
N                                            // Clear
N#define ADC_ISC_IN3             0x00000008  // SS3 Interrupt Status and Clear
N#define ADC_ISC_IN2             0x00000004  // SS2 Interrupt Status and Clear
N#define ADC_ISC_IN1             0x00000002  // SS1 Interrupt Status and Clear
N#define ADC_ISC_IN0             0x00000001  // SS0 Interrupt Status and Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_OSTAT register.
N//
N//*****************************************************************************
N#define ADC_OSTAT_OV3           0x00000008  // SS3 FIFO Overflow
N#define ADC_OSTAT_OV2           0x00000004  // SS2 FIFO Overflow
N#define ADC_OSTAT_OV1           0x00000002  // SS1 FIFO Overflow
N#define ADC_OSTAT_OV0           0x00000001  // SS0 FIFO Overflow
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_EMUX register.
N//
N//*****************************************************************************
N#define ADC_EMUX_EM3_M          0x0000F000  // SS3 Trigger Select
N#define ADC_EMUX_EM3_PROCESSOR  0x00000000  // Processor (default)
N#define ADC_EMUX_EM3_COMP0      0x00001000  // Analog Comparator 0
N#define ADC_EMUX_EM3_COMP1      0x00002000  // Analog Comparator 1
N#define ADC_EMUX_EM3_COMP2      0x00003000  // Analog Comparator 2
N#define ADC_EMUX_EM3_EXTERNAL   0x00004000  // External (GPIO Pins)
N#define ADC_EMUX_EM3_TIMER      0x00005000  // Timer
N#define ADC_EMUX_EM3_PWM0       0x00006000  // PWM generator 0
N#define ADC_EMUX_EM3_PWM1       0x00007000  // PWM generator 1
N#define ADC_EMUX_EM3_PWM2       0x00008000  // PWM generator 2
N#define ADC_EMUX_EM3_PWM3       0x00009000  // PWM generator 3
N#define ADC_EMUX_EM3_NEVER      0x0000E000  // Never Trigger
N#define ADC_EMUX_EM3_ALWAYS     0x0000F000  // Always (continuously sample)
N#define ADC_EMUX_EM2_M          0x00000F00  // SS2 Trigger Select
N#define ADC_EMUX_EM2_PROCESSOR  0x00000000  // Processor (default)
N#define ADC_EMUX_EM2_COMP0      0x00000100  // Analog Comparator 0
N#define ADC_EMUX_EM2_COMP1      0x00000200  // Analog Comparator 1
N#define ADC_EMUX_EM2_COMP2      0x00000300  // Analog Comparator 2
N#define ADC_EMUX_EM2_EXTERNAL   0x00000400  // External (GPIO Pins)
N#define ADC_EMUX_EM2_TIMER      0x00000500  // Timer
N#define ADC_EMUX_EM2_PWM0       0x00000600  // PWM generator 0
N#define ADC_EMUX_EM2_PWM1       0x00000700  // PWM generator 1
N#define ADC_EMUX_EM2_PWM2       0x00000800  // PWM generator 2
N#define ADC_EMUX_EM2_PWM3       0x00000900  // PWM generator 3
N#define ADC_EMUX_EM2_NEVER      0x00000E00  // Never Trigger
N#define ADC_EMUX_EM2_ALWAYS     0x00000F00  // Always (continuously sample)
N#define ADC_EMUX_EM1_M          0x000000F0  // SS1 Trigger Select
N#define ADC_EMUX_EM1_PROCESSOR  0x00000000  // Processor (default)
N#define ADC_EMUX_EM1_COMP0      0x00000010  // Analog Comparator 0
N#define ADC_EMUX_EM1_COMP1      0x00000020  // Analog Comparator 1
N#define ADC_EMUX_EM1_COMP2      0x00000030  // Analog Comparator 2
N#define ADC_EMUX_EM1_EXTERNAL   0x00000040  // External (GPIO Pins)
N#define ADC_EMUX_EM1_TIMER      0x00000050  // Timer
N#define ADC_EMUX_EM1_PWM0       0x00000060  // PWM generator 0
N#define ADC_EMUX_EM1_PWM1       0x00000070  // PWM generator 1
N#define ADC_EMUX_EM1_PWM2       0x00000080  // PWM generator 2
N#define ADC_EMUX_EM1_PWM3       0x00000090  // PWM generator 3
N#define ADC_EMUX_EM1_NEVER      0x000000E0  // Never Trigger
N#define ADC_EMUX_EM1_ALWAYS     0x000000F0  // Always (continuously sample)
N#define ADC_EMUX_EM0_M          0x0000000F  // SS0 Trigger Select
N#define ADC_EMUX_EM0_PROCESSOR  0x00000000  // Processor (default)
N#define ADC_EMUX_EM0_COMP0      0x00000001  // Analog Comparator 0
N#define ADC_EMUX_EM0_COMP1      0x00000002  // Analog Comparator 1
N#define ADC_EMUX_EM0_COMP2      0x00000003  // Analog Comparator 2
N#define ADC_EMUX_EM0_EXTERNAL   0x00000004  // External (GPIO Pins)
N#define ADC_EMUX_EM0_TIMER      0x00000005  // Timer
N#define ADC_EMUX_EM0_PWM0       0x00000006  // PWM generator 0
N#define ADC_EMUX_EM0_PWM1       0x00000007  // PWM generator 1
N#define ADC_EMUX_EM0_PWM2       0x00000008  // PWM generator 2
N#define ADC_EMUX_EM0_PWM3       0x00000009  // PWM generator 3
N#define ADC_EMUX_EM0_NEVER      0x0000000E  // Never Trigger
N#define ADC_EMUX_EM0_ALWAYS     0x0000000F  // Always (continuously sample)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_USTAT register.
N//
N//*****************************************************************************
N#define ADC_USTAT_UV3           0x00000008  // SS3 FIFO Underflow
N#define ADC_USTAT_UV2           0x00000004  // SS2 FIFO Underflow
N#define ADC_USTAT_UV1           0x00000002  // SS1 FIFO Underflow
N#define ADC_USTAT_UV0           0x00000001  // SS0 FIFO Underflow
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_TSSEL register.
N//
N//*****************************************************************************
N#define ADC_TSSEL_PS3_M         0x30000000  // Generator 3 PWM Module Trigger
N                                            // Select
N#define ADC_TSSEL_PS3_0         0x00000000  // Use Generator 3 (and its
N                                            // trigger) in PWM module 0
N#define ADC_TSSEL_PS3_1         0x10000000  // Use Generator 3 (and its
N                                            // trigger) in PWM module 1
N#define ADC_TSSEL_PS2_M         0x00300000  // Generator 2 PWM Module Trigger
N                                            // Select
N#define ADC_TSSEL_PS2_0         0x00000000  // Use Generator 2 (and its
N                                            // trigger) in PWM module 0
N#define ADC_TSSEL_PS2_1         0x00100000  // Use Generator 2 (and its
N                                            // trigger) in PWM module 1
N#define ADC_TSSEL_PS1_M         0x00003000  // Generator 1 PWM Module Trigger
N                                            // Select
N#define ADC_TSSEL_PS1_0         0x00000000  // Use Generator 1 (and its
N                                            // trigger) in PWM module 0
N#define ADC_TSSEL_PS1_1         0x00001000  // Use Generator 1 (and its
N                                            // trigger) in PWM module 1
N#define ADC_TSSEL_PS0_M         0x00000030  // Generator 0 PWM Module Trigger
N                                            // Select
N#define ADC_TSSEL_PS0_0         0x00000000  // Use Generator 0 (and its
N                                            // trigger) in PWM module 0
N#define ADC_TSSEL_PS0_1         0x00000010  // Use Generator 0 (and its
N                                            // trigger) in PWM module 1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSPRI register.
N//
N//*****************************************************************************
N#define ADC_SSPRI_SS3_M         0x00003000  // SS3 Priority
N#define ADC_SSPRI_SS2_M         0x00000300  // SS2 Priority
N#define ADC_SSPRI_SS1_M         0x00000030  // SS1 Priority
N#define ADC_SSPRI_SS0_M         0x00000003  // SS0 Priority
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SPC register.
N//
N//*****************************************************************************
N#define ADC_SPC_PHASE_M         0x0000000F  // Phase Difference
N#define ADC_SPC_PHASE_0         0x00000000  // ADC sample lags by 0.0
N#define ADC_SPC_PHASE_22_5      0x00000001  // ADC sample lags by 22.5
N#define ADC_SPC_PHASE_45        0x00000002  // ADC sample lags by 45.0
N#define ADC_SPC_PHASE_67_5      0x00000003  // ADC sample lags by 67.5
N#define ADC_SPC_PHASE_90        0x00000004  // ADC sample lags by 90.0
N#define ADC_SPC_PHASE_112_5     0x00000005  // ADC sample lags by 112.5
N#define ADC_SPC_PHASE_135       0x00000006  // ADC sample lags by 135.0
N#define ADC_SPC_PHASE_157_5     0x00000007  // ADC sample lags by 157.5
N#define ADC_SPC_PHASE_180       0x00000008  // ADC sample lags by 180.0
N#define ADC_SPC_PHASE_202_5     0x00000009  // ADC sample lags by 202.5
N#define ADC_SPC_PHASE_225       0x0000000A  // ADC sample lags by 225.0
N#define ADC_SPC_PHASE_247_5     0x0000000B  // ADC sample lags by 247.5
N#define ADC_SPC_PHASE_270       0x0000000C  // ADC sample lags by 270.0
N#define ADC_SPC_PHASE_292_5     0x0000000D  // ADC sample lags by 292.5
N#define ADC_SPC_PHASE_315       0x0000000E  // ADC sample lags by 315.0
N#define ADC_SPC_PHASE_337_5     0x0000000F  // ADC sample lags by 337.5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_PSSI register.
N//
N//*****************************************************************************
N#define ADC_PSSI_GSYNC          0x80000000  // Global Synchronize
N#define ADC_PSSI_SYNCWAIT       0x08000000  // Synchronize Wait
N#define ADC_PSSI_SS3            0x00000008  // SS3 Initiate
N#define ADC_PSSI_SS2            0x00000004  // SS2 Initiate
N#define ADC_PSSI_SS1            0x00000002  // SS1 Initiate
N#define ADC_PSSI_SS0            0x00000001  // SS0 Initiate
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SAC register.
N//
N//*****************************************************************************
N#define ADC_SAC_AVG_M           0x00000007  // Hardware Averaging Control
N#define ADC_SAC_AVG_OFF         0x00000000  // No hardware oversampling
N#define ADC_SAC_AVG_2X          0x00000001  // 2x hardware oversampling
N#define ADC_SAC_AVG_4X          0x00000002  // 4x hardware oversampling
N#define ADC_SAC_AVG_8X          0x00000003  // 8x hardware oversampling
N#define ADC_SAC_AVG_16X         0x00000004  // 16x hardware oversampling
N#define ADC_SAC_AVG_32X         0x00000005  // 32x hardware oversampling
N#define ADC_SAC_AVG_64X         0x00000006  // 64x hardware oversampling
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCISC register.
N//
N//*****************************************************************************
N#define ADC_DCISC_DCINT7        0x00000080  // Digital Comparator 7 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT6        0x00000040  // Digital Comparator 6 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT5        0x00000020  // Digital Comparator 5 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT4        0x00000010  // Digital Comparator 4 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT3        0x00000008  // Digital Comparator 3 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT2        0x00000004  // Digital Comparator 2 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT1        0x00000002  // Digital Comparator 1 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT0        0x00000001  // Digital Comparator 0 Interrupt
N                                            // Status and Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_CTL register.
N//
N//*****************************************************************************
N#define ADC_CTL_DITHER          0x00000040  // Dither Mode Enable
N#define ADC_CTL_VREF_M          0x00000003  // Voltage Reference Select
N#define ADC_CTL_VREF_INTERNAL   0x00000000  // VDDA and GNDA are the voltage
N                                            // references
N#define ADC_CTL_VREF_EXT_3V     0x00000001  // The external VREFA+ and VREFA-
N                                            // inputs are the voltage
N                                            // references
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSMUX0 register.
N//
N//*****************************************************************************
N#define ADC_SSMUX0_MUX7_M       0xF0000000  // 8th Sample Input Select
N#define ADC_SSMUX0_MUX6_M       0x0F000000  // 7th Sample Input Select
N#define ADC_SSMUX0_MUX5_M       0x00F00000  // 6th Sample Input Select
N#define ADC_SSMUX0_MUX4_M       0x000F0000  // 5th Sample Input Select
N#define ADC_SSMUX0_MUX3_M       0x0000F000  // 4th Sample Input Select
N#define ADC_SSMUX0_MUX2_M       0x00000F00  // 3rd Sample Input Select
N#define ADC_SSMUX0_MUX1_M       0x000000F0  // 2nd Sample Input Select
N#define ADC_SSMUX0_MUX0_M       0x0000000F  // 1st Sample Input Select
N#define ADC_SSMUX0_MUX7_S       28
N#define ADC_SSMUX0_MUX6_S       24
N#define ADC_SSMUX0_MUX5_S       20
N#define ADC_SSMUX0_MUX4_S       16
N#define ADC_SSMUX0_MUX3_S       12
N#define ADC_SSMUX0_MUX2_S       8
N#define ADC_SSMUX0_MUX1_S       4
N#define ADC_SSMUX0_MUX0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSCTL0 register.
N//
N//*****************************************************************************
N#define ADC_SSCTL0_TS7          0x80000000  // 8th Sample Temp Sensor Select
N#define ADC_SSCTL0_IE7          0x40000000  // 8th Sample Interrupt Enable
N#define ADC_SSCTL0_END7         0x20000000  // 8th Sample is End of Sequence
N#define ADC_SSCTL0_D7           0x10000000  // 8th Sample Differential Input
N                                            // Select
N#define ADC_SSCTL0_TS6          0x08000000  // 7th Sample Temp Sensor Select
N#define ADC_SSCTL0_IE6          0x04000000  // 7th Sample Interrupt Enable
N#define ADC_SSCTL0_END6         0x02000000  // 7th Sample is End of Sequence
N#define ADC_SSCTL0_D6           0x01000000  // 7th Sample Differential Input
N                                            // Select
N#define ADC_SSCTL0_TS5          0x00800000  // 6th Sample Temp Sensor Select
N#define ADC_SSCTL0_IE5          0x00400000  // 6th Sample Interrupt Enable
N#define ADC_SSCTL0_END5         0x00200000  // 6th Sample is End of Sequence
N#define ADC_SSCTL0_D5           0x00100000  // 6th Sample Differential Input
N                                            // Select
N#define ADC_SSCTL0_TS4          0x00080000  // 5th Sample Temp Sensor Select
N#define ADC_SSCTL0_IE4          0x00040000  // 5th Sample Interrupt Enable
N#define ADC_SSCTL0_END4         0x00020000  // 5th Sample is End of Sequence
N#define ADC_SSCTL0_D4           0x00010000  // 5th Sample Differential Input
N                                            // Select
N#define ADC_SSCTL0_TS3          0x00008000  // 4th Sample Temp Sensor Select
N#define ADC_SSCTL0_IE3          0x00004000  // 4th Sample Interrupt Enable
N#define ADC_SSCTL0_END3         0x00002000  // 4th Sample is End of Sequence
N#define ADC_SSCTL0_D3           0x00001000  // 4th Sample Differential Input
N                                            // Select
N#define ADC_SSCTL0_TS2          0x00000800  // 3rd Sample Temp Sensor Select
N#define ADC_SSCTL0_IE2          0x00000400  // 3rd Sample Interrupt Enable
N#define ADC_SSCTL0_END2         0x00000200  // 3rd Sample is End of Sequence
N#define ADC_SSCTL0_D2           0x00000100  // 3rd Sample Differential Input
N                                            // Select
N#define ADC_SSCTL0_TS1          0x00000080  // 2nd Sample Temp Sensor Select
N#define ADC_SSCTL0_IE1          0x00000040  // 2nd Sample Interrupt Enable
N#define ADC_SSCTL0_END1         0x00000020  // 2nd Sample is End of Sequence
N#define ADC_SSCTL0_D1           0x00000010  // 2nd Sample Differential Input
N                                            // Select
N#define ADC_SSCTL0_TS0          0x00000008  // 1st Sample Temp Sensor Select
N#define ADC_SSCTL0_IE0          0x00000004  // 1st Sample Interrupt Enable
N#define ADC_SSCTL0_END0         0x00000002  // 1st Sample is End of Sequence
N#define ADC_SSCTL0_D0           0x00000001  // 1st Sample Differential Input
N                                            // Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFIFO0 register.
N//
N//*****************************************************************************
N#define ADC_SSFIFO0_DATA_M      0x00000FFF  // Conversion Result Data
N#define ADC_SSFIFO0_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFSTAT0 register.
N//
N//*****************************************************************************
N#define ADC_SSFSTAT0_FULL       0x00001000  // FIFO Full
N#define ADC_SSFSTAT0_EMPTY      0x00000100  // FIFO Empty
N#define ADC_SSFSTAT0_HPTR_M     0x000000F0  // FIFO Head Pointer
N#define ADC_SSFSTAT0_TPTR_M     0x0000000F  // FIFO Tail Pointer
N#define ADC_SSFSTAT0_HPTR_S     4
N#define ADC_SSFSTAT0_TPTR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSOP0 register.
N//
N//*****************************************************************************
N#define ADC_SSOP0_S7DCOP        0x10000000  // Sample 7 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S6DCOP        0x01000000  // Sample 6 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S5DCOP        0x00100000  // Sample 5 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S4DCOP        0x00010000  // Sample 4 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S3DCOP        0x00001000  // Sample 3 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S2DCOP        0x00000100  // Sample 2 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S1DCOP        0x00000010  // Sample 1 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S0DCOP        0x00000001  // Sample 0 Digital Comparator
N                                            // Operation
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSDC0 register.
N//
N//*****************************************************************************
N#define ADC_SSDC0_S7DCSEL_M     0xF0000000  // Sample 7 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S6DCSEL_M     0x0F000000  // Sample 6 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S5DCSEL_M     0x00F00000  // Sample 5 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S4DCSEL_M     0x000F0000  // Sample 4 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S3DCSEL_M     0x0000F000  // Sample 3 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S2DCSEL_M     0x00000F00  // Sample 2 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S1DCSEL_M     0x000000F0  // Sample 1 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S0DCSEL_M     0x0000000F  // Sample 0 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S6DCSEL_S     24
N#define ADC_SSDC0_S5DCSEL_S     20
N#define ADC_SSDC0_S4DCSEL_S     16
N#define ADC_SSDC0_S3DCSEL_S     12
N#define ADC_SSDC0_S2DCSEL_S     8
N#define ADC_SSDC0_S1DCSEL_S     4
N#define ADC_SSDC0_S0DCSEL_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSEMUX0 register.
N//
N//*****************************************************************************
N#define ADC_SSEMUX0_EMUX7       0x10000000  // 8th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX6       0x01000000  // 7th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX5       0x00100000  // 6th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX4       0x00010000  // 5th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX3       0x00001000  // 4th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX2       0x00000100  // 3rd Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX1       0x00000010  // 2th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX0       0x00000001  // 1st Sample Input Select (Upper
N                                            // Bit)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSTSH0 register.
N//
N//*****************************************************************************
N#define ADC_SSTSH0_TSH7_M       0xF0000000  // 8th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH6_M       0x0F000000  // 7th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH5_M       0x00F00000  // 6th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH4_M       0x000F0000  // 5th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH3_M       0x0000F000  // 4th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH2_M       0x00000F00  // 3rd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH1_M       0x000000F0  // 2nd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH0_M       0x0000000F  // 1st Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH7_S       28
N#define ADC_SSTSH0_TSH6_S       24
N#define ADC_SSTSH0_TSH5_S       20
N#define ADC_SSTSH0_TSH4_S       16
N#define ADC_SSTSH0_TSH3_S       12
N#define ADC_SSTSH0_TSH2_S       8
N#define ADC_SSTSH0_TSH1_S       4
N#define ADC_SSTSH0_TSH0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSMUX1 register.
N//
N//*****************************************************************************
N#define ADC_SSMUX1_MUX3_M       0x0000F000  // 4th Sample Input Select
N#define ADC_SSMUX1_MUX2_M       0x00000F00  // 3rd Sample Input Select
N#define ADC_SSMUX1_MUX1_M       0x000000F0  // 2nd Sample Input Select
N#define ADC_SSMUX1_MUX0_M       0x0000000F  // 1st Sample Input Select
N#define ADC_SSMUX1_MUX3_S       12
N#define ADC_SSMUX1_MUX2_S       8
N#define ADC_SSMUX1_MUX1_S       4
N#define ADC_SSMUX1_MUX0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSCTL1 register.
N//
N//*****************************************************************************
N#define ADC_SSCTL1_TS3          0x00008000  // 4th Sample Temp Sensor Select
N#define ADC_SSCTL1_IE3          0x00004000  // 4th Sample Interrupt Enable
N#define ADC_SSCTL1_END3         0x00002000  // 4th Sample is End of Sequence
N#define ADC_SSCTL1_D3           0x00001000  // 4th Sample Differential Input
N                                            // Select
N#define ADC_SSCTL1_TS2          0x00000800  // 3rd Sample Temp Sensor Select
N#define ADC_SSCTL1_IE2          0x00000400  // 3rd Sample Interrupt Enable
N#define ADC_SSCTL1_END2         0x00000200  // 3rd Sample is End of Sequence
N#define ADC_SSCTL1_D2           0x00000100  // 3rd Sample Differential Input
N                                            // Select
N#define ADC_SSCTL1_TS1          0x00000080  // 2nd Sample Temp Sensor Select
N#define ADC_SSCTL1_IE1          0x00000040  // 2nd Sample Interrupt Enable
N#define ADC_SSCTL1_END1         0x00000020  // 2nd Sample is End of Sequence
N#define ADC_SSCTL1_D1           0x00000010  // 2nd Sample Differential Input
N                                            // Select
N#define ADC_SSCTL1_TS0          0x00000008  // 1st Sample Temp Sensor Select
N#define ADC_SSCTL1_IE0          0x00000004  // 1st Sample Interrupt Enable
N#define ADC_SSCTL1_END0         0x00000002  // 1st Sample is End of Sequence
N#define ADC_SSCTL1_D0           0x00000001  // 1st Sample Differential Input
N                                            // Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFIFO1 register.
N//
N//*****************************************************************************
N#define ADC_SSFIFO1_DATA_M      0x00000FFF  // Conversion Result Data
N#define ADC_SSFIFO1_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFSTAT1 register.
N//
N//*****************************************************************************
N#define ADC_SSFSTAT1_FULL       0x00001000  // FIFO Full
N#define ADC_SSFSTAT1_EMPTY      0x00000100  // FIFO Empty
N#define ADC_SSFSTAT1_HPTR_M     0x000000F0  // FIFO Head Pointer
N#define ADC_SSFSTAT1_TPTR_M     0x0000000F  // FIFO Tail Pointer
N#define ADC_SSFSTAT1_HPTR_S     4
N#define ADC_SSFSTAT1_TPTR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSOP1 register.
N//
N//*****************************************************************************
N#define ADC_SSOP1_S3DCOP        0x00001000  // Sample 3 Digital Comparator
N                                            // Operation
N#define ADC_SSOP1_S2DCOP        0x00000100  // Sample 2 Digital Comparator
N                                            // Operation
N#define ADC_SSOP1_S1DCOP        0x00000010  // Sample 1 Digital Comparator
N                                            // Operation
N#define ADC_SSOP1_S0DCOP        0x00000001  // Sample 0 Digital Comparator
N                                            // Operation
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSDC1 register.
N//
N//*****************************************************************************
N#define ADC_SSDC1_S3DCSEL_M     0x0000F000  // Sample 3 Digital Comparator
N                                            // Select
N#define ADC_SSDC1_S2DCSEL_M     0x00000F00  // Sample 2 Digital Comparator
N                                            // Select
N#define ADC_SSDC1_S1DCSEL_M     0x000000F0  // Sample 1 Digital Comparator
N                                            // Select
N#define ADC_SSDC1_S0DCSEL_M     0x0000000F  // Sample 0 Digital Comparator
N                                            // Select
N#define ADC_SSDC1_S2DCSEL_S     8
N#define ADC_SSDC1_S1DCSEL_S     4
N#define ADC_SSDC1_S0DCSEL_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSEMUX1 register.
N//
N//*****************************************************************************
N#define ADC_SSEMUX1_EMUX3       0x00001000  // 4th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX1_EMUX2       0x00000100  // 3rd Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX1_EMUX1       0x00000010  // 2th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX1_EMUX0       0x00000001  // 1st Sample Input Select (Upper
N                                            // Bit)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSTSH1 register.
N//
N//*****************************************************************************
N#define ADC_SSTSH1_TSH3_M       0x0000F000  // 4th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH1_TSH2_M       0x00000F00  // 3rd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH1_TSH1_M       0x000000F0  // 2nd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH1_TSH0_M       0x0000000F  // 1st Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH1_TSH3_S       12
N#define ADC_SSTSH1_TSH2_S       8
N#define ADC_SSTSH1_TSH1_S       4
N#define ADC_SSTSH1_TSH0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSMUX2 register.
N//
N//*****************************************************************************
N#define ADC_SSMUX2_MUX3_M       0x0000F000  // 4th Sample Input Select
N#define ADC_SSMUX2_MUX2_M       0x00000F00  // 3rd Sample Input Select
N#define ADC_SSMUX2_MUX1_M       0x000000F0  // 2nd Sample Input Select
N#define ADC_SSMUX2_MUX0_M       0x0000000F  // 1st Sample Input Select
N#define ADC_SSMUX2_MUX3_S       12
N#define ADC_SSMUX2_MUX2_S       8
N#define ADC_SSMUX2_MUX1_S       4
N#define ADC_SSMUX2_MUX0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSCTL2 register.
N//
N//*****************************************************************************
N#define ADC_SSCTL2_TS3          0x00008000  // 4th Sample Temp Sensor Select
N#define ADC_SSCTL2_IE3          0x00004000  // 4th Sample Interrupt Enable
N#define ADC_SSCTL2_END3         0x00002000  // 4th Sample is End of Sequence
N#define ADC_SSCTL2_D3           0x00001000  // 4th Sample Differential Input
N                                            // Select
N#define ADC_SSCTL2_TS2          0x00000800  // 3rd Sample Temp Sensor Select
N#define ADC_SSCTL2_IE2          0x00000400  // 3rd Sample Interrupt Enable
N#define ADC_SSCTL2_END2         0x00000200  // 3rd Sample is End of Sequence
N#define ADC_SSCTL2_D2           0x00000100  // 3rd Sample Differential Input
N                                            // Select
N#define ADC_SSCTL2_TS1          0x00000080  // 2nd Sample Temp Sensor Select
N#define ADC_SSCTL2_IE1          0x00000040  // 2nd Sample Interrupt Enable
N#define ADC_SSCTL2_END1         0x00000020  // 2nd Sample is End of Sequence
N#define ADC_SSCTL2_D1           0x00000010  // 2nd Sample Differential Input
N                                            // Select
N#define ADC_SSCTL2_TS0          0x00000008  // 1st Sample Temp Sensor Select
N#define ADC_SSCTL2_IE0          0x00000004  // 1st Sample Interrupt Enable
N#define ADC_SSCTL2_END0         0x00000002  // 1st Sample is End of Sequence
N#define ADC_SSCTL2_D0           0x00000001  // 1st Sample Differential Input
N                                            // Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFIFO2 register.
N//
N//*****************************************************************************
N#define ADC_SSFIFO2_DATA_M      0x00000FFF  // Conversion Result Data
N#define ADC_SSFIFO2_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFSTAT2 register.
N//
N//*****************************************************************************
N#define ADC_SSFSTAT2_FULL       0x00001000  // FIFO Full
N#define ADC_SSFSTAT2_EMPTY      0x00000100  // FIFO Empty
N#define ADC_SSFSTAT2_HPTR_M     0x000000F0  // FIFO Head Pointer
N#define ADC_SSFSTAT2_TPTR_M     0x0000000F  // FIFO Tail Pointer
N#define ADC_SSFSTAT2_HPTR_S     4
N#define ADC_SSFSTAT2_TPTR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSOP2 register.
N//
N//*****************************************************************************
N#define ADC_SSOP2_S3DCOP        0x00001000  // Sample 3 Digital Comparator
N                                            // Operation
N#define ADC_SSOP2_S2DCOP        0x00000100  // Sample 2 Digital Comparator
N                                            // Operation
N#define ADC_SSOP2_S1DCOP        0x00000010  // Sample 1 Digital Comparator
N                                            // Operation
N#define ADC_SSOP2_S0DCOP        0x00000001  // Sample 0 Digital Comparator
N                                            // Operation
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSDC2 register.
N//
N//*****************************************************************************
N#define ADC_SSDC2_S3DCSEL_M     0x0000F000  // Sample 3 Digital Comparator
N                                            // Select
N#define ADC_SSDC2_S2DCSEL_M     0x00000F00  // Sample 2 Digital Comparator
N                                            // Select
N#define ADC_SSDC2_S1DCSEL_M     0x000000F0  // Sample 1 Digital Comparator
N                                            // Select
N#define ADC_SSDC2_S0DCSEL_M     0x0000000F  // Sample 0 Digital Comparator
N                                            // Select
N#define ADC_SSDC2_S2DCSEL_S     8
N#define ADC_SSDC2_S1DCSEL_S     4
N#define ADC_SSDC2_S0DCSEL_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSEMUX2 register.
N//
N//*****************************************************************************
N#define ADC_SSEMUX2_EMUX3       0x00001000  // 4th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX2_EMUX2       0x00000100  // 3rd Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX2_EMUX1       0x00000010  // 2th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX2_EMUX0       0x00000001  // 1st Sample Input Select (Upper
N                                            // Bit)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSTSH2 register.
N//
N//*****************************************************************************
N#define ADC_SSTSH2_TSH3_M       0x0000F000  // 4th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH2_TSH2_M       0x00000F00  // 3rd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH2_TSH1_M       0x000000F0  // 2nd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH2_TSH0_M       0x0000000F  // 1st Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH2_TSH3_S       12
N#define ADC_SSTSH2_TSH2_S       8
N#define ADC_SSTSH2_TSH1_S       4
N#define ADC_SSTSH2_TSH0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSMUX3 register.
N//
N//*****************************************************************************
N#define ADC_SSMUX3_MUX0_M       0x0000000F  // 1st Sample Input Select
N#define ADC_SSMUX3_MUX0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSCTL3 register.
N//
N//*****************************************************************************
N#define ADC_SSCTL3_TS0          0x00000008  // 1st Sample Temp Sensor Select
N#define ADC_SSCTL3_IE0          0x00000004  // Sample Interrupt Enable
N#define ADC_SSCTL3_END0         0x00000002  // End of Sequence
N#define ADC_SSCTL3_D0           0x00000001  // Sample Differential Input Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFIFO3 register.
N//
N//*****************************************************************************
N#define ADC_SSFIFO3_DATA_M      0x00000FFF  // Conversion Result Data
N#define ADC_SSFIFO3_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFSTAT3 register.
N//
N//*****************************************************************************
N#define ADC_SSFSTAT3_FULL       0x00001000  // FIFO Full
N#define ADC_SSFSTAT3_EMPTY      0x00000100  // FIFO Empty
N#define ADC_SSFSTAT3_HPTR_M     0x000000F0  // FIFO Head Pointer
N#define ADC_SSFSTAT3_TPTR_M     0x0000000F  // FIFO Tail Pointer
N#define ADC_SSFSTAT3_HPTR_S     4
N#define ADC_SSFSTAT3_TPTR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSOP3 register.
N//
N//*****************************************************************************
N#define ADC_SSOP3_S0DCOP        0x00000001  // Sample 0 Digital Comparator
N                                            // Operation
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSDC3 register.
N//
N//*****************************************************************************
N#define ADC_SSDC3_S0DCSEL_M     0x0000000F  // Sample 0 Digital Comparator
N                                            // Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSEMUX3 register.
N//
N//*****************************************************************************
N#define ADC_SSEMUX3_EMUX0       0x00000001  // 1st Sample Input Select (Upper
N                                            // Bit)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSTSH3 register.
N//
N//*****************************************************************************
N#define ADC_SSTSH3_TSH0_M       0x0000000F  // 1st Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH3_TSH0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCRIC register.
N//
N//*****************************************************************************
N#define ADC_DCRIC_DCTRIG7       0x00800000  // Digital Comparator Trigger 7
N#define ADC_DCRIC_DCTRIG6       0x00400000  // Digital Comparator Trigger 6
N#define ADC_DCRIC_DCTRIG5       0x00200000  // Digital Comparator Trigger 5
N#define ADC_DCRIC_DCTRIG4       0x00100000  // Digital Comparator Trigger 4
N#define ADC_DCRIC_DCTRIG3       0x00080000  // Digital Comparator Trigger 3
N#define ADC_DCRIC_DCTRIG2       0x00040000  // Digital Comparator Trigger 2
N#define ADC_DCRIC_DCTRIG1       0x00020000  // Digital Comparator Trigger 1
N#define ADC_DCRIC_DCTRIG0       0x00010000  // Digital Comparator Trigger 0
N#define ADC_DCRIC_DCINT7        0x00000080  // Digital Comparator Interrupt 7
N#define ADC_DCRIC_DCINT6        0x00000040  // Digital Comparator Interrupt 6
N#define ADC_DCRIC_DCINT5        0x00000020  // Digital Comparator Interrupt 5
N#define ADC_DCRIC_DCINT4        0x00000010  // Digital Comparator Interrupt 4
N#define ADC_DCRIC_DCINT3        0x00000008  // Digital Comparator Interrupt 3
N#define ADC_DCRIC_DCINT2        0x00000004  // Digital Comparator Interrupt 2
N#define ADC_DCRIC_DCINT1        0x00000002  // Digital Comparator Interrupt 1
N#define ADC_DCRIC_DCINT0        0x00000001  // Digital Comparator Interrupt 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL0 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL0_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL0_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL0_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL0_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL0_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL0_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL0_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL0_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL0_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL0_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL0_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL0_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL0_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL0_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL0_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL0_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL0_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL0_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL0_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL0_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL1 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL1_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL1_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL1_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL1_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL1_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL1_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL1_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL1_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL1_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL1_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL1_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL1_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL1_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL1_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL1_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL1_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL1_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL1_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL1_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL1_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL2 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL2_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL2_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL2_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL2_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL2_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL2_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL2_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL2_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL2_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL2_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL2_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL2_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL2_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL2_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL2_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL2_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL2_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL2_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL2_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL2_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL3 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL3_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL3_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL3_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL3_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL3_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL3_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL3_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL3_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL3_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL3_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL3_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL3_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL3_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL3_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL3_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL3_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL3_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL3_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL3_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL3_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL4 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL4_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL4_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL4_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL4_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL4_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL4_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL4_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL4_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL4_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL4_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL4_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL4_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL4_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL4_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL4_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL4_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL4_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL4_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL4_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL4_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL5 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL5_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL5_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL5_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL5_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL5_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL5_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL5_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL5_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL5_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL5_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL5_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL5_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL5_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL5_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL5_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL5_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL5_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL5_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL5_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL5_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL6 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL6_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL6_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL6_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL6_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL6_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL6_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL6_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL6_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL6_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL6_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL6_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL6_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL6_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL6_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL6_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL6_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL6_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL6_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL6_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL6_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL7 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL7_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL7_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL7_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL7_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL7_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL7_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL7_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL7_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL7_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL7_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL7_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL7_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL7_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL7_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL7_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL7_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL7_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL7_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL7_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL7_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP0 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP0_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP0_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP0_COMP1_S      16
N#define ADC_DCCMP0_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP1 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP1_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP1_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP1_COMP1_S      16
N#define ADC_DCCMP1_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP2 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP2_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP2_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP2_COMP1_S      16
N#define ADC_DCCMP2_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP3 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP3_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP3_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP3_COMP1_S      16
N#define ADC_DCCMP3_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP4 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP4_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP4_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP4_COMP1_S      16
N#define ADC_DCCMP4_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP5 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP5_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP5_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP5_COMP1_S      16
N#define ADC_DCCMP5_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP6 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP6_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP6_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP6_COMP1_S      16
N#define ADC_DCCMP6_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP7 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP7_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP7_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP7_COMP1_S      16
N#define ADC_DCCMP7_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_PP register.
N//
N//*****************************************************************************
N#define ADC_PP_APSHT            0x01000000  // Application-Programmable
N                                            // Sample-and-Hold Time
N#define ADC_PP_TS               0x00800000  // Temperature Sensor
N#define ADC_PP_RSL_M            0x007C0000  // Resolution
N#define ADC_PP_TYPE_M           0x00030000  // ADC Architecture
N#define ADC_PP_TYPE_SAR         0x00000000  // SAR
N#define ADC_PP_DC_M             0x0000FC00  // Digital Comparator Count
N#define ADC_PP_CH_M             0x000003F0  // ADC Channel Count
N#define ADC_PP_MCR_M            0x0000000F  // Maximum Conversion Rate
N#define ADC_PP_MCR_FULL         0x00000007  // Full conversion rate (FCONV) as
N                                            // defined by TADC and NSH
N#define ADC_PP_MSR_M            0x0000000F  // Maximum ADC Sample Rate
N#define ADC_PP_MSR_125K         0x00000001  // 125 ksps
N#define ADC_PP_MSR_250K         0x00000003  // 250 ksps
N#define ADC_PP_MSR_500K         0x00000005  // 500 ksps
N#define ADC_PP_MSR_1M           0x00000007  // 1 Msps
N#define ADC_PP_RSL_S            18
N#define ADC_PP_DC_S             10
N#define ADC_PP_CH_S             4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_PC register.
N//
N//*****************************************************************************
N#define ADC_PC_SR_M             0x0000000F  // ADC Sample Rate
N#define ADC_PC_SR_125K          0x00000001  // 125 ksps
N#define ADC_PC_SR_250K          0x00000003  // 250 ksps
N#define ADC_PC_SR_500K          0x00000005  // 500 ksps
N#define ADC_PC_SR_1M            0x00000007  // 1 Msps
N#define ADC_PC_MCR_M            0x0000000F  // Conversion Rate
N#define ADC_PC_MCR_1_8          0x00000001  // Eighth conversion rate. After a
N                                            // conversion completes, the logic
N                                            // pauses for 112 TADC periods
N                                            // before starting the next
N                                            // conversion
N#define ADC_PC_MCR_1_4          0x00000003  // Quarter conversion rate. After a
N                                            // conversion completes, the logic
N                                            // pauses for 48 TADC periods
N                                            // before starting the next
N                                            // conversion
N#define ADC_PC_MCR_1_2          0x00000005  // Half conversion rate. After a
N                                            // conversion completes, the logic
N                                            // pauses for 16 TADC periods
N                                            // before starting the next
N                                            // conversion
N#define ADC_PC_MCR_FULL         0x00000007  // Full conversion rate (FCONV) as
N                                            // defined by TADC and NSH
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_CC register.
N//
N//*****************************************************************************
N#define ADC_CC_CLKDIV_M         0x000003F0  // PLL VCO Clock Divisor
N#define ADC_CC_CS_M             0x0000000F  // ADC Clock Source
N#define ADC_CC_CS_SYSPLL        0x00000000  // PLL VCO divided by CLKDIV
N#define ADC_CC_CS_PIOSC         0x00000001  // PIOSC
N#define ADC_CC_CS_MOSC          0x00000002  // MOSC
N#define ADC_CC_CLKDIV_S         4
N
N#endif // __HW_ADC_H__
L 19 "..\inc_h\system.h" 2
N#include <hw_can.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_can.h" 1
N//*****************************************************************************
N//
N// hw_can.h - Defines and macros used when accessing the CAN controllers.
N//
N// Copyright (c) 2006-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_CAN_H__
N#define __HW_CAN_H__
N
N//*****************************************************************************
N//
N// The following are defines for the CAN register offsets.
N//
N//*****************************************************************************
N#define CAN_O_CTL               0x00000000  // CAN Control
N#define CAN_O_STS               0x00000004  // CAN Status
N#define CAN_O_ERR               0x00000008  // CAN Error Counter
N#define CAN_O_BIT               0x0000000C  // CAN Bit Timing
N#define CAN_O_INT               0x00000010  // CAN Interrupt
N#define CAN_O_TST               0x00000014  // CAN Test
N#define CAN_O_BRPE              0x00000018  // CAN Baud Rate Prescaler
N                                            // Extension
N#define CAN_O_IF1CRQ            0x00000020  // CAN IF1 Command Request
N#define CAN_O_IF1CMSK           0x00000024  // CAN IF1 Command Mask
N#define CAN_O_IF1MSK1           0x00000028  // CAN IF1 Mask 1
N#define CAN_O_IF1MSK2           0x0000002C  // CAN IF1 Mask 2
N#define CAN_O_IF1ARB1           0x00000030  // CAN IF1 Arbitration 1
N#define CAN_O_IF1ARB2           0x00000034  // CAN IF1 Arbitration 2
N#define CAN_O_IF1MCTL           0x00000038  // CAN IF1 Message Control
N#define CAN_O_IF1DA1            0x0000003C  // CAN IF1 Data A1
N#define CAN_O_IF1DA2            0x00000040  // CAN IF1 Data A2
N#define CAN_O_IF1DB1            0x00000044  // CAN IF1 Data B1
N#define CAN_O_IF1DB2            0x00000048  // CAN IF1 Data B2
N#define CAN_O_IF2CRQ            0x00000080  // CAN IF2 Command Request
N#define CAN_O_IF2CMSK           0x00000084  // CAN IF2 Command Mask
N#define CAN_O_IF2MSK1           0x00000088  // CAN IF2 Mask 1
N#define CAN_O_IF2MSK2           0x0000008C  // CAN IF2 Mask 2
N#define CAN_O_IF2ARB1           0x00000090  // CAN IF2 Arbitration 1
N#define CAN_O_IF2ARB2           0x00000094  // CAN IF2 Arbitration 2
N#define CAN_O_IF2MCTL           0x00000098  // CAN IF2 Message Control
N#define CAN_O_IF2DA1            0x0000009C  // CAN IF2 Data A1
N#define CAN_O_IF2DA2            0x000000A0  // CAN IF2 Data A2
N#define CAN_O_IF2DB1            0x000000A4  // CAN IF2 Data B1
N#define CAN_O_IF2DB2            0x000000A8  // CAN IF2 Data B2
N#define CAN_O_TXRQ1             0x00000100  // CAN Transmission Request 1
N#define CAN_O_TXRQ2             0x00000104  // CAN Transmission Request 2
N#define CAN_O_NWDA1             0x00000120  // CAN New Data 1
N#define CAN_O_NWDA2             0x00000124  // CAN New Data 2
N#define CAN_O_MSG1INT           0x00000140  // CAN Message 1 Interrupt Pending
N#define CAN_O_MSG2INT           0x00000144  // CAN Message 2 Interrupt Pending
N#define CAN_O_MSG1VAL           0x00000160  // CAN Message 1 Valid
N#define CAN_O_MSG2VAL           0x00000164  // CAN Message 2 Valid
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_CTL register.
N//
N//*****************************************************************************
N#define CAN_CTL_TEST            0x00000080  // Test Mode Enable
N#define CAN_CTL_CCE             0x00000040  // Configuration Change Enable
N#define CAN_CTL_DAR             0x00000020  // Disable Automatic-Retransmission
N#define CAN_CTL_EIE             0x00000008  // Error Interrupt Enable
N#define CAN_CTL_SIE             0x00000004  // Status Interrupt Enable
N#define CAN_CTL_IE              0x00000002  // CAN Interrupt Enable
N#define CAN_CTL_INIT            0x00000001  // Initialization
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_STS register.
N//
N//*****************************************************************************
N#define CAN_STS_BOFF            0x00000080  // Bus-Off Status
N#define CAN_STS_EWARN           0x00000040  // Warning Status
N#define CAN_STS_EPASS           0x00000020  // Error Passive
N#define CAN_STS_RXOK            0x00000010  // Received a Message Successfully
N#define CAN_STS_TXOK            0x00000008  // Transmitted a Message
N                                            // Successfully
N#define CAN_STS_LEC_M           0x00000007  // Last Error Code
N#define CAN_STS_LEC_NONE        0x00000000  // No Error
N#define CAN_STS_LEC_STUFF       0x00000001  // Stuff Error
N#define CAN_STS_LEC_FORM        0x00000002  // Format Error
N#define CAN_STS_LEC_ACK         0x00000003  // ACK Error
N#define CAN_STS_LEC_BIT1        0x00000004  // Bit 1 Error
N#define CAN_STS_LEC_BIT0        0x00000005  // Bit 0 Error
N#define CAN_STS_LEC_CRC         0x00000006  // CRC Error
N#define CAN_STS_LEC_NOEVENT     0x00000007  // No Event
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_ERR register.
N//
N//*****************************************************************************
N#define CAN_ERR_RP              0x00008000  // Received Error Passive
N#define CAN_ERR_REC_M           0x00007F00  // Receive Error Counter
N#define CAN_ERR_TEC_M           0x000000FF  // Transmit Error Counter
N#define CAN_ERR_REC_S           8
N#define CAN_ERR_TEC_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_BIT register.
N//
N//*****************************************************************************
N#define CAN_BIT_TSEG2_M         0x00007000  // Time Segment after Sample Point
N#define CAN_BIT_TSEG1_M         0x00000F00  // Time Segment Before Sample Point
N#define CAN_BIT_SJW_M           0x000000C0  // (Re)Synchronization Jump Width
N#define CAN_BIT_BRP_M           0x0000003F  // Baud Rate Prescaler
N#define CAN_BIT_TSEG2_S         12
N#define CAN_BIT_TSEG1_S         8
N#define CAN_BIT_SJW_S           6
N#define CAN_BIT_BRP_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_INT register.
N//
N//*****************************************************************************
N#define CAN_INT_INTID_M         0x0000FFFF  // Interrupt Identifier
N#define CAN_INT_INTID_NONE      0x00000000  // No interrupt pending
N#define CAN_INT_INTID_STATUS    0x00008000  // Status Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_TST register.
N//
N//*****************************************************************************
N#define CAN_TST_RX              0x00000080  // Receive Observation
N#define CAN_TST_TX_M            0x00000060  // Transmit Control
N#define CAN_TST_TX_CANCTL       0x00000000  // CAN Module Control
N#define CAN_TST_TX_SAMPLE       0x00000020  // Sample Point
N#define CAN_TST_TX_DOMINANT     0x00000040  // Driven Low
N#define CAN_TST_TX_RECESSIVE    0x00000060  // Driven High
N#define CAN_TST_LBACK           0x00000010  // Loopback Mode
N#define CAN_TST_SILENT          0x00000008  // Silent Mode
N#define CAN_TST_BASIC           0x00000004  // Basic Mode
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_BRPE register.
N//
N//*****************************************************************************
N#define CAN_BRPE_BRPE_M         0x0000000F  // Baud Rate Prescaler Extension
N#define CAN_BRPE_BRPE_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1CRQ register.
N//
N//*****************************************************************************
N#define CAN_IF1CRQ_BUSY         0x00008000  // Busy Flag
N#define CAN_IF1CRQ_MNUM_M       0x0000003F  // Message Number
N#define CAN_IF1CRQ_MNUM_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1CMSK register.
N//
N//*****************************************************************************
N#define CAN_IF1CMSK_WRNRD       0x00000080  // Write, Not Read
N#define CAN_IF1CMSK_MASK        0x00000040  // Access Mask Bits
N#define CAN_IF1CMSK_ARB         0x00000020  // Access Arbitration Bits
N#define CAN_IF1CMSK_CONTROL     0x00000010  // Access Control Bits
N#define CAN_IF1CMSK_CLRINTPND   0x00000008  // Clear Interrupt Pending Bit
N#define CAN_IF1CMSK_NEWDAT      0x00000004  // Access New Data
N#define CAN_IF1CMSK_TXRQST      0x00000004  // Access Transmission Request
N#define CAN_IF1CMSK_DATAA       0x00000002  // Access Data Byte 0 to 3
N#define CAN_IF1CMSK_DATAB       0x00000001  // Access Data Byte 4 to 7
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1MSK1 register.
N//
N//*****************************************************************************
N#define CAN_IF1MSK1_IDMSK_M     0x0000FFFF  // Identifier Mask
N#define CAN_IF1MSK1_IDMSK_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1MSK2 register.
N//
N//*****************************************************************************
N#define CAN_IF1MSK2_MXTD        0x00008000  // Mask Extended Identifier
N#define CAN_IF1MSK2_MDIR        0x00004000  // Mask Message Direction
N#define CAN_IF1MSK2_IDMSK_M     0x00001FFF  // Identifier Mask
N#define CAN_IF1MSK2_IDMSK_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1ARB1 register.
N//
N//*****************************************************************************
N#define CAN_IF1ARB1_ID_M        0x0000FFFF  // Message Identifier
N#define CAN_IF1ARB1_ID_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1ARB2 register.
N//
N//*****************************************************************************
N#define CAN_IF1ARB2_MSGVAL      0x00008000  // Message Valid
N#define CAN_IF1ARB2_XTD         0x00004000  // Extended Identifier
N#define CAN_IF1ARB2_DIR         0x00002000  // Message Direction
N#define CAN_IF1ARB2_ID_M        0x00001FFF  // Message Identifier
N#define CAN_IF1ARB2_ID_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1MCTL register.
N//
N//*****************************************************************************
N#define CAN_IF1MCTL_NEWDAT      0x00008000  // New Data
N#define CAN_IF1MCTL_MSGLST      0x00004000  // Message Lost
N#define CAN_IF1MCTL_INTPND      0x00002000  // Interrupt Pending
N#define CAN_IF1MCTL_UMASK       0x00001000  // Use Acceptance Mask
N#define CAN_IF1MCTL_TXIE        0x00000800  // Transmit Interrupt Enable
N#define CAN_IF1MCTL_RXIE        0x00000400  // Receive Interrupt Enable
N#define CAN_IF1MCTL_RMTEN       0x00000200  // Remote Enable
N#define CAN_IF1MCTL_TXRQST      0x00000100  // Transmit Request
N#define CAN_IF1MCTL_EOB         0x00000080  // End of Buffer
N#define CAN_IF1MCTL_DLC_M       0x0000000F  // Data Length Code
N#define CAN_IF1MCTL_DLC_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1DA1 register.
N//
N//*****************************************************************************
N#define CAN_IF1DA1_DATA_M       0x0000FFFF  // Data
N#define CAN_IF1DA1_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1DA2 register.
N//
N//*****************************************************************************
N#define CAN_IF1DA2_DATA_M       0x0000FFFF  // Data
N#define CAN_IF1DA2_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1DB1 register.
N//
N//*****************************************************************************
N#define CAN_IF1DB1_DATA_M       0x0000FFFF  // Data
N#define CAN_IF1DB1_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1DB2 register.
N//
N//*****************************************************************************
N#define CAN_IF1DB2_DATA_M       0x0000FFFF  // Data
N#define CAN_IF1DB2_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2CRQ register.
N//
N//*****************************************************************************
N#define CAN_IF2CRQ_BUSY         0x00008000  // Busy Flag
N#define CAN_IF2CRQ_MNUM_M       0x0000003F  // Message Number
N#define CAN_IF2CRQ_MNUM_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2CMSK register.
N//
N//*****************************************************************************
N#define CAN_IF2CMSK_WRNRD       0x00000080  // Write, Not Read
N#define CAN_IF2CMSK_MASK        0x00000040  // Access Mask Bits
N#define CAN_IF2CMSK_ARB         0x00000020  // Access Arbitration Bits
N#define CAN_IF2CMSK_CONTROL     0x00000010  // Access Control Bits
N#define CAN_IF2CMSK_CLRINTPND   0x00000008  // Clear Interrupt Pending Bit
N#define CAN_IF2CMSK_NEWDAT      0x00000004  // Access New Data
N#define CAN_IF2CMSK_TXRQST      0x00000004  // Access Transmission Request
N#define CAN_IF2CMSK_DATAA       0x00000002  // Access Data Byte 0 to 3
N#define CAN_IF2CMSK_DATAB       0x00000001  // Access Data Byte 4 to 7
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2MSK1 register.
N//
N//*****************************************************************************
N#define CAN_IF2MSK1_IDMSK_M     0x0000FFFF  // Identifier Mask
N#define CAN_IF2MSK1_IDMSK_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2MSK2 register.
N//
N//*****************************************************************************
N#define CAN_IF2MSK2_MXTD        0x00008000  // Mask Extended Identifier
N#define CAN_IF2MSK2_MDIR        0x00004000  // Mask Message Direction
N#define CAN_IF2MSK2_IDMSK_M     0x00001FFF  // Identifier Mask
N#define CAN_IF2MSK2_IDMSK_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2ARB1 register.
N//
N//*****************************************************************************
N#define CAN_IF2ARB1_ID_M        0x0000FFFF  // Message Identifier
N#define CAN_IF2ARB1_ID_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2ARB2 register.
N//
N//*****************************************************************************
N#define CAN_IF2ARB2_MSGVAL      0x00008000  // Message Valid
N#define CAN_IF2ARB2_XTD         0x00004000  // Extended Identifier
N#define CAN_IF2ARB2_DIR         0x00002000  // Message Direction
N#define CAN_IF2ARB2_ID_M        0x00001FFF  // Message Identifier
N#define CAN_IF2ARB2_ID_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2MCTL register.
N//
N//*****************************************************************************
N#define CAN_IF2MCTL_NEWDAT      0x00008000  // New Data
N#define CAN_IF2MCTL_MSGLST      0x00004000  // Message Lost
N#define CAN_IF2MCTL_INTPND      0x00002000  // Interrupt Pending
N#define CAN_IF2MCTL_UMASK       0x00001000  // Use Acceptance Mask
N#define CAN_IF2MCTL_TXIE        0x00000800  // Transmit Interrupt Enable
N#define CAN_IF2MCTL_RXIE        0x00000400  // Receive Interrupt Enable
N#define CAN_IF2MCTL_RMTEN       0x00000200  // Remote Enable
N#define CAN_IF2MCTL_TXRQST      0x00000100  // Transmit Request
N#define CAN_IF2MCTL_EOB         0x00000080  // End of Buffer
N#define CAN_IF2MCTL_DLC_M       0x0000000F  // Data Length Code
N#define CAN_IF2MCTL_DLC_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2DA1 register.
N//
N//*****************************************************************************
N#define CAN_IF2DA1_DATA_M       0x0000FFFF  // Data
N#define CAN_IF2DA1_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2DA2 register.
N//
N//*****************************************************************************
N#define CAN_IF2DA2_DATA_M       0x0000FFFF  // Data
N#define CAN_IF2DA2_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2DB1 register.
N//
N//*****************************************************************************
N#define CAN_IF2DB1_DATA_M       0x0000FFFF  // Data
N#define CAN_IF2DB1_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2DB2 register.
N//
N//*****************************************************************************
N#define CAN_IF2DB2_DATA_M       0x0000FFFF  // Data
N#define CAN_IF2DB2_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_TXRQ1 register.
N//
N//*****************************************************************************
N#define CAN_TXRQ1_TXRQST_M      0x0000FFFF  // Transmission Request Bits
N#define CAN_TXRQ1_TXRQST_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_TXRQ2 register.
N//
N//*****************************************************************************
N#define CAN_TXRQ2_TXRQST_M      0x0000FFFF  // Transmission Request Bits
N#define CAN_TXRQ2_TXRQST_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_NWDA1 register.
N//
N//*****************************************************************************
N#define CAN_NWDA1_NEWDAT_M      0x0000FFFF  // New Data Bits
N#define CAN_NWDA1_NEWDAT_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_NWDA2 register.
N//
N//*****************************************************************************
N#define CAN_NWDA2_NEWDAT_M      0x0000FFFF  // New Data Bits
N#define CAN_NWDA2_NEWDAT_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_MSG1INT register.
N//
N//*****************************************************************************
N#define CAN_MSG1INT_INTPND_M    0x0000FFFF  // Interrupt Pending Bits
N#define CAN_MSG1INT_INTPND_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_MSG2INT register.
N//
N//*****************************************************************************
N#define CAN_MSG2INT_INTPND_M    0x0000FFFF  // Interrupt Pending Bits
N#define CAN_MSG2INT_INTPND_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_MSG1VAL register.
N//
N//*****************************************************************************
N#define CAN_MSG1VAL_MSGVAL_M    0x0000FFFF  // Message Valid Bits
N#define CAN_MSG1VAL_MSGVAL_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_MSG2VAL register.
N//
N//*****************************************************************************
N#define CAN_MSG2VAL_MSGVAL_M    0x0000FFFF  // Message Valid Bits
N#define CAN_MSG2VAL_MSGVAL_S    0
N
N#endif // __HW_CAN_H__
L 20 "..\inc_h\system.h" 2
N#include <interrupt.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\interrupt.h" 1
N//*****************************************************************************
N//
N// interrupt.h - Prototypes for the NVIC Interrupt Controller Driver.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_INTERRUPT_H__
N#define __DRIVERLIB_INTERRUPT_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Macro to generate an interrupt priority mask based on the number of bits
N// of priority supported by the hardware.
N//
N//*****************************************************************************
N#define INT_PRIORITY_MASK       ((0xFF << (8 - NUM_PRIORITY_BITS)) & 0xFF)
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern bool IntMasterEnable(void);
Xextern _Bool IntMasterEnable(void);
Nextern bool IntMasterDisable(void);
Xextern _Bool IntMasterDisable(void);
Nextern void IntRegister(uint32_t ui32Interrupt, void (*pfnHandler)(void));
Nextern void IntUnregister(uint32_t ui32Interrupt);
Nextern void IntPriorityGroupingSet(uint32_t ui32Bits);
Nextern uint32_t IntPriorityGroupingGet(void);
Nextern void IntPrioritySet(uint32_t ui32Interrupt,
N                           uint8_t ui8Priority);
Nextern int32_t IntPriorityGet(uint32_t ui32Interrupt);
Nextern void IntEnable(uint32_t ui32Interrupt);
Nextern void IntDisable(uint32_t ui32Interrupt);
Nextern uint32_t IntIsEnabled(uint32_t ui32Interrupt);
Nextern void IntPendSet(uint32_t ui32Interrupt);
Nextern void IntPendClear(uint32_t ui32Interrupt);
Nextern void IntPriorityMaskSet(uint32_t ui32PriorityMask);
Nextern uint32_t IntPriorityMaskGet(void);
Nextern void IntTrigger(uint32_t ui32Interrupt);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_INTERRUPT_H__
L 21 "..\inc_h\system.h" 2
N#include <eeprom.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\eeprom.h" 1
N//*****************************************************************************
N//
N// eeprom.h - Prototypes for the EEPROM driver.
N//
N// Copyright (c) 2010-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_EEPROM_H__
N#define __DRIVERLIB_EEPROM_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N//! \addtogroup eeprom_api
N//! @{
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// Values returned by EEPROMInit.
N//
N//*****************************************************************************
N
N//
N//! This value may be returned from a call to EEPROMInit().  It indicates that
N//! no previous write operations were interrupted by a reset event and that the
N//! EEPROM peripheral is ready for use.
N//
N#define EEPROM_INIT_OK      0
N
N//
N//! This value may be returned from a call to EEPROMInit().  It indicates that
N//! a previous data or protection write operation was interrupted by a reset
N//! event and that the EEPROM peripheral was unable to clean up after the
N//! problem.  This situation may be resolved with another reset or may be fatal
N//! depending upon the cause of the problem.  For example, if the voltage to
N//! the part is unstable, retrying once the voltage has stabilized may clear
N//! the error.
N//
N#define EEPROM_INIT_ERROR   2
N
N//*****************************************************************************
N//
N// Error indicators returned by various EEPROM API calls.  These will be ORed
N// together into the final return code.
N//
N//*****************************************************************************
N
N//
N//! This return code bit indicates that an attempt was made to read from
N//! the EEPROM while a write operation was in progress.
N//
N#define EEPROM_RC_WRBUSY            0x00000020
N
N//
N//! This return code bit indicates that an attempt was made to write a
N//! value but the destination permissions disallow write operations.  This
N//! may be due to the destination block being locked, access protection set
N//! to prohibit writes or an attempt to write a password when one is already
N//! written.
N//
N#define EEPROM_RC_NOPERM            0x00000010
N
N//
N//! This return code bit indicates that the EEPROM programming state machine
N//! is currently copying to or from the internal copy buffer to make room for
N//! a newly written value.  It is provided as a status indicator and does not
N//! indicate an error.
N//
N#define EEPROM_RC_WKCOPY            0x00000008
N
N//
N//! This return code bit indicates that the EEPROM programming state machine
N//! is currently erasing the internal copy buffer.  It is provided as a
N//! status indicator and does not indicate an error.
N//
N#define EEPROM_RC_WKERASE           0x00000004
N
N//
N//! This return code bit indicates that the EEPROM programming state machine
N//! is currently working.  No new write operations should be attempted until
N//! this bit is clear.
N//
N#define EEPROM_RC_WORKING           0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to EEPROMBlockProtectSet() in the ui32Protect
N// parameter, and returned by EEPROMBlockProtectGet().
N//
N//*****************************************************************************
N
N//
N//! This bit may be ORed with the protection option passed to
N//! EEPROMBlockProtectSet() or returned from EEPROMBlockProtectGet().  It
N//! restricts EEPROM access to threads running in supervisor mode and prevents
N//! access to an EEPROM block when the CPU is in user mode.
N//
N#define EEPROM_PROT_SUPERVISOR_ONLY 0x00000008
N
N//
N//! This value may be passed to EEPROMBlockProtectSet() or returned from
N//! EEPROMBlockProtectGet().  It indicates that the block should offer
N//! read/write access when no password is set or when a password is set and
N//! the block is unlocked, and read-only access when a password is set but
N//! the block is locked.
N//
N#define EEPROM_PROT_RW_LRO_URW      0x00000000
N
N//
N//! This value may be passed to EEPROMBlockProtectSet() or returned from
N//! EEPROMBlockProtectGet().  It indicates that the block should offer neither
N//! read nor write access unless it is protected by a password and unlocked.
N//
N#define EEPROM_PROT_NA_LNA_URW      0x00000001
N
N//
N//! This value may be passed to EEPROMBlockProtectSet() or returned from
N//! EEPROMBlockProtectGet().  It indicates that the block should offer
N//! read-only access when no password is set or when a password is set and the
N//! block is unlocked.  When a password is set and the block is locked, neither
N//! read nor write access is permitted.
N//
N#define EEPROM_PROT_RO_LNA_URO      0x00000002
N
N//*****************************************************************************
N//
N//! This value may be passed to EEPROMIntEnable() and EEPROMIntDisable() and is
N//! returned by EEPROMIntStatus() if an EEPROM interrupt is currently being
N//! signaled.
N//
N//*****************************************************************************
N#define EEPROM_INT_PROGRAM          0x00000004
N
N//*****************************************************************************
N//
N//! Returns the EEPROM block number containing a given offset address.
N//!
N//! \param ui32Addr is the linear, byte address of the EEPROM location whose
N//! block number is to be returned.  This is a zero-based offset from the start
N//! of the EEPROM storage.
N//!
N//! This macro may be used to translate an EEPROM address offset into a
N//! block number suitable for use in any of the driver's block protection
N//! functions.  The address provided is expressed as a byte offset from the
N//! base of the EEPROM.
N//!
N//! \return Returns the zero-based block number which contains the passed
N//! address.
N//
N//*****************************************************************************
N#define EEPROMBlockFromAddr(ui32Addr) ((ui32Addr) >> 6)
N
N//*****************************************************************************
N//
N//! Returns the offset address of the first word in an EEPROM block.
N//!
N//! \param ui32Block is the index of the EEPROM block whose first word address
N//! is to be returned.
N//!
N//! This macro may be used to determine the address of the first word in a
N//! given EEPROM block.  The address returned is expressed as a byte offset
N//! from the base of EEPROM storage.
N//!
N//! \return Returns the address of the first word in the given EEPROM block.
N//
N//*****************************************************************************
N#define EEPROMAddrFromBlock(ui32Block) ((ui32Block) << 6)
N
N//*****************************************************************************
N//
N// Close the Doxygen group.
N//! @}
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern uint32_t EEPROMInit(void);
Nextern uint32_t EEPROMSizeGet(void);
Nextern uint32_t EEPROMBlockCountGet(void);
Nextern void EEPROMRead(uint32_t *pui32Data, uint32_t ui32Address,
N                       uint32_t ui32Count);
Nextern uint32_t EEPROMProgram(uint32_t *pui32Data,
N                              uint32_t ui32Address,
N                              uint32_t ui32Count);
Nextern uint32_t EEPROMProgramNonBlocking(uint32_t ui32Data,
N                                         uint32_t ui32Address);
Nextern uint32_t EEPROMStatusGet(void);
Nextern uint32_t EEPROMMassErase(void);
Nextern uint32_t EEPROMBlockProtectGet(uint32_t ui32Block);
Nextern uint32_t EEPROMBlockProtectSet(uint32_t ui32Block,
N                                      uint32_t ui32Protect);
Nextern uint32_t EEPROMBlockPasswordSet(uint32_t ui32Block,
N                                       uint32_t *pui32Password,
N                                       uint32_t ui32Count);
Nextern uint32_t EEPROMBlockLock(uint32_t ui32Block);
Nextern uint32_t EEPROMBlockUnlock(uint32_t ui32Block,
N                                  uint32_t *pui32Password,
N                                  uint32_t ui32Count);
Nextern void EEPROMBlockHide(uint32_t ui32Block);
Nextern void EEPROMIntEnable(uint32_t ui32IntFlags);
Nextern void EEPROMIntDisable(uint32_t ui32IntFlags);
Nextern uint32_t EEPROMIntStatus(bool bMasked);
Xextern uint32_t EEPROMIntStatus(_Bool bMasked);
Nextern void EEPROMIntClear(uint32_t ui32IntFlags);
N
N#ifndef DEPRECATED
N//*****************************************************************************
N//
N// The following definitions appeared in previous revisions of this file
N// but have been deprecated and should not be used by applications.
N//
N//*****************************************************************************
N
N//
N// This value used to be one of those which could be returned from a call to
N// EEPROMInit().  It transpires that it is was incorrect and has been removed
N// after EEPROMInit() was reworked for TivaWare 2.1.
N//
N#define EEPROM_INIT_RETRY   1
N
N//
N// This return code is not available from any Tiva part and has been removed.
N//
N#define EEPROM_RC_INVPL             0x00000100
N
N#endif
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_EEPROM_H__
L 22 "..\inc_h\system.h" 2
N#include <hw_eeprom.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_eeprom.h" 1
N//*****************************************************************************
N//
N// hw_eeprom.h - Macros used when accessing the EEPROM controller.
N//
N// Copyright (c) 2011-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_EEPROM_H__
N#define __HW_EEPROM_H__
N
N//*****************************************************************************
N//
N// The following are defines for the EEPROM register offsets.
N//
N//*****************************************************************************
N#define EEPROM_EESIZE           0x400AF000  // EEPROM Size Information
N#define EEPROM_EEBLOCK          0x400AF004  // EEPROM Current Block
N#define EEPROM_EEOFFSET         0x400AF008  // EEPROM Current Offset
N#define EEPROM_EERDWR           0x400AF010  // EEPROM Read-Write
N#define EEPROM_EERDWRINC        0x400AF014  // EEPROM Read-Write with Increment
N#define EEPROM_EEDONE           0x400AF018  // EEPROM Done Status
N#define EEPROM_EESUPP           0x400AF01C  // EEPROM Support Control and
N                                            // Status
N#define EEPROM_EEUNLOCK         0x400AF020  // EEPROM Unlock
N#define EEPROM_EEPROT           0x400AF030  // EEPROM Protection
N#define EEPROM_EEPASS0          0x400AF034  // EEPROM Password
N#define EEPROM_EEPASS1          0x400AF038  // EEPROM Password
N#define EEPROM_EEPASS2          0x400AF03C  // EEPROM Password
N#define EEPROM_EEINT            0x400AF040  // EEPROM Interrupt
N#define EEPROM_EEHIDE0          0x400AF050  // EEPROM Block Hide 0
N#define EEPROM_EEHIDE           0x400AF050  // EEPROM Block Hide
N#define EEPROM_EEHIDE1          0x400AF054  // EEPROM Block Hide 1
N#define EEPROM_EEHIDE2          0x400AF058  // EEPROM Block Hide 2
N#define EEPROM_EEDBGME          0x400AF080  // EEPROM Debug Mass Erase
N#define EEPROM_PP               0x400AFFC0  // EEPROM Peripheral Properties
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EESIZE register.
N//
N//*****************************************************************************
N#define EEPROM_EESIZE_WORDCNT_M 0x0000FFFF  // Number of 32-Bit Words
N#define EEPROM_EESIZE_BLKCNT_M  0x07FF0000  // Number of 16-Word Blocks
N#define EEPROM_EESIZE_WORDCNT_S 0
N#define EEPROM_EESIZE_BLKCNT_S  16
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEBLOCK register.
N//
N//*****************************************************************************
N#define EEPROM_EEBLOCK_BLOCK_M  0x0000FFFF  // Current Block
N#define EEPROM_EEBLOCK_BLOCK_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEOFFSET
N// register.
N//
N//*****************************************************************************
N#define EEPROM_EEOFFSET_OFFSET_M                                              \
N                                0x0000000F  // Current Address Offset
X#define EEPROM_EEOFFSET_OFFSET_M                                                                              0x0000000F  
N#define EEPROM_EEOFFSET_OFFSET_S                                              \
N                                0
X#define EEPROM_EEOFFSET_OFFSET_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EERDWR register.
N//
N//*****************************************************************************
N#define EEPROM_EERDWR_VALUE_M   0xFFFFFFFF  // EEPROM Read or Write Data
N#define EEPROM_EERDWR_VALUE_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EERDWRINC
N// register.
N//
N//*****************************************************************************
N#define EEPROM_EERDWRINC_VALUE_M                                              \
N                                0xFFFFFFFF  // EEPROM Read or Write Data with
X#define EEPROM_EERDWRINC_VALUE_M                                                                              0xFFFFFFFF  
N                                            // Increment
N#define EEPROM_EERDWRINC_VALUE_S                                              \
N                                0
X#define EEPROM_EERDWRINC_VALUE_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEDONE register.
N//
N//*****************************************************************************
N#define EEPROM_EEDONE_WORKING   0x00000001  // EEPROM Working
N#define EEPROM_EEDONE_WKERASE   0x00000004  // Working on an Erase
N#define EEPROM_EEDONE_WKCOPY    0x00000008  // Working on a Copy
N#define EEPROM_EEDONE_NOPERM    0x00000010  // Write Without Permission
N#define EEPROM_EEDONE_WRBUSY    0x00000020  // Write Busy
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EESUPP register.
N//
N//*****************************************************************************
N#define EEPROM_EESUPP_ERETRY    0x00000004  // Erase Must Be Retried
N#define EEPROM_EESUPP_PRETRY    0x00000008  // Programming Must Be Retried
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEUNLOCK
N// register.
N//
N//*****************************************************************************
N#define EEPROM_EEUNLOCK_UNLOCK_M                                              \
N                                0xFFFFFFFF  // EEPROM Unlock
X#define EEPROM_EEUNLOCK_UNLOCK_M                                                                              0xFFFFFFFF  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEPROT register.
N//
N//*****************************************************************************
N#define EEPROM_EEPROT_PROT_M    0x00000007  // Protection Control
N#define EEPROM_EEPROT_PROT_RWNPW                                              \
N                                0x00000000  // This setting is the default. If
X#define EEPROM_EEPROT_PROT_RWNPW                                                                              0x00000000  
N                                            // there is no password, the block
N                                            // is not protected and is readable
N                                            // and writable
N#define EEPROM_EEPROT_PROT_RWPW 0x00000001  // If there is a password, the
N                                            // block is readable or writable
N                                            // only when unlocked
N#define EEPROM_EEPROT_PROT_RONPW                                              \
N                                0x00000002  // If there is no password, the
X#define EEPROM_EEPROT_PROT_RONPW                                                                              0x00000002  
N                                            // block is readable, not writable
N#define EEPROM_EEPROT_ACC       0x00000008  // Access Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEPASS0 register.
N//
N//*****************************************************************************
N#define EEPROM_EEPASS0_PASS_M   0xFFFFFFFF  // Password
N#define EEPROM_EEPASS0_PASS_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEPASS1 register.
N//
N//*****************************************************************************
N#define EEPROM_EEPASS1_PASS_M   0xFFFFFFFF  // Password
N#define EEPROM_EEPASS1_PASS_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEPASS2 register.
N//
N//*****************************************************************************
N#define EEPROM_EEPASS2_PASS_M   0xFFFFFFFF  // Password
N#define EEPROM_EEPASS2_PASS_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEINT register.
N//
N//*****************************************************************************
N#define EEPROM_EEINT_INT        0x00000001  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEHIDE0 register.
N//
N//*****************************************************************************
N#define EEPROM_EEHIDE0_HN_M     0xFFFFFFFE  // Hide Block
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEHIDE register.
N//
N//*****************************************************************************
N#define EEPROM_EEHIDE_HN_M      0xFFFFFFFE  // Hide Block
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEHIDE1 register.
N//
N//*****************************************************************************
N#define EEPROM_EEHIDE1_HN_M     0xFFFFFFFF  // Hide Block
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEHIDE2 register.
N//
N//*****************************************************************************
N#define EEPROM_EEHIDE2_HN_M     0xFFFFFFFF  // Hide Block
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEDBGME register.
N//
N//*****************************************************************************
N#define EEPROM_EEDBGME_ME       0x00000001  // Mass Erase
N#define EEPROM_EEDBGME_KEY_M    0xFFFF0000  // Erase Key
N#define EEPROM_EEDBGME_KEY_S    16
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_PP register.
N//
N//*****************************************************************************
N#define EEPROM_PP_SIZE_M        0x0000FFFF  // EEPROM Size
N#define EEPROM_PP_SIZE_64       0x00000000  // 64 bytes of EEPROM
N#define EEPROM_PP_SIZE_128      0x00000001  // 128 bytes of EEPROM
N#define EEPROM_PP_SIZE_256      0x00000003  // 256 bytes of EEPROM
N#define EEPROM_PP_SIZE_512      0x00000007  // 512 bytes of EEPROM
N#define EEPROM_PP_SIZE_1K       0x0000000F  // 1 KB of EEPROM
N#define EEPROM_PP_SIZE_2K       0x0000001F  // 2 KB of EEPROM
N#define EEPROM_PP_SIZE_3K       0x0000003F  // 3 KB of EEPROM
N#define EEPROM_PP_SIZE_4K       0x0000007F  // 4 KB of EEPROM
N#define EEPROM_PP_SIZE_5K       0x000000FF  // 5 KB of EEPROM
N#define EEPROM_PP_SIZE_6K       0x000001FF  // 6 KB of EEPROM
N#define EEPROM_PP_SIZE_S        0
N
N#endif // __HW_EEPROM_H__
L 23 "..\inc_h\system.h" 2
N#include <hw_gpio.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_gpio.h" 1
N//*****************************************************************************
N//
N// hw_gpio.h - Defines and Macros for GPIO hardware.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_GPIO_H__
N#define __HW_GPIO_H__
N
N//*****************************************************************************
N//
N// The following are defines for the GPIO register offsets.
N//
N//*****************************************************************************
N#define GPIO_O_DATA             0x00000000  // GPIO Data
N#define GPIO_O_DIR              0x00000400  // GPIO Direction
N#define GPIO_O_IS               0x00000404  // GPIO Interrupt Sense
N#define GPIO_O_IBE              0x00000408  // GPIO Interrupt Both Edges
N#define GPIO_O_IEV              0x0000040C  // GPIO Interrupt Event
N#define GPIO_O_IM               0x00000410  // GPIO Interrupt Mask
N#define GPIO_O_RIS              0x00000414  // GPIO Raw Interrupt Status
N#define GPIO_O_MIS              0x00000418  // GPIO Masked Interrupt Status
N#define GPIO_O_ICR              0x0000041C  // GPIO Interrupt Clear
N#define GPIO_O_AFSEL            0x00000420  // GPIO Alternate Function Select
N#define GPIO_O_DR2R             0x00000500  // GPIO 2-mA Drive Select
N#define GPIO_O_DR4R             0x00000504  // GPIO 4-mA Drive Select
N#define GPIO_O_DR8R             0x00000508  // GPIO 8-mA Drive Select
N#define GPIO_O_ODR              0x0000050C  // GPIO Open Drain Select
N#define GPIO_O_PUR              0x00000510  // GPIO Pull-Up Select
N#define GPIO_O_PDR              0x00000514  // GPIO Pull-Down Select
N#define GPIO_O_SLR              0x00000518  // GPIO Slew Rate Control Select
N#define GPIO_O_DEN              0x0000051C  // GPIO Digital Enable
N#define GPIO_O_LOCK             0x00000520  // GPIO Lock
N#define GPIO_O_CR               0x00000524  // GPIO Commit
N#define GPIO_O_AMSEL            0x00000528  // GPIO Analog Mode Select
N#define GPIO_O_PCTL             0x0000052C  // GPIO Port Control
N#define GPIO_O_ADCCTL           0x00000530  // GPIO ADC Control
N#define GPIO_O_DMACTL           0x00000534  // GPIO DMA Control
N#define GPIO_O_SI               0x00000538  // GPIO Select Interrupt
N#define GPIO_O_DR12R            0x0000053C  // GPIO 12-mA Drive Select
N#define GPIO_O_WAKEPEN          0x00000540  // GPIO Wake Pin Enable
N#define GPIO_O_WAKELVL          0x00000544  // GPIO Wake Level
N#define GPIO_O_WAKESTAT         0x00000548  // GPIO Wake Status
N#define GPIO_O_PP               0x00000FC0  // GPIO Peripheral Property
N#define GPIO_O_PC               0x00000FC4  // GPIO Peripheral Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_IM register.
N//
N//*****************************************************************************
N#define GPIO_IM_DMAIME          0x00000100  // GPIO uDMA Done Interrupt Mask
N                                            // Enable
N#define GPIO_IM_GPIO_M          0x000000FF  // GPIO Interrupt Mask Enable
N#define GPIO_IM_GPIO_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_RIS register.
N//
N//*****************************************************************************
N#define GPIO_RIS_DMARIS         0x00000100  // GPIO uDMA Done Interrupt Raw
N                                            // Status
N#define GPIO_RIS_GPIO_M         0x000000FF  // GPIO Interrupt Raw Status
N#define GPIO_RIS_GPIO_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_MIS register.
N//
N//*****************************************************************************
N#define GPIO_MIS_DMAMIS         0x00000100  // GPIO uDMA Done Masked Interrupt
N                                            // Status
N#define GPIO_MIS_GPIO_M         0x000000FF  // GPIO Masked Interrupt Status
N#define GPIO_MIS_GPIO_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_ICR register.
N//
N//*****************************************************************************
N#define GPIO_ICR_DMAIC          0x00000100  // GPIO uDMA Interrupt Clear
N#define GPIO_ICR_GPIO_M         0x000000FF  // GPIO Interrupt Clear
N#define GPIO_ICR_GPIO_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_LOCK register.
N//
N//*****************************************************************************
N#define GPIO_LOCK_M             0xFFFFFFFF  // GPIO Lock
N#define GPIO_LOCK_UNLOCKED      0x00000000  // The GPIOCR register is unlocked
N                                            // and may be modified
N#define GPIO_LOCK_LOCKED        0x00000001  // The GPIOCR register is locked
N                                            // and may not be modified
N#define GPIO_LOCK_KEY           0x4C4F434B  // Unlocks the GPIO_CR register
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_SI register.
N//
N//*****************************************************************************
N#define GPIO_SI_SUM             0x00000001  // Summary Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_DR12R register.
N//
N//*****************************************************************************
N#define GPIO_DR12R_DRV12_M      0x000000FF  // Output Pad 12-mA Drive Enable
N#define GPIO_DR12R_DRV12_12MA   0x00000001  // The corresponding GPIO pin has
N                                            // 12-mA drive. This encoding is
N                                            // only valid if the GPIOPP EDE bit
N                                            // is set and the appropriate
N                                            // GPIOPC EDM bit field is
N                                            // programmed to 0x3
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_WAKEPEN register.
N//
N//*****************************************************************************
N#define GPIO_WAKEPEN_WAKEP4     0x00000010  // P[4] Wake Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_WAKELVL register.
N//
N//*****************************************************************************
N#define GPIO_WAKELVL_WAKELVL4   0x00000010  // P[4] Wake Level
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_WAKESTAT
N// register.
N//
N//*****************************************************************************
N#define GPIO_WAKESTAT_STAT4     0x00000010  // P[4] Wake Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_PP register.
N//
N//*****************************************************************************
N#define GPIO_PP_EDE             0x00000001  // Extended Drive Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_PC register.
N//
N//*****************************************************************************
N#define GPIO_PC_EDM7_M          0x0000C000  // Extended Drive Mode Bit 7
N#define GPIO_PC_EDM6_M          0x00003000  // Extended Drive Mode Bit 6
N#define GPIO_PC_EDM5_M          0x00000C00  // Extended Drive Mode Bit 5
N#define GPIO_PC_EDM4_M          0x00000300  // Extended Drive Mode Bit 4
N#define GPIO_PC_EDM3_M          0x000000C0  // Extended Drive Mode Bit 3
N#define GPIO_PC_EDM2_M          0x00000030  // Extended Drive Mode Bit 2
N#define GPIO_PC_EDM1_M          0x0000000C  // Extended Drive Mode Bit 1
N#define GPIO_PC_EDM0_M          0x00000003  // Extended Drive Mode Bit 0
N#define GPIO_PC_EDM0_DISABLE    0x00000000  // Drive values of 2, 4 and 8 mA
N                                            // are maintained. GPIO n Drive
N                                            // Select (GPIODRnR) registers
N                                            // function as normal
N#define GPIO_PC_EDM0_6MA        0x00000001  // An additional 6 mA option is
N                                            // provided
N#define GPIO_PC_EDM0_PLUS2MA    0x00000003  // A 2 mA driver is always enabled;
N                                            // setting the corresponding
N                                            // GPIODR4R register bit adds 2 mA
N                                            // and setting the corresponding
N                                            // GPIODR8R of GPIODR12R register
N                                            // bit adds an additional 4 mA
N#define GPIO_PC_EDM7_S          14
N#define GPIO_PC_EDM6_S          12
N#define GPIO_PC_EDM5_S          10
N#define GPIO_PC_EDM4_S          8
N#define GPIO_PC_EDM3_S          6
N#define GPIO_PC_EDM2_S          4
N#define GPIO_PC_EDM1_S          2
N
N#endif // __HW_GPIO_H__
L 24 "..\inc_h\system.h" 2
N#include <hw_nvic.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_nvic.h" 1
N//*****************************************************************************
N//
N// hw_nvic.h - Macros used when accessing the NVIC hardware.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_NVIC_H__
N#define __HW_NVIC_H__
N
N//*****************************************************************************
N//
N// The following are defines for the NVIC register addresses.
N//
N//*****************************************************************************
N#define NVIC_ACTLR              0xE000E008  // Auxiliary Control
N#define NVIC_ST_CTRL            0xE000E010  // SysTick Control and Status
N                                            // Register
N#define NVIC_ST_RELOAD          0xE000E014  // SysTick Reload Value Register
N#define NVIC_ST_CURRENT         0xE000E018  // SysTick Current Value Register
N#define NVIC_EN0                0xE000E100  // Interrupt 0-31 Set Enable
N#define NVIC_EN1                0xE000E104  // Interrupt 32-63 Set Enable
N#define NVIC_EN2                0xE000E108  // Interrupt 64-95 Set Enable
N#define NVIC_EN3                0xE000E10C  // Interrupt 96-127 Set Enable
N#define NVIC_EN4                0xE000E110  // Interrupt 128-159 Set Enable
N#define NVIC_DIS0               0xE000E180  // Interrupt 0-31 Clear Enable
N#define NVIC_DIS1               0xE000E184  // Interrupt 32-63 Clear Enable
N#define NVIC_DIS2               0xE000E188  // Interrupt 64-95 Clear Enable
N#define NVIC_DIS3               0xE000E18C  // Interrupt 96-127 Clear Enable
N#define NVIC_DIS4               0xE000E190  // Interrupt 128-159 Clear Enable
N#define NVIC_PEND0              0xE000E200  // Interrupt 0-31 Set Pending
N#define NVIC_PEND1              0xE000E204  // Interrupt 32-63 Set Pending
N#define NVIC_PEND2              0xE000E208  // Interrupt 64-95 Set Pending
N#define NVIC_PEND3              0xE000E20C  // Interrupt 96-127 Set Pending
N#define NVIC_PEND4              0xE000E210  // Interrupt 128-159 Set Pending
N#define NVIC_UNPEND0            0xE000E280  // Interrupt 0-31 Clear Pending
N#define NVIC_UNPEND1            0xE000E284  // Interrupt 32-63 Clear Pending
N#define NVIC_UNPEND2            0xE000E288  // Interrupt 64-95 Clear Pending
N#define NVIC_UNPEND3            0xE000E28C  // Interrupt 96-127 Clear Pending
N#define NVIC_UNPEND4            0xE000E290  // Interrupt 128-159 Clear Pending
N#define NVIC_ACTIVE0            0xE000E300  // Interrupt 0-31 Active Bit
N#define NVIC_ACTIVE1            0xE000E304  // Interrupt 32-63 Active Bit
N#define NVIC_ACTIVE2            0xE000E308  // Interrupt 64-95 Active Bit
N#define NVIC_ACTIVE3            0xE000E30C  // Interrupt 96-127 Active Bit
N#define NVIC_ACTIVE4            0xE000E310  // Interrupt 128-159 Active Bit
N#define NVIC_PRI0               0xE000E400  // Interrupt 0-3 Priority
N#define NVIC_PRI1               0xE000E404  // Interrupt 4-7 Priority
N#define NVIC_PRI2               0xE000E408  // Interrupt 8-11 Priority
N#define NVIC_PRI3               0xE000E40C  // Interrupt 12-15 Priority
N#define NVIC_PRI4               0xE000E410  // Interrupt 16-19 Priority
N#define NVIC_PRI5               0xE000E414  // Interrupt 20-23 Priority
N#define NVIC_PRI6               0xE000E418  // Interrupt 24-27 Priority
N#define NVIC_PRI7               0xE000E41C  // Interrupt 28-31 Priority
N#define NVIC_PRI8               0xE000E420  // Interrupt 32-35 Priority
N#define NVIC_PRI9               0xE000E424  // Interrupt 36-39 Priority
N#define NVIC_PRI10              0xE000E428  // Interrupt 40-43 Priority
N#define NVIC_PRI11              0xE000E42C  // Interrupt 44-47 Priority
N#define NVIC_PRI12              0xE000E430  // Interrupt 48-51 Priority
N#define NVIC_PRI13              0xE000E434  // Interrupt 52-55 Priority
N#define NVIC_PRI14              0xE000E438  // Interrupt 56-59 Priority
N#define NVIC_PRI15              0xE000E43C  // Interrupt 60-63 Priority
N#define NVIC_PRI16              0xE000E440  // Interrupt 64-67 Priority
N#define NVIC_PRI17              0xE000E444  // Interrupt 68-71 Priority
N#define NVIC_PRI18              0xE000E448  // Interrupt 72-75 Priority
N#define NVIC_PRI19              0xE000E44C  // Interrupt 76-79 Priority
N#define NVIC_PRI20              0xE000E450  // Interrupt 80-83 Priority
N#define NVIC_PRI21              0xE000E454  // Interrupt 84-87 Priority
N#define NVIC_PRI22              0xE000E458  // Interrupt 88-91 Priority
N#define NVIC_PRI23              0xE000E45C  // Interrupt 92-95 Priority
N#define NVIC_PRI24              0xE000E460  // Interrupt 96-99 Priority
N#define NVIC_PRI25              0xE000E464  // Interrupt 100-103 Priority
N#define NVIC_PRI26              0xE000E468  // Interrupt 104-107 Priority
N#define NVIC_PRI27              0xE000E46C  // Interrupt 108-111 Priority
N#define NVIC_PRI28              0xE000E470  // Interrupt 112-115 Priority
N#define NVIC_PRI29              0xE000E474  // Interrupt 116-119 Priority
N#define NVIC_PRI30              0xE000E478  // Interrupt 120-123 Priority
N#define NVIC_PRI31              0xE000E47C  // Interrupt 124-127 Priority
N#define NVIC_PRI32              0xE000E480  // Interrupt 128-131 Priority
N#define NVIC_PRI33              0xE000E484  // Interrupt 132-135 Priority
N#define NVIC_PRI34              0xE000E488  // Interrupt 136-139 Priority
N#define NVIC_CPUID              0xE000ED00  // CPU ID Base
N#define NVIC_INT_CTRL           0xE000ED04  // Interrupt Control and State
N#define NVIC_VTABLE             0xE000ED08  // Vector Table Offset
N#define NVIC_APINT              0xE000ED0C  // Application Interrupt and Reset
N                                            // Control
N#define NVIC_SYS_CTRL           0xE000ED10  // System Control
N#define NVIC_CFG_CTRL           0xE000ED14  // Configuration and Control
N#define NVIC_SYS_PRI1           0xE000ED18  // System Handler Priority 1
N#define NVIC_SYS_PRI2           0xE000ED1C  // System Handler Priority 2
N#define NVIC_SYS_PRI3           0xE000ED20  // System Handler Priority 3
N#define NVIC_SYS_HND_CTRL       0xE000ED24  // System Handler Control and State
N#define NVIC_FAULT_STAT         0xE000ED28  // Configurable Fault Status
N#define NVIC_HFAULT_STAT        0xE000ED2C  // Hard Fault Status
N#define NVIC_DEBUG_STAT         0xE000ED30  // Debug Status Register
N#define NVIC_MM_ADDR            0xE000ED34  // Memory Management Fault Address
N#define NVIC_FAULT_ADDR         0xE000ED38  // Bus Fault Address
N#define NVIC_CPAC               0xE000ED88  // Coprocessor Access Control
N#define NVIC_MPU_TYPE           0xE000ED90  // MPU Type
N#define NVIC_MPU_CTRL           0xE000ED94  // MPU Control
N#define NVIC_MPU_NUMBER         0xE000ED98  // MPU Region Number
N#define NVIC_MPU_BASE           0xE000ED9C  // MPU Region Base Address
N#define NVIC_MPU_ATTR           0xE000EDA0  // MPU Region Attribute and Size
N#define NVIC_MPU_BASE1          0xE000EDA4  // MPU Region Base Address Alias 1
N#define NVIC_MPU_ATTR1          0xE000EDA8  // MPU Region Attribute and Size
N                                            // Alias 1
N#define NVIC_MPU_BASE2          0xE000EDAC  // MPU Region Base Address Alias 2
N#define NVIC_MPU_ATTR2          0xE000EDB0  // MPU Region Attribute and Size
N                                            // Alias 2
N#define NVIC_MPU_BASE3          0xE000EDB4  // MPU Region Base Address Alias 3
N#define NVIC_MPU_ATTR3          0xE000EDB8  // MPU Region Attribute and Size
N                                            // Alias 3
N#define NVIC_DBG_CTRL           0xE000EDF0  // Debug Control and Status Reg
N#define NVIC_DBG_XFER           0xE000EDF4  // Debug Core Reg. Transfer Select
N#define NVIC_DBG_DATA           0xE000EDF8  // Debug Core Register Data
N#define NVIC_DBG_INT            0xE000EDFC  // Debug Reset Interrupt Control
N#define NVIC_SW_TRIG            0xE000EF00  // Software Trigger Interrupt
N#define NVIC_FPCC               0xE000EF34  // Floating-Point Context Control
N#define NVIC_FPCA               0xE000EF38  // Floating-Point Context Address
N#define NVIC_FPDSC              0xE000EF3C  // Floating-Point Default Status
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTLR register.
N//
N//*****************************************************************************
N#define NVIC_ACTLR_DISOOFP      0x00000200  // Disable Out-Of-Order Floating
N                                            // Point
N#define NVIC_ACTLR_DISFPCA      0x00000100  // Disable CONTROL
N#define NVIC_ACTLR_DISFOLD      0x00000004  // Disable IT Folding
N#define NVIC_ACTLR_DISWBUF      0x00000002  // Disable Write Buffer
N#define NVIC_ACTLR_DISMCYC      0x00000001  // Disable Interrupts of Multiple
N                                            // Cycle Instructions
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ST_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_ST_CTRL_COUNT      0x00010000  // Count Flag
N#define NVIC_ST_CTRL_CLK_SRC    0x00000004  // Clock Source
N#define NVIC_ST_CTRL_INTEN      0x00000002  // Interrupt Enable
N#define NVIC_ST_CTRL_ENABLE     0x00000001  // Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ST_RELOAD register.
N//
N//*****************************************************************************
N#define NVIC_ST_RELOAD_M        0x00FFFFFF  // Reload Value
N#define NVIC_ST_RELOAD_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ST_CURRENT
N// register.
N//
N//*****************************************************************************
N#define NVIC_ST_CURRENT_M       0x00FFFFFF  // Current Value
N#define NVIC_ST_CURRENT_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_EN0 register.
N//
N//*****************************************************************************
N#define NVIC_EN0_INT_M          0xFFFFFFFF  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_EN1 register.
N//
N//*****************************************************************************
N#define NVIC_EN1_INT_M          0xFFFFFFFF  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_EN2 register.
N//
N//*****************************************************************************
N#define NVIC_EN2_INT_M          0xFFFFFFFF  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_EN3 register.
N//
N//*****************************************************************************
N#define NVIC_EN3_INT_M          0xFFFFFFFF  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_EN4 register.
N//
N//*****************************************************************************
N#define NVIC_EN4_INT_M          0x000007FF  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DIS0 register.
N//
N//*****************************************************************************
N#define NVIC_DIS0_INT_M         0xFFFFFFFF  // Interrupt Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DIS1 register.
N//
N//*****************************************************************************
N#define NVIC_DIS1_INT_M         0xFFFFFFFF  // Interrupt Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DIS2 register.
N//
N//*****************************************************************************
N#define NVIC_DIS2_INT_M         0xFFFFFFFF  // Interrupt Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DIS3 register.
N//
N//*****************************************************************************
N#define NVIC_DIS3_INT_M         0xFFFFFFFF  // Interrupt Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DIS4 register.
N//
N//*****************************************************************************
N#define NVIC_DIS4_INT_M         0x000007FF  // Interrupt Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PEND0 register.
N//
N//*****************************************************************************
N#define NVIC_PEND0_INT_M        0xFFFFFFFF  // Interrupt Set Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PEND1 register.
N//
N//*****************************************************************************
N#define NVIC_PEND1_INT_M        0xFFFFFFFF  // Interrupt Set Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PEND2 register.
N//
N//*****************************************************************************
N#define NVIC_PEND2_INT_M        0xFFFFFFFF  // Interrupt Set Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PEND3 register.
N//
N//*****************************************************************************
N#define NVIC_PEND3_INT_M        0xFFFFFFFF  // Interrupt Set Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PEND4 register.
N//
N//*****************************************************************************
N#define NVIC_PEND4_INT_M        0x000007FF  // Interrupt Set Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_UNPEND0 register.
N//
N//*****************************************************************************
N#define NVIC_UNPEND0_INT_M      0xFFFFFFFF  // Interrupt Clear Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_UNPEND1 register.
N//
N//*****************************************************************************
N#define NVIC_UNPEND1_INT_M      0xFFFFFFFF  // Interrupt Clear Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_UNPEND2 register.
N//
N//*****************************************************************************
N#define NVIC_UNPEND2_INT_M      0xFFFFFFFF  // Interrupt Clear Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_UNPEND3 register.
N//
N//*****************************************************************************
N#define NVIC_UNPEND3_INT_M      0xFFFFFFFF  // Interrupt Clear Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_UNPEND4 register.
N//
N//*****************************************************************************
N#define NVIC_UNPEND4_INT_M      0x000007FF  // Interrupt Clear Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTIVE0 register.
N//
N//*****************************************************************************
N#define NVIC_ACTIVE0_INT_M      0xFFFFFFFF  // Interrupt Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTIVE1 register.
N//
N//*****************************************************************************
N#define NVIC_ACTIVE1_INT_M      0xFFFFFFFF  // Interrupt Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTIVE2 register.
N//
N//*****************************************************************************
N#define NVIC_ACTIVE2_INT_M      0xFFFFFFFF  // Interrupt Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTIVE3 register.
N//
N//*****************************************************************************
N#define NVIC_ACTIVE3_INT_M      0xFFFFFFFF  // Interrupt Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTIVE4 register.
N//
N//*****************************************************************************
N#define NVIC_ACTIVE4_INT_M      0x000007FF  // Interrupt Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI0 register.
N//
N//*****************************************************************************
N#define NVIC_PRI0_INT3_M        0xE0000000  // Interrupt 3 Priority Mask
N#define NVIC_PRI0_INT2_M        0x00E00000  // Interrupt 2 Priority Mask
N#define NVIC_PRI0_INT1_M        0x0000E000  // Interrupt 1 Priority Mask
N#define NVIC_PRI0_INT0_M        0x000000E0  // Interrupt 0 Priority Mask
N#define NVIC_PRI0_INT3_S        29
N#define NVIC_PRI0_INT2_S        21
N#define NVIC_PRI0_INT1_S        13
N#define NVIC_PRI0_INT0_S        5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI1 register.
N//
N//*****************************************************************************
N#define NVIC_PRI1_INT7_M        0xE0000000  // Interrupt 7 Priority Mask
N#define NVIC_PRI1_INT6_M        0x00E00000  // Interrupt 6 Priority Mask
N#define NVIC_PRI1_INT5_M        0x0000E000  // Interrupt 5 Priority Mask
N#define NVIC_PRI1_INT4_M        0x000000E0  // Interrupt 4 Priority Mask
N#define NVIC_PRI1_INT7_S        29
N#define NVIC_PRI1_INT6_S        21
N#define NVIC_PRI1_INT5_S        13
N#define NVIC_PRI1_INT4_S        5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI2 register.
N//
N//*****************************************************************************
N#define NVIC_PRI2_INT11_M       0xE0000000  // Interrupt 11 Priority Mask
N#define NVIC_PRI2_INT10_M       0x00E00000  // Interrupt 10 Priority Mask
N#define NVIC_PRI2_INT9_M        0x0000E000  // Interrupt 9 Priority Mask
N#define NVIC_PRI2_INT8_M        0x000000E0  // Interrupt 8 Priority Mask
N#define NVIC_PRI2_INT11_S       29
N#define NVIC_PRI2_INT10_S       21
N#define NVIC_PRI2_INT9_S        13
N#define NVIC_PRI2_INT8_S        5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI3 register.
N//
N//*****************************************************************************
N#define NVIC_PRI3_INT15_M       0xE0000000  // Interrupt 15 Priority Mask
N#define NVIC_PRI3_INT14_M       0x00E00000  // Interrupt 14 Priority Mask
N#define NVIC_PRI3_INT13_M       0x0000E000  // Interrupt 13 Priority Mask
N#define NVIC_PRI3_INT12_M       0x000000E0  // Interrupt 12 Priority Mask
N#define NVIC_PRI3_INT15_S       29
N#define NVIC_PRI3_INT14_S       21
N#define NVIC_PRI3_INT13_S       13
N#define NVIC_PRI3_INT12_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI4 register.
N//
N//*****************************************************************************
N#define NVIC_PRI4_INT19_M       0xE0000000  // Interrupt 19 Priority Mask
N#define NVIC_PRI4_INT18_M       0x00E00000  // Interrupt 18 Priority Mask
N#define NVIC_PRI4_INT17_M       0x0000E000  // Interrupt 17 Priority Mask
N#define NVIC_PRI4_INT16_M       0x000000E0  // Interrupt 16 Priority Mask
N#define NVIC_PRI4_INT19_S       29
N#define NVIC_PRI4_INT18_S       21
N#define NVIC_PRI4_INT17_S       13
N#define NVIC_PRI4_INT16_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI5 register.
N//
N//*****************************************************************************
N#define NVIC_PRI5_INT23_M       0xE0000000  // Interrupt 23 Priority Mask
N#define NVIC_PRI5_INT22_M       0x00E00000  // Interrupt 22 Priority Mask
N#define NVIC_PRI5_INT21_M       0x0000E000  // Interrupt 21 Priority Mask
N#define NVIC_PRI5_INT20_M       0x000000E0  // Interrupt 20 Priority Mask
N#define NVIC_PRI5_INT23_S       29
N#define NVIC_PRI5_INT22_S       21
N#define NVIC_PRI5_INT21_S       13
N#define NVIC_PRI5_INT20_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI6 register.
N//
N//*****************************************************************************
N#define NVIC_PRI6_INT27_M       0xE0000000  // Interrupt 27 Priority Mask
N#define NVIC_PRI6_INT26_M       0x00E00000  // Interrupt 26 Priority Mask
N#define NVIC_PRI6_INT25_M       0x0000E000  // Interrupt 25 Priority Mask
N#define NVIC_PRI6_INT24_M       0x000000E0  // Interrupt 24 Priority Mask
N#define NVIC_PRI6_INT27_S       29
N#define NVIC_PRI6_INT26_S       21
N#define NVIC_PRI6_INT25_S       13
N#define NVIC_PRI6_INT24_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI7 register.
N//
N//*****************************************************************************
N#define NVIC_PRI7_INT31_M       0xE0000000  // Interrupt 31 Priority Mask
N#define NVIC_PRI7_INT30_M       0x00E00000  // Interrupt 30 Priority Mask
N#define NVIC_PRI7_INT29_M       0x0000E000  // Interrupt 29 Priority Mask
N#define NVIC_PRI7_INT28_M       0x000000E0  // Interrupt 28 Priority Mask
N#define NVIC_PRI7_INT31_S       29
N#define NVIC_PRI7_INT30_S       21
N#define NVIC_PRI7_INT29_S       13
N#define NVIC_PRI7_INT28_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI8 register.
N//
N//*****************************************************************************
N#define NVIC_PRI8_INT35_M       0xE0000000  // Interrupt 35 Priority Mask
N#define NVIC_PRI8_INT34_M       0x00E00000  // Interrupt 34 Priority Mask
N#define NVIC_PRI8_INT33_M       0x0000E000  // Interrupt 33 Priority Mask
N#define NVIC_PRI8_INT32_M       0x000000E0  // Interrupt 32 Priority Mask
N#define NVIC_PRI8_INT35_S       29
N#define NVIC_PRI8_INT34_S       21
N#define NVIC_PRI8_INT33_S       13
N#define NVIC_PRI8_INT32_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI9 register.
N//
N//*****************************************************************************
N#define NVIC_PRI9_INT39_M       0xE0000000  // Interrupt 39 Priority Mask
N#define NVIC_PRI9_INT38_M       0x00E00000  // Interrupt 38 Priority Mask
N#define NVIC_PRI9_INT37_M       0x0000E000  // Interrupt 37 Priority Mask
N#define NVIC_PRI9_INT36_M       0x000000E0  // Interrupt 36 Priority Mask
N#define NVIC_PRI9_INT39_S       29
N#define NVIC_PRI9_INT38_S       21
N#define NVIC_PRI9_INT37_S       13
N#define NVIC_PRI9_INT36_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI10 register.
N//
N//*****************************************************************************
N#define NVIC_PRI10_INT43_M      0xE0000000  // Interrupt 43 Priority Mask
N#define NVIC_PRI10_INT42_M      0x00E00000  // Interrupt 42 Priority Mask
N#define NVIC_PRI10_INT41_M      0x0000E000  // Interrupt 41 Priority Mask
N#define NVIC_PRI10_INT40_M      0x000000E0  // Interrupt 40 Priority Mask
N#define NVIC_PRI10_INT43_S      29
N#define NVIC_PRI10_INT42_S      21
N#define NVIC_PRI10_INT41_S      13
N#define NVIC_PRI10_INT40_S      5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI11 register.
N//
N//*****************************************************************************
N#define NVIC_PRI11_INT47_M      0xE0000000  // Interrupt 47 Priority Mask
N#define NVIC_PRI11_INT46_M      0x00E00000  // Interrupt 46 Priority Mask
N#define NVIC_PRI11_INT45_M      0x0000E000  // Interrupt 45 Priority Mask
N#define NVIC_PRI11_INT44_M      0x000000E0  // Interrupt 44 Priority Mask
N#define NVIC_PRI11_INT47_S      29
N#define NVIC_PRI11_INT46_S      21
N#define NVIC_PRI11_INT45_S      13
N#define NVIC_PRI11_INT44_S      5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI12 register.
N//
N//*****************************************************************************
N#define NVIC_PRI12_INT51_M      0xE0000000  // Interrupt 51 Priority Mask
N#define NVIC_PRI12_INT50_M      0x00E00000  // Interrupt 50 Priority Mask
N#define NVIC_PRI12_INT49_M      0x0000E000  // Interrupt 49 Priority Mask
N#define NVIC_PRI12_INT48_M      0x000000E0  // Interrupt 48 Priority Mask
N#define NVIC_PRI12_INT51_S      29
N#define NVIC_PRI12_INT50_S      21
N#define NVIC_PRI12_INT49_S      13
N#define NVIC_PRI12_INT48_S      5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI13 register.
N//
N//*****************************************************************************
N#define NVIC_PRI13_INT55_M      0xE0000000  // Interrupt 55 Priority Mask
N#define NVIC_PRI13_INT54_M      0x00E00000  // Interrupt 54 Priority Mask
N#define NVIC_PRI13_INT53_M      0x0000E000  // Interrupt 53 Priority Mask
N#define NVIC_PRI13_INT52_M      0x000000E0  // Interrupt 52 Priority Mask
N#define NVIC_PRI13_INT55_S      29
N#define NVIC_PRI13_INT54_S      21
N#define NVIC_PRI13_INT53_S      13
N#define NVIC_PRI13_INT52_S      5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI14 register.
N//
N//*****************************************************************************
N#define NVIC_PRI14_INTD_M       0xE0000000  // Interrupt 59 Priority Mask
N#define NVIC_PRI14_INTC_M       0x00E00000  // Interrupt 58 Priority Mask
N#define NVIC_PRI14_INTB_M       0x0000E000  // Interrupt 57 Priority Mask
N#define NVIC_PRI14_INTA_M       0x000000E0  // Interrupt 56 Priority Mask
N#define NVIC_PRI14_INTD_S       29
N#define NVIC_PRI14_INTC_S       21
N#define NVIC_PRI14_INTB_S       13
N#define NVIC_PRI14_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI15 register.
N//
N//*****************************************************************************
N#define NVIC_PRI15_INTD_M       0xE0000000  // Interrupt 63 Priority Mask
N#define NVIC_PRI15_INTC_M       0x00E00000  // Interrupt 62 Priority Mask
N#define NVIC_PRI15_INTB_M       0x0000E000  // Interrupt 61 Priority Mask
N#define NVIC_PRI15_INTA_M       0x000000E0  // Interrupt 60 Priority Mask
N#define NVIC_PRI15_INTD_S       29
N#define NVIC_PRI15_INTC_S       21
N#define NVIC_PRI15_INTB_S       13
N#define NVIC_PRI15_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI16 register.
N//
N//*****************************************************************************
N#define NVIC_PRI16_INTD_M       0xE0000000  // Interrupt 67 Priority Mask
N#define NVIC_PRI16_INTC_M       0x00E00000  // Interrupt 66 Priority Mask
N#define NVIC_PRI16_INTB_M       0x0000E000  // Interrupt 65 Priority Mask
N#define NVIC_PRI16_INTA_M       0x000000E0  // Interrupt 64 Priority Mask
N#define NVIC_PRI16_INTD_S       29
N#define NVIC_PRI16_INTC_S       21
N#define NVIC_PRI16_INTB_S       13
N#define NVIC_PRI16_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI17 register.
N//
N//*****************************************************************************
N#define NVIC_PRI17_INTD_M       0xE0000000  // Interrupt 71 Priority Mask
N#define NVIC_PRI17_INTC_M       0x00E00000  // Interrupt 70 Priority Mask
N#define NVIC_PRI17_INTB_M       0x0000E000  // Interrupt 69 Priority Mask
N#define NVIC_PRI17_INTA_M       0x000000E0  // Interrupt 68 Priority Mask
N#define NVIC_PRI17_INTD_S       29
N#define NVIC_PRI17_INTC_S       21
N#define NVIC_PRI17_INTB_S       13
N#define NVIC_PRI17_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI18 register.
N//
N//*****************************************************************************
N#define NVIC_PRI18_INTD_M       0xE0000000  // Interrupt 75 Priority Mask
N#define NVIC_PRI18_INTC_M       0x00E00000  // Interrupt 74 Priority Mask
N#define NVIC_PRI18_INTB_M       0x0000E000  // Interrupt 73 Priority Mask
N#define NVIC_PRI18_INTA_M       0x000000E0  // Interrupt 72 Priority Mask
N#define NVIC_PRI18_INTD_S       29
N#define NVIC_PRI18_INTC_S       21
N#define NVIC_PRI18_INTB_S       13
N#define NVIC_PRI18_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI19 register.
N//
N//*****************************************************************************
N#define NVIC_PRI19_INTD_M       0xE0000000  // Interrupt 79 Priority Mask
N#define NVIC_PRI19_INTC_M       0x00E00000  // Interrupt 78 Priority Mask
N#define NVIC_PRI19_INTB_M       0x0000E000  // Interrupt 77 Priority Mask
N#define NVIC_PRI19_INTA_M       0x000000E0  // Interrupt 76 Priority Mask
N#define NVIC_PRI19_INTD_S       29
N#define NVIC_PRI19_INTC_S       21
N#define NVIC_PRI19_INTB_S       13
N#define NVIC_PRI19_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI20 register.
N//
N//*****************************************************************************
N#define NVIC_PRI20_INTD_M       0xE0000000  // Interrupt 83 Priority Mask
N#define NVIC_PRI20_INTC_M       0x00E00000  // Interrupt 82 Priority Mask
N#define NVIC_PRI20_INTB_M       0x0000E000  // Interrupt 81 Priority Mask
N#define NVIC_PRI20_INTA_M       0x000000E0  // Interrupt 80 Priority Mask
N#define NVIC_PRI20_INTD_S       29
N#define NVIC_PRI20_INTC_S       21
N#define NVIC_PRI20_INTB_S       13
N#define NVIC_PRI20_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI21 register.
N//
N//*****************************************************************************
N#define NVIC_PRI21_INTD_M       0xE0000000  // Interrupt 87 Priority Mask
N#define NVIC_PRI21_INTC_M       0x00E00000  // Interrupt 86 Priority Mask
N#define NVIC_PRI21_INTB_M       0x0000E000  // Interrupt 85 Priority Mask
N#define NVIC_PRI21_INTA_M       0x000000E0  // Interrupt 84 Priority Mask
N#define NVIC_PRI21_INTD_S       29
N#define NVIC_PRI21_INTC_S       21
N#define NVIC_PRI21_INTB_S       13
N#define NVIC_PRI21_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI22 register.
N//
N//*****************************************************************************
N#define NVIC_PRI22_INTD_M       0xE0000000  // Interrupt 91 Priority Mask
N#define NVIC_PRI22_INTC_M       0x00E00000  // Interrupt 90 Priority Mask
N#define NVIC_PRI22_INTB_M       0x0000E000  // Interrupt 89 Priority Mask
N#define NVIC_PRI22_INTA_M       0x000000E0  // Interrupt 88 Priority Mask
N#define NVIC_PRI22_INTD_S       29
N#define NVIC_PRI22_INTC_S       21
N#define NVIC_PRI22_INTB_S       13
N#define NVIC_PRI22_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI23 register.
N//
N//*****************************************************************************
N#define NVIC_PRI23_INTD_M       0xE0000000  // Interrupt 95 Priority Mask
N#define NVIC_PRI23_INTC_M       0x00E00000  // Interrupt 94 Priority Mask
N#define NVIC_PRI23_INTB_M       0x0000E000  // Interrupt 93 Priority Mask
N#define NVIC_PRI23_INTA_M       0x000000E0  // Interrupt 92 Priority Mask
N#define NVIC_PRI23_INTD_S       29
N#define NVIC_PRI23_INTC_S       21
N#define NVIC_PRI23_INTB_S       13
N#define NVIC_PRI23_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI24 register.
N//
N//*****************************************************************************
N#define NVIC_PRI24_INTD_M       0xE0000000  // Interrupt 99 Priority Mask
N#define NVIC_PRI24_INTC_M       0x00E00000  // Interrupt 98 Priority Mask
N#define NVIC_PRI24_INTB_M       0x0000E000  // Interrupt 97 Priority Mask
N#define NVIC_PRI24_INTA_M       0x000000E0  // Interrupt 96 Priority Mask
N#define NVIC_PRI24_INTD_S       29
N#define NVIC_PRI24_INTC_S       21
N#define NVIC_PRI24_INTB_S       13
N#define NVIC_PRI24_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI25 register.
N//
N//*****************************************************************************
N#define NVIC_PRI25_INTD_M       0xE0000000  // Interrupt 103 Priority Mask
N#define NVIC_PRI25_INTC_M       0x00E00000  // Interrupt 102 Priority Mask
N#define NVIC_PRI25_INTB_M       0x0000E000  // Interrupt 101 Priority Mask
N#define NVIC_PRI25_INTA_M       0x000000E0  // Interrupt 100 Priority Mask
N#define NVIC_PRI25_INTD_S       29
N#define NVIC_PRI25_INTC_S       21
N#define NVIC_PRI25_INTB_S       13
N#define NVIC_PRI25_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI26 register.
N//
N//*****************************************************************************
N#define NVIC_PRI26_INTD_M       0xE0000000  // Interrupt 107 Priority Mask
N#define NVIC_PRI26_INTC_M       0x00E00000  // Interrupt 106 Priority Mask
N#define NVIC_PRI26_INTB_M       0x0000E000  // Interrupt 105 Priority Mask
N#define NVIC_PRI26_INTA_M       0x000000E0  // Interrupt 104 Priority Mask
N#define NVIC_PRI26_INTD_S       29
N#define NVIC_PRI26_INTC_S       21
N#define NVIC_PRI26_INTB_S       13
N#define NVIC_PRI26_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI27 register.
N//
N//*****************************************************************************
N#define NVIC_PRI27_INTD_M       0xE0000000  // Interrupt 111 Priority Mask
N#define NVIC_PRI27_INTC_M       0x00E00000  // Interrupt 110 Priority Mask
N#define NVIC_PRI27_INTB_M       0x0000E000  // Interrupt 109 Priority Mask
N#define NVIC_PRI27_INTA_M       0x000000E0  // Interrupt 108 Priority Mask
N#define NVIC_PRI27_INTD_S       29
N#define NVIC_PRI27_INTC_S       21
N#define NVIC_PRI27_INTB_S       13
N#define NVIC_PRI27_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI28 register.
N//
N//*****************************************************************************
N#define NVIC_PRI28_INTD_M       0xE0000000  // Interrupt 115 Priority Mask
N#define NVIC_PRI28_INTC_M       0x00E00000  // Interrupt 114 Priority Mask
N#define NVIC_PRI28_INTB_M       0x0000E000  // Interrupt 113 Priority Mask
N#define NVIC_PRI28_INTA_M       0x000000E0  // Interrupt 112 Priority Mask
N#define NVIC_PRI28_INTD_S       29
N#define NVIC_PRI28_INTC_S       21
N#define NVIC_PRI28_INTB_S       13
N#define NVIC_PRI28_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI29 register.
N//
N//*****************************************************************************
N#define NVIC_PRI29_INTD_M       0xE0000000  // Interrupt 119 Priority Mask
N#define NVIC_PRI29_INTC_M       0x00E00000  // Interrupt 118 Priority Mask
N#define NVIC_PRI29_INTB_M       0x0000E000  // Interrupt 117 Priority Mask
N#define NVIC_PRI29_INTA_M       0x000000E0  // Interrupt 116 Priority Mask
N#define NVIC_PRI29_INTD_S       29
N#define NVIC_PRI29_INTC_S       21
N#define NVIC_PRI29_INTB_S       13
N#define NVIC_PRI29_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI30 register.
N//
N//*****************************************************************************
N#define NVIC_PRI30_INTD_M       0xE0000000  // Interrupt 123 Priority Mask
N#define NVIC_PRI30_INTC_M       0x00E00000  // Interrupt 122 Priority Mask
N#define NVIC_PRI30_INTB_M       0x0000E000  // Interrupt 121 Priority Mask
N#define NVIC_PRI30_INTA_M       0x000000E0  // Interrupt 120 Priority Mask
N#define NVIC_PRI30_INTD_S       29
N#define NVIC_PRI30_INTC_S       21
N#define NVIC_PRI30_INTB_S       13
N#define NVIC_PRI30_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI31 register.
N//
N//*****************************************************************************
N#define NVIC_PRI31_INTD_M       0xE0000000  // Interrupt 127 Priority Mask
N#define NVIC_PRI31_INTC_M       0x00E00000  // Interrupt 126 Priority Mask
N#define NVIC_PRI31_INTB_M       0x0000E000  // Interrupt 125 Priority Mask
N#define NVIC_PRI31_INTA_M       0x000000E0  // Interrupt 124 Priority Mask
N#define NVIC_PRI31_INTD_S       29
N#define NVIC_PRI31_INTC_S       21
N#define NVIC_PRI31_INTB_S       13
N#define NVIC_PRI31_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI32 register.
N//
N//*****************************************************************************
N#define NVIC_PRI32_INTD_M       0xE0000000  // Interrupt 131 Priority Mask
N#define NVIC_PRI32_INTC_M       0x00E00000  // Interrupt 130 Priority Mask
N#define NVIC_PRI32_INTB_M       0x0000E000  // Interrupt 129 Priority Mask
N#define NVIC_PRI32_INTA_M       0x000000E0  // Interrupt 128 Priority Mask
N#define NVIC_PRI32_INTD_S       29
N#define NVIC_PRI32_INTC_S       21
N#define NVIC_PRI32_INTB_S       13
N#define NVIC_PRI32_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI33 register.
N//
N//*****************************************************************************
N#define NVIC_PRI33_INTD_M       0xE0000000  // Interrupt Priority for Interrupt
N                                            // [4n+3]
N#define NVIC_PRI33_INTC_M       0x00E00000  // Interrupt Priority for Interrupt
N                                            // [4n+2]
N#define NVIC_PRI33_INTB_M       0x0000E000  // Interrupt Priority for Interrupt
N                                            // [4n+1]
N#define NVIC_PRI33_INTA_M       0x000000E0  // Interrupt Priority for Interrupt
N                                            // [4n]
N#define NVIC_PRI33_INTD_S       29
N#define NVIC_PRI33_INTC_S       21
N#define NVIC_PRI33_INTB_S       13
N#define NVIC_PRI33_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI34 register.
N//
N//*****************************************************************************
N#define NVIC_PRI34_INTD_M       0xE0000000  // Interrupt Priority for Interrupt
N                                            // [4n+3]
N#define NVIC_PRI34_INTC_M       0x00E00000  // Interrupt Priority for Interrupt
N                                            // [4n+2]
N#define NVIC_PRI34_INTB_M       0x0000E000  // Interrupt Priority for Interrupt
N                                            // [4n+1]
N#define NVIC_PRI34_INTA_M       0x000000E0  // Interrupt Priority for Interrupt
N                                            // [4n]
N#define NVIC_PRI34_INTD_S       29
N#define NVIC_PRI34_INTC_S       21
N#define NVIC_PRI34_INTB_S       13
N#define NVIC_PRI34_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_CPUID register.
N//
N//*****************************************************************************
N#define NVIC_CPUID_IMP_M        0xFF000000  // Implementer Code
N#define NVIC_CPUID_IMP_ARM      0x41000000  // ARM
N#define NVIC_CPUID_VAR_M        0x00F00000  // Variant Number
N#define NVIC_CPUID_CON_M        0x000F0000  // Constant
N#define NVIC_CPUID_PARTNO_M     0x0000FFF0  // Part Number
N#define NVIC_CPUID_PARTNO_CM4   0x0000C240  // Cortex-M4 processor
N#define NVIC_CPUID_REV_M        0x0000000F  // Revision Number
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_INT_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_INT_CTRL_NMI_SET   0x80000000  // NMI Set Pending
N#define NVIC_INT_CTRL_PEND_SV   0x10000000  // PendSV Set Pending
N#define NVIC_INT_CTRL_UNPEND_SV 0x08000000  // PendSV Clear Pending
N#define NVIC_INT_CTRL_PENDSTSET 0x04000000  // SysTick Set Pending
N#define NVIC_INT_CTRL_PENDSTCLR 0x02000000  // SysTick Clear Pending
N#define NVIC_INT_CTRL_ISR_PRE   0x00800000  // Debug Interrupt Handling
N#define NVIC_INT_CTRL_ISR_PEND  0x00400000  // Interrupt Pending
N#define NVIC_INT_CTRL_VEC_PEN_M 0x000FF000  // Interrupt Pending Vector Number
N#define NVIC_INT_CTRL_VEC_PEN_NMI                                             \
N                                0x00002000  // NMI
X#define NVIC_INT_CTRL_VEC_PEN_NMI                                                                             0x00002000  
N#define NVIC_INT_CTRL_VEC_PEN_HARD                                            \
N                                0x00003000  // Hard fault
X#define NVIC_INT_CTRL_VEC_PEN_HARD                                                                            0x00003000  
N#define NVIC_INT_CTRL_VEC_PEN_MEM                                             \
N                                0x00004000  // Memory management fault
X#define NVIC_INT_CTRL_VEC_PEN_MEM                                                                             0x00004000  
N#define NVIC_INT_CTRL_VEC_PEN_BUS                                             \
N                                0x00005000  // Bus fault
X#define NVIC_INT_CTRL_VEC_PEN_BUS                                                                             0x00005000  
N#define NVIC_INT_CTRL_VEC_PEN_USG                                             \
N                                0x00006000  // Usage fault
X#define NVIC_INT_CTRL_VEC_PEN_USG                                                                             0x00006000  
N#define NVIC_INT_CTRL_VEC_PEN_SVC                                             \
N                                0x0000B000  // SVCall
X#define NVIC_INT_CTRL_VEC_PEN_SVC                                                                             0x0000B000  
N#define NVIC_INT_CTRL_VEC_PEN_PNDSV                                           \
N                                0x0000E000  // PendSV
X#define NVIC_INT_CTRL_VEC_PEN_PNDSV                                                                           0x0000E000  
N#define NVIC_INT_CTRL_VEC_PEN_TICK                                            \
N                                0x0000F000  // SysTick
X#define NVIC_INT_CTRL_VEC_PEN_TICK                                                                            0x0000F000  
N#define NVIC_INT_CTRL_RET_BASE  0x00000800  // Return to Base
N#define NVIC_INT_CTRL_VEC_ACT_M 0x000000FF  // Interrupt Pending Vector Number
N#define NVIC_INT_CTRL_VEC_ACT_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_VTABLE register.
N//
N//*****************************************************************************
N#define NVIC_VTABLE_OFFSET_M    0xFFFFFC00  // Vector Table Offset
N#define NVIC_VTABLE_OFFSET_S    10
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_APINT register.
N//
N//*****************************************************************************
N#define NVIC_APINT_VECTKEY_M    0xFFFF0000  // Register Key
N#define NVIC_APINT_VECTKEY      0x05FA0000  // Vector key
N#define NVIC_APINT_ENDIANESS    0x00008000  // Data Endianess
N#define NVIC_APINT_PRIGROUP_M   0x00000700  // Interrupt Priority Grouping
N#define NVIC_APINT_PRIGROUP_7_1 0x00000000  // Priority group 7.1 split
N#define NVIC_APINT_PRIGROUP_6_2 0x00000100  // Priority group 6.2 split
N#define NVIC_APINT_PRIGROUP_5_3 0x00000200  // Priority group 5.3 split
N#define NVIC_APINT_PRIGROUP_4_4 0x00000300  // Priority group 4.4 split
N#define NVIC_APINT_PRIGROUP_3_5 0x00000400  // Priority group 3.5 split
N#define NVIC_APINT_PRIGROUP_2_6 0x00000500  // Priority group 2.6 split
N#define NVIC_APINT_PRIGROUP_1_7 0x00000600  // Priority group 1.7 split
N#define NVIC_APINT_PRIGROUP_0_8 0x00000700  // Priority group 0.8 split
N#define NVIC_APINT_SYSRESETREQ  0x00000004  // System Reset Request
N#define NVIC_APINT_VECT_CLR_ACT 0x00000002  // Clear Active NMI / Fault
N#define NVIC_APINT_VECT_RESET   0x00000001  // System Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SYS_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_SYS_CTRL_SEVONPEND 0x00000010  // Wake Up on Pending
N#define NVIC_SYS_CTRL_SLEEPDEEP 0x00000004  // Deep Sleep Enable
N#define NVIC_SYS_CTRL_SLEEPEXIT 0x00000002  // Sleep on ISR Exit
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_CFG_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_CFG_CTRL_STKALIGN  0x00000200  // Stack Alignment on Exception
N                                            // Entry
N#define NVIC_CFG_CTRL_BFHFNMIGN 0x00000100  // Ignore Bus Fault in NMI and
N                                            // Fault
N#define NVIC_CFG_CTRL_DIV0      0x00000010  // Trap on Divide by 0
N#define NVIC_CFG_CTRL_UNALIGNED 0x00000008  // Trap on Unaligned Access
N#define NVIC_CFG_CTRL_MAIN_PEND 0x00000002  // Allow Main Interrupt Trigger
N#define NVIC_CFG_CTRL_BASE_THR  0x00000001  // Thread State Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SYS_PRI1 register.
N//
N//*****************************************************************************
N#define NVIC_SYS_PRI1_USAGE_M   0x00E00000  // Usage Fault Priority
N#define NVIC_SYS_PRI1_BUS_M     0x0000E000  // Bus Fault Priority
N#define NVIC_SYS_PRI1_MEM_M     0x000000E0  // Memory Management Fault Priority
N#define NVIC_SYS_PRI1_USAGE_S   21
N#define NVIC_SYS_PRI1_BUS_S     13
N#define NVIC_SYS_PRI1_MEM_S     5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SYS_PRI2 register.
N//
N//*****************************************************************************
N#define NVIC_SYS_PRI2_SVC_M     0xE0000000  // SVCall Priority
N#define NVIC_SYS_PRI2_SVC_S     29
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SYS_PRI3 register.
N//
N//*****************************************************************************
N#define NVIC_SYS_PRI3_TICK_M    0xE0000000  // SysTick Exception Priority
N#define NVIC_SYS_PRI3_PENDSV_M  0x00E00000  // PendSV Priority
N#define NVIC_SYS_PRI3_DEBUG_M   0x000000E0  // Debug Priority
N#define NVIC_SYS_PRI3_TICK_S    29
N#define NVIC_SYS_PRI3_PENDSV_S  21
N#define NVIC_SYS_PRI3_DEBUG_S   5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SYS_HND_CTRL
N// register.
N//
N//*****************************************************************************
N#define NVIC_SYS_HND_CTRL_USAGE 0x00040000  // Usage Fault Enable
N#define NVIC_SYS_HND_CTRL_BUS   0x00020000  // Bus Fault Enable
N#define NVIC_SYS_HND_CTRL_MEM   0x00010000  // Memory Management Fault Enable
N#define NVIC_SYS_HND_CTRL_SVC   0x00008000  // SVC Call Pending
N#define NVIC_SYS_HND_CTRL_BUSP  0x00004000  // Bus Fault Pending
N#define NVIC_SYS_HND_CTRL_MEMP  0x00002000  // Memory Management Fault Pending
N#define NVIC_SYS_HND_CTRL_USAGEP                                              \
N                                0x00001000  // Usage Fault Pending
X#define NVIC_SYS_HND_CTRL_USAGEP                                                                              0x00001000  
N#define NVIC_SYS_HND_CTRL_TICK  0x00000800  // SysTick Exception Active
N#define NVIC_SYS_HND_CTRL_PNDSV 0x00000400  // PendSV Exception Active
N#define NVIC_SYS_HND_CTRL_MON   0x00000100  // Debug Monitor Active
N#define NVIC_SYS_HND_CTRL_SVCA  0x00000080  // SVC Call Active
N#define NVIC_SYS_HND_CTRL_USGA  0x00000008  // Usage Fault Active
N#define NVIC_SYS_HND_CTRL_BUSA  0x00000002  // Bus Fault Active
N#define NVIC_SYS_HND_CTRL_MEMA  0x00000001  // Memory Management Fault Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_FAULT_STAT
N// register.
N//
N//*****************************************************************************
N#define NVIC_FAULT_STAT_DIV0    0x02000000  // Divide-by-Zero Usage Fault
N#define NVIC_FAULT_STAT_UNALIGN 0x01000000  // Unaligned Access Usage Fault
N#define NVIC_FAULT_STAT_NOCP    0x00080000  // No Coprocessor Usage Fault
N#define NVIC_FAULT_STAT_INVPC   0x00040000  // Invalid PC Load Usage Fault
N#define NVIC_FAULT_STAT_INVSTAT 0x00020000  // Invalid State Usage Fault
N#define NVIC_FAULT_STAT_UNDEF   0x00010000  // Undefined Instruction Usage
N                                            // Fault
N#define NVIC_FAULT_STAT_BFARV   0x00008000  // Bus Fault Address Register Valid
N#define NVIC_FAULT_STAT_BLSPERR 0x00002000  // Bus Fault on Floating-Point Lazy
N                                            // State Preservation
N#define NVIC_FAULT_STAT_BSTKE   0x00001000  // Stack Bus Fault
N#define NVIC_FAULT_STAT_BUSTKE  0x00000800  // Unstack Bus Fault
N#define NVIC_FAULT_STAT_IMPRE   0x00000400  // Imprecise Data Bus Error
N#define NVIC_FAULT_STAT_PRECISE 0x00000200  // Precise Data Bus Error
N#define NVIC_FAULT_STAT_IBUS    0x00000100  // Instruction Bus Error
N#define NVIC_FAULT_STAT_MMARV   0x00000080  // Memory Management Fault Address
N                                            // Register Valid
N#define NVIC_FAULT_STAT_MLSPERR 0x00000020  // Memory Management Fault on
N                                            // Floating-Point Lazy State
N                                            // Preservation
N#define NVIC_FAULT_STAT_MSTKE   0x00000010  // Stack Access Violation
N#define NVIC_FAULT_STAT_MUSTKE  0x00000008  // Unstack Access Violation
N#define NVIC_FAULT_STAT_DERR    0x00000002  // Data Access Violation
N#define NVIC_FAULT_STAT_IERR    0x00000001  // Instruction Access Violation
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_HFAULT_STAT
N// register.
N//
N//*****************************************************************************
N#define NVIC_HFAULT_STAT_DBG    0x80000000  // Debug Event
N#define NVIC_HFAULT_STAT_FORCED 0x40000000  // Forced Hard Fault
N#define NVIC_HFAULT_STAT_VECT   0x00000002  // Vector Table Read Fault
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DEBUG_STAT
N// register.
N//
N//*****************************************************************************
N#define NVIC_DEBUG_STAT_EXTRNL  0x00000010  // EDBGRQ asserted
N#define NVIC_DEBUG_STAT_VCATCH  0x00000008  // Vector catch
N#define NVIC_DEBUG_STAT_DWTTRAP 0x00000004  // DWT match
N#define NVIC_DEBUG_STAT_BKPT    0x00000002  // Breakpoint instruction
N#define NVIC_DEBUG_STAT_HALTED  0x00000001  // Halt request
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MM_ADDR register.
N//
N//*****************************************************************************
N#define NVIC_MM_ADDR_M          0xFFFFFFFF  // Fault Address
N#define NVIC_MM_ADDR_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_FAULT_ADDR
N// register.
N//
N//*****************************************************************************
N#define NVIC_FAULT_ADDR_M       0xFFFFFFFF  // Fault Address
N#define NVIC_FAULT_ADDR_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_CPAC register.
N//
N//*****************************************************************************
N#define NVIC_CPAC_CP11_M        0x00C00000  // CP11 Coprocessor Access
N                                            // Privilege
N#define NVIC_CPAC_CP11_DIS      0x00000000  // Access Denied
N#define NVIC_CPAC_CP11_PRIV     0x00400000  // Privileged Access Only
N#define NVIC_CPAC_CP11_FULL     0x00C00000  // Full Access
N#define NVIC_CPAC_CP10_M        0x00300000  // CP10 Coprocessor Access
N                                            // Privilege
N#define NVIC_CPAC_CP10_DIS      0x00000000  // Access Denied
N#define NVIC_CPAC_CP10_PRIV     0x00100000  // Privileged Access Only
N#define NVIC_CPAC_CP10_FULL     0x00300000  // Full Access
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_TYPE register.
N//
N//*****************************************************************************
N#define NVIC_MPU_TYPE_IREGION_M 0x00FF0000  // Number of I Regions
N#define NVIC_MPU_TYPE_DREGION_M 0x0000FF00  // Number of D Regions
N#define NVIC_MPU_TYPE_SEPARATE  0x00000001  // Separate or Unified MPU
N#define NVIC_MPU_TYPE_IREGION_S 16
N#define NVIC_MPU_TYPE_DREGION_S 8
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_MPU_CTRL_PRIVDEFEN 0x00000004  // MPU Default Region
N#define NVIC_MPU_CTRL_HFNMIENA  0x00000002  // MPU Enabled During Faults
N#define NVIC_MPU_CTRL_ENABLE    0x00000001  // MPU Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_NUMBER
N// register.
N//
N//*****************************************************************************
N#define NVIC_MPU_NUMBER_M       0x00000007  // MPU Region to Access
N#define NVIC_MPU_NUMBER_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_BASE register.
N//
N//*****************************************************************************
N#define NVIC_MPU_BASE_ADDR_M    0xFFFFFFE0  // Base Address Mask
N#define NVIC_MPU_BASE_VALID     0x00000010  // Region Number Valid
N#define NVIC_MPU_BASE_REGION_M  0x00000007  // Region Number
N#define NVIC_MPU_BASE_ADDR_S    5
N#define NVIC_MPU_BASE_REGION_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_ATTR register.
N//
N//*****************************************************************************
N#define NVIC_MPU_ATTR_XN        0x10000000  // Instruction Access Disable
N#define NVIC_MPU_ATTR_AP_M      0x07000000  // Access Privilege
N#define NVIC_MPU_ATTR_AP_NO_NO  0x00000000  // prv: no access, usr: no access
N#define NVIC_MPU_ATTR_AP_RW_NO  0x01000000  // prv: rw, usr: none
N#define NVIC_MPU_ATTR_AP_RW_RO  0x02000000  // prv: rw, usr: read-only
N#define NVIC_MPU_ATTR_AP_RW_RW  0x03000000  // prv: rw, usr: rw
N#define NVIC_MPU_ATTR_AP_RO_NO  0x05000000  // prv: ro, usr: none
N#define NVIC_MPU_ATTR_AP_RO_RO  0x06000000  // prv: ro, usr: ro
N#define NVIC_MPU_ATTR_TEX_M     0x00380000  // Type Extension Mask
N#define NVIC_MPU_ATTR_SHAREABLE 0x00040000  // Shareable
N#define NVIC_MPU_ATTR_CACHEABLE 0x00020000  // Cacheable
N#define NVIC_MPU_ATTR_BUFFRABLE 0x00010000  // Bufferable
N#define NVIC_MPU_ATTR_SRD_M     0x0000FF00  // Subregion Disable Bits
N#define NVIC_MPU_ATTR_SRD_0     0x00000100  // Sub-region 0 disable
N#define NVIC_MPU_ATTR_SRD_1     0x00000200  // Sub-region 1 disable
N#define NVIC_MPU_ATTR_SRD_2     0x00000400  // Sub-region 2 disable
N#define NVIC_MPU_ATTR_SRD_3     0x00000800  // Sub-region 3 disable
N#define NVIC_MPU_ATTR_SRD_4     0x00001000  // Sub-region 4 disable
N#define NVIC_MPU_ATTR_SRD_5     0x00002000  // Sub-region 5 disable
N#define NVIC_MPU_ATTR_SRD_6     0x00004000  // Sub-region 6 disable
N#define NVIC_MPU_ATTR_SRD_7     0x00008000  // Sub-region 7 disable
N#define NVIC_MPU_ATTR_SIZE_M    0x0000003E  // Region Size Mask
N#define NVIC_MPU_ATTR_SIZE_32B  0x00000008  // Region size 32 bytes
N#define NVIC_MPU_ATTR_SIZE_64B  0x0000000A  // Region size 64 bytes
N#define NVIC_MPU_ATTR_SIZE_128B 0x0000000C  // Region size 128 bytes
N#define NVIC_MPU_ATTR_SIZE_256B 0x0000000E  // Region size 256 bytes
N#define NVIC_MPU_ATTR_SIZE_512B 0x00000010  // Region size 512 bytes
N#define NVIC_MPU_ATTR_SIZE_1K   0x00000012  // Region size 1 Kbytes
N#define NVIC_MPU_ATTR_SIZE_2K   0x00000014  // Region size 2 Kbytes
N#define NVIC_MPU_ATTR_SIZE_4K   0x00000016  // Region size 4 Kbytes
N#define NVIC_MPU_ATTR_SIZE_8K   0x00000018  // Region size 8 Kbytes
N#define NVIC_MPU_ATTR_SIZE_16K  0x0000001A  // Region size 16 Kbytes
N#define NVIC_MPU_ATTR_SIZE_32K  0x0000001C  // Region size 32 Kbytes
N#define NVIC_MPU_ATTR_SIZE_64K  0x0000001E  // Region size 64 Kbytes
N#define NVIC_MPU_ATTR_SIZE_128K 0x00000020  // Region size 128 Kbytes
N#define NVIC_MPU_ATTR_SIZE_256K 0x00000022  // Region size 256 Kbytes
N#define NVIC_MPU_ATTR_SIZE_512K 0x00000024  // Region size 512 Kbytes
N#define NVIC_MPU_ATTR_SIZE_1M   0x00000026  // Region size 1 Mbytes
N#define NVIC_MPU_ATTR_SIZE_2M   0x00000028  // Region size 2 Mbytes
N#define NVIC_MPU_ATTR_SIZE_4M   0x0000002A  // Region size 4 Mbytes
N#define NVIC_MPU_ATTR_SIZE_8M   0x0000002C  // Region size 8 Mbytes
N#define NVIC_MPU_ATTR_SIZE_16M  0x0000002E  // Region size 16 Mbytes
N#define NVIC_MPU_ATTR_SIZE_32M  0x00000030  // Region size 32 Mbytes
N#define NVIC_MPU_ATTR_SIZE_64M  0x00000032  // Region size 64 Mbytes
N#define NVIC_MPU_ATTR_SIZE_128M 0x00000034  // Region size 128 Mbytes
N#define NVIC_MPU_ATTR_SIZE_256M 0x00000036  // Region size 256 Mbytes
N#define NVIC_MPU_ATTR_SIZE_512M 0x00000038  // Region size 512 Mbytes
N#define NVIC_MPU_ATTR_SIZE_1G   0x0000003A  // Region size 1 Gbytes
N#define NVIC_MPU_ATTR_SIZE_2G   0x0000003C  // Region size 2 Gbytes
N#define NVIC_MPU_ATTR_SIZE_4G   0x0000003E  // Region size 4 Gbytes
N#define NVIC_MPU_ATTR_ENABLE    0x00000001  // Region Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_BASE1 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_BASE1_ADDR_M   0xFFFFFFE0  // Base Address Mask
N#define NVIC_MPU_BASE1_VALID    0x00000010  // Region Number Valid
N#define NVIC_MPU_BASE1_REGION_M 0x00000007  // Region Number
N#define NVIC_MPU_BASE1_ADDR_S   5
N#define NVIC_MPU_BASE1_REGION_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_ATTR1 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_ATTR1_XN       0x10000000  // Instruction Access Disable
N#define NVIC_MPU_ATTR1_AP_M     0x07000000  // Access Privilege
N#define NVIC_MPU_ATTR1_TEX_M    0x00380000  // Type Extension Mask
N#define NVIC_MPU_ATTR1_SHAREABLE                                              \
N                                0x00040000  // Shareable
X#define NVIC_MPU_ATTR1_SHAREABLE                                                                              0x00040000  
N#define NVIC_MPU_ATTR1_CACHEABLE                                              \
N                                0x00020000  // Cacheable
X#define NVIC_MPU_ATTR1_CACHEABLE                                                                              0x00020000  
N#define NVIC_MPU_ATTR1_BUFFRABLE                                              \
N                                0x00010000  // Bufferable
X#define NVIC_MPU_ATTR1_BUFFRABLE                                                                              0x00010000  
N#define NVIC_MPU_ATTR1_SRD_M    0x0000FF00  // Subregion Disable Bits
N#define NVIC_MPU_ATTR1_SIZE_M   0x0000003E  // Region Size Mask
N#define NVIC_MPU_ATTR1_ENABLE   0x00000001  // Region Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_BASE2 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_BASE2_ADDR_M   0xFFFFFFE0  // Base Address Mask
N#define NVIC_MPU_BASE2_VALID    0x00000010  // Region Number Valid
N#define NVIC_MPU_BASE2_REGION_M 0x00000007  // Region Number
N#define NVIC_MPU_BASE2_ADDR_S   5
N#define NVIC_MPU_BASE2_REGION_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_ATTR2 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_ATTR2_XN       0x10000000  // Instruction Access Disable
N#define NVIC_MPU_ATTR2_AP_M     0x07000000  // Access Privilege
N#define NVIC_MPU_ATTR2_TEX_M    0x00380000  // Type Extension Mask
N#define NVIC_MPU_ATTR2_SHAREABLE                                              \
N                                0x00040000  // Shareable
X#define NVIC_MPU_ATTR2_SHAREABLE                                                                              0x00040000  
N#define NVIC_MPU_ATTR2_CACHEABLE                                              \
N                                0x00020000  // Cacheable
X#define NVIC_MPU_ATTR2_CACHEABLE                                                                              0x00020000  
N#define NVIC_MPU_ATTR2_BUFFRABLE                                              \
N                                0x00010000  // Bufferable
X#define NVIC_MPU_ATTR2_BUFFRABLE                                                                              0x00010000  
N#define NVIC_MPU_ATTR2_SRD_M    0x0000FF00  // Subregion Disable Bits
N#define NVIC_MPU_ATTR2_SIZE_M   0x0000003E  // Region Size Mask
N#define NVIC_MPU_ATTR2_ENABLE   0x00000001  // Region Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_BASE3 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_BASE3_ADDR_M   0xFFFFFFE0  // Base Address Mask
N#define NVIC_MPU_BASE3_VALID    0x00000010  // Region Number Valid
N#define NVIC_MPU_BASE3_REGION_M 0x00000007  // Region Number
N#define NVIC_MPU_BASE3_ADDR_S   5
N#define NVIC_MPU_BASE3_REGION_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_ATTR3 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_ATTR3_XN       0x10000000  // Instruction Access Disable
N#define NVIC_MPU_ATTR3_AP_M     0x07000000  // Access Privilege
N#define NVIC_MPU_ATTR3_TEX_M    0x00380000  // Type Extension Mask
N#define NVIC_MPU_ATTR3_SHAREABLE                                              \
N                                0x00040000  // Shareable
X#define NVIC_MPU_ATTR3_SHAREABLE                                                                              0x00040000  
N#define NVIC_MPU_ATTR3_CACHEABLE                                              \
N                                0x00020000  // Cacheable
X#define NVIC_MPU_ATTR3_CACHEABLE                                                                              0x00020000  
N#define NVIC_MPU_ATTR3_BUFFRABLE                                              \
N                                0x00010000  // Bufferable
X#define NVIC_MPU_ATTR3_BUFFRABLE                                                                              0x00010000  
N#define NVIC_MPU_ATTR3_SRD_M    0x0000FF00  // Subregion Disable Bits
N#define NVIC_MPU_ATTR3_SIZE_M   0x0000003E  // Region Size Mask
N#define NVIC_MPU_ATTR3_ENABLE   0x00000001  // Region Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DBG_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_DBG_CTRL_DBGKEY_M  0xFFFF0000  // Debug key mask
N#define NVIC_DBG_CTRL_DBGKEY    0xA05F0000  // Debug key
N#define NVIC_DBG_CTRL_S_RESET_ST                                              \
N                                0x02000000  // Core has reset since last read
X#define NVIC_DBG_CTRL_S_RESET_ST                                                                              0x02000000  
N#define NVIC_DBG_CTRL_S_RETIRE_ST                                             \
N                                0x01000000  // Core has executed insruction
X#define NVIC_DBG_CTRL_S_RETIRE_ST                                                                             0x01000000  
N                                            // since last read
N#define NVIC_DBG_CTRL_S_LOCKUP  0x00080000  // Core is locked up
N#define NVIC_DBG_CTRL_S_SLEEP   0x00040000  // Core is sleeping
N#define NVIC_DBG_CTRL_S_HALT    0x00020000  // Core status on halt
N#define NVIC_DBG_CTRL_S_REGRDY  0x00010000  // Register read/write available
N#define NVIC_DBG_CTRL_C_SNAPSTALL                                             \
N                                0x00000020  // Breaks a stalled load/store
X#define NVIC_DBG_CTRL_C_SNAPSTALL                                                                             0x00000020  
N#define NVIC_DBG_CTRL_C_MASKINT 0x00000008  // Mask interrupts when stepping
N#define NVIC_DBG_CTRL_C_STEP    0x00000004  // Step the core
N#define NVIC_DBG_CTRL_C_HALT    0x00000002  // Halt the core
N#define NVIC_DBG_CTRL_C_DEBUGEN 0x00000001  // Enable debug
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DBG_XFER register.
N//
N//*****************************************************************************
N#define NVIC_DBG_XFER_REG_WNR   0x00010000  // Write or not read
N#define NVIC_DBG_XFER_REG_SEL_M 0x0000001F  // Register
N#define NVIC_DBG_XFER_REG_R0    0x00000000  // Register R0
N#define NVIC_DBG_XFER_REG_R1    0x00000001  // Register R1
N#define NVIC_DBG_XFER_REG_R2    0x00000002  // Register R2
N#define NVIC_DBG_XFER_REG_R3    0x00000003  // Register R3
N#define NVIC_DBG_XFER_REG_R4    0x00000004  // Register R4
N#define NVIC_DBG_XFER_REG_R5    0x00000005  // Register R5
N#define NVIC_DBG_XFER_REG_R6    0x00000006  // Register R6
N#define NVIC_DBG_XFER_REG_R7    0x00000007  // Register R7
N#define NVIC_DBG_XFER_REG_R8    0x00000008  // Register R8
N#define NVIC_DBG_XFER_REG_R9    0x00000009  // Register R9
N#define NVIC_DBG_XFER_REG_R10   0x0000000A  // Register R10
N#define NVIC_DBG_XFER_REG_R11   0x0000000B  // Register R11
N#define NVIC_DBG_XFER_REG_R12   0x0000000C  // Register R12
N#define NVIC_DBG_XFER_REG_R13   0x0000000D  // Register R13
N#define NVIC_DBG_XFER_REG_R14   0x0000000E  // Register R14
N#define NVIC_DBG_XFER_REG_R15   0x0000000F  // Register R15
N#define NVIC_DBG_XFER_REG_FLAGS 0x00000010  // xPSR/Flags register
N#define NVIC_DBG_XFER_REG_MSP   0x00000011  // Main SP
N#define NVIC_DBG_XFER_REG_PSP   0x00000012  // Process SP
N#define NVIC_DBG_XFER_REG_DSP   0x00000013  // Deep SP
N#define NVIC_DBG_XFER_REG_CFBP  0x00000014  // Control/Fault/BasePri/PriMask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DBG_DATA register.
N//
N//*****************************************************************************
N#define NVIC_DBG_DATA_M         0xFFFFFFFF  // Data temporary cache
N#define NVIC_DBG_DATA_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DBG_INT register.
N//
N//*****************************************************************************
N#define NVIC_DBG_INT_HARDERR    0x00000400  // Debug trap on hard fault
N#define NVIC_DBG_INT_INTERR     0x00000200  // Debug trap on interrupt errors
N#define NVIC_DBG_INT_BUSERR     0x00000100  // Debug trap on bus error
N#define NVIC_DBG_INT_STATERR    0x00000080  // Debug trap on usage fault state
N#define NVIC_DBG_INT_CHKERR     0x00000040  // Debug trap on usage fault check
N#define NVIC_DBG_INT_NOCPERR    0x00000020  // Debug trap on coprocessor error
N#define NVIC_DBG_INT_MMERR      0x00000010  // Debug trap on mem manage fault
N#define NVIC_DBG_INT_RESET      0x00000008  // Core reset status
N#define NVIC_DBG_INT_RSTPENDCLR 0x00000004  // Clear pending core reset
N#define NVIC_DBG_INT_RSTPENDING 0x00000002  // Core reset is pending
N#define NVIC_DBG_INT_RSTVCATCH  0x00000001  // Reset vector catch
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SW_TRIG register.
N//
N//*****************************************************************************
N#define NVIC_SW_TRIG_INTID_M    0x000000FF  // Interrupt ID
N#define NVIC_SW_TRIG_INTID_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_FPCC register.
N//
N//*****************************************************************************
N#define NVIC_FPCC_ASPEN         0x80000000  // Automatic State Preservation
N                                            // Enable
N#define NVIC_FPCC_LSPEN         0x40000000  // Lazy State Preservation Enable
N#define NVIC_FPCC_MONRDY        0x00000100  // Monitor Ready
N#define NVIC_FPCC_BFRDY         0x00000040  // Bus Fault Ready
N#define NVIC_FPCC_MMRDY         0x00000020  // Memory Management Fault Ready
N#define NVIC_FPCC_HFRDY         0x00000010  // Hard Fault Ready
N#define NVIC_FPCC_THREAD        0x00000008  // Thread Mode
N#define NVIC_FPCC_USER          0x00000002  // User Privilege Level
N#define NVIC_FPCC_LSPACT        0x00000001  // Lazy State Preservation Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_FPCA register.
N//
N//*****************************************************************************
N#define NVIC_FPCA_ADDRESS_M     0xFFFFFFF8  // Address
N#define NVIC_FPCA_ADDRESS_S     3
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_FPDSC register.
N//
N//*****************************************************************************
N#define NVIC_FPDSC_AHP          0x04000000  // AHP Bit Default
N#define NVIC_FPDSC_DN           0x02000000  // DN Bit Default
N#define NVIC_FPDSC_FZ           0x01000000  // FZ Bit Default
N#define NVIC_FPDSC_RMODE_M      0x00C00000  // RMODE Bit Default
N#define NVIC_FPDSC_RMODE_RN     0x00000000  // Round to Nearest (RN) mode
N#define NVIC_FPDSC_RMODE_RP     0x00400000  // Round towards Plus Infinity (RP)
N                                            // mode
N#define NVIC_FPDSC_RMODE_RM     0x00800000  // Round towards Minus Infinity
N                                            // (RM) mode
N#define NVIC_FPDSC_RMODE_RZ     0x00C00000  // Round towards Zero (RZ) mode
N
N#endif // __HW_NVIC_H__
L 25 "..\inc_h\system.h" 2
N#include <hw_i2c.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_i2c.h" 1
N//*****************************************************************************
N//
N// hw_i2c.h - Macros used when accessing the I2C master and slave hardware.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_I2C_H__
N#define __HW_I2C_H__
N
N//*****************************************************************************
N//
N// The following are defines for the I2C register offsets.
N//
N//*****************************************************************************
N#define I2C_O_MSA               0x00000000  // I2C Master Slave Address
N#define I2C_O_MCS               0x00000004  // I2C Master Control/Status
N#define I2C_O_MDR               0x00000008  // I2C Master Data
N#define I2C_O_MTPR              0x0000000C  // I2C Master Timer Period
N#define I2C_O_MIMR              0x00000010  // I2C Master Interrupt Mask
N#define I2C_O_MRIS              0x00000014  // I2C Master Raw Interrupt Status
N#define I2C_O_MMIS              0x00000018  // I2C Master Masked Interrupt
N                                            // Status
N#define I2C_O_MICR              0x0000001C  // I2C Master Interrupt Clear
N#define I2C_O_MCR               0x00000020  // I2C Master Configuration
N#define I2C_O_MCLKOCNT          0x00000024  // I2C Master Clock Low Timeout
N                                            // Count
N#define I2C_O_MBMON             0x0000002C  // I2C Master Bus Monitor
N#define I2C_O_MBLEN             0x00000030  // I2C Master Burst Length
N#define I2C_O_MBCNT             0x00000034  // I2C Master Burst Count
N#define I2C_O_MCR2              0x00000038  // I2C Master Configuration 2
N#define I2C_O_SOAR              0x00000800  // I2C Slave Own Address
N#define I2C_O_SCSR              0x00000804  // I2C Slave Control/Status
N#define I2C_O_SDR               0x00000808  // I2C Slave Data
N#define I2C_O_SIMR              0x0000080C  // I2C Slave Interrupt Mask
N#define I2C_O_SRIS              0x00000810  // I2C Slave Raw Interrupt Status
N#define I2C_O_SMIS              0x00000814  // I2C Slave Masked Interrupt
N                                            // Status
N#define I2C_O_SICR              0x00000818  // I2C Slave Interrupt Clear
N#define I2C_O_SOAR2             0x0000081C  // I2C Slave Own Address 2
N#define I2C_O_SACKCTL           0x00000820  // I2C Slave ACK Control
N#define I2C_O_FIFODATA          0x00000F00  // I2C FIFO Data
N#define I2C_O_FIFOCTL           0x00000F04  // I2C FIFO Control
N#define I2C_O_FIFOSTATUS        0x00000F08  // I2C FIFO Status
N#define I2C_O_PP                0x00000FC0  // I2C Peripheral Properties
N#define I2C_O_PC                0x00000FC4  // I2C Peripheral Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MSA register.
N//
N//*****************************************************************************
N#define I2C_MSA_SA_M            0x000000FE  // I2C Slave Address
N#define I2C_MSA_RS              0x00000001  // Receive not send
N#define I2C_MSA_SA_S            1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCS register.
N//
N//*****************************************************************************
N#define I2C_MCS_ACTDMARX        0x80000000  // DMA RX Active Status
N#define I2C_MCS_ACTDMATX        0x40000000  // DMA TX Active Status
N#define I2C_MCS_CLKTO           0x00000080  // Clock Timeout Error
N#define I2C_MCS_BURST           0x00000040  // Burst Enable
N#define I2C_MCS_BUSBSY          0x00000040  // Bus Busy
N#define I2C_MCS_IDLE            0x00000020  // I2C Idle
N#define I2C_MCS_QCMD            0x00000020  // Quick Command
N#define I2C_MCS_ARBLST          0x00000010  // Arbitration Lost
N#define I2C_MCS_HS              0x00000010  // High-Speed Enable
N#define I2C_MCS_ACK             0x00000008  // Data Acknowledge Enable
N#define I2C_MCS_DATACK          0x00000008  // Acknowledge Data
N#define I2C_MCS_ADRACK          0x00000004  // Acknowledge Address
N#define I2C_MCS_STOP            0x00000004  // Generate STOP
N#define I2C_MCS_ERROR           0x00000002  // Error
N#define I2C_MCS_START           0x00000002  // Generate START
N#define I2C_MCS_RUN             0x00000001  // I2C Master Enable
N#define I2C_MCS_BUSY            0x00000001  // I2C Busy
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MDR register.
N//
N//*****************************************************************************
N#define I2C_MDR_DATA_M          0x000000FF  // This byte contains the data
N                                            // transferred during a transaction
N#define I2C_MDR_DATA_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MTPR register.
N//
N//*****************************************************************************
N#define I2C_MTPR_PULSEL_M       0x00070000  // Glitch Suppression Pulse Width
N#define I2C_MTPR_PULSEL_BYPASS  0x00000000  // Bypass
N#define I2C_MTPR_PULSEL_1       0x00010000  // 1 clock
N#define I2C_MTPR_PULSEL_2       0x00020000  // 2 clocks
N#define I2C_MTPR_PULSEL_3       0x00030000  // 3 clocks
N#define I2C_MTPR_PULSEL_4       0x00040000  // 4 clocks
N#define I2C_MTPR_PULSEL_8       0x00050000  // 8 clocks
N#define I2C_MTPR_PULSEL_16      0x00060000  // 16 clocks
N#define I2C_MTPR_PULSEL_31      0x00070000  // 31 clocks
N#define I2C_MTPR_HS             0x00000080  // High-Speed Enable
N#define I2C_MTPR_TPR_M          0x0000007F  // Timer Period
N#define I2C_MTPR_TPR_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MIMR register.
N//
N//*****************************************************************************
N#define I2C_MIMR_RXFFIM         0x00000800  // Receive FIFO Full Interrupt Mask
N#define I2C_MIMR_TXFEIM         0x00000400  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_MIMR_RXIM           0x00000200  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_MIMR_TXIM           0x00000100  // Transmit FIFO Request Interrupt
N                                            // Mask
N#define I2C_MIMR_ARBLOSTIM      0x00000080  // Arbitration Lost Interrupt Mask
N#define I2C_MIMR_STOPIM         0x00000040  // STOP Detection Interrupt Mask
N#define I2C_MIMR_STARTIM        0x00000020  // START Detection Interrupt Mask
N#define I2C_MIMR_NACKIM         0x00000010  // Address/Data NACK Interrupt Mask
N#define I2C_MIMR_DMATXIM        0x00000008  // Transmit DMA Interrupt Mask
N#define I2C_MIMR_DMARXIM        0x00000004  // Receive DMA Interrupt Mask
N#define I2C_MIMR_CLKIM          0x00000002  // Clock Timeout Interrupt Mask
N#define I2C_MIMR_IM             0x00000001  // Master Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MRIS register.
N//
N//*****************************************************************************
N#define I2C_MRIS_RXFFRIS        0x00000800  // Receive FIFO Full Raw Interrupt
N                                            // Status
N#define I2C_MRIS_TXFERIS        0x00000400  // Transmit FIFO Empty Raw
N                                            // Interrupt Status
N#define I2C_MRIS_RXRIS          0x00000200  // Receive FIFO Request Raw
N                                            // Interrupt Status
N#define I2C_MRIS_TXRIS          0x00000100  // Transmit Request Raw Interrupt
N                                            // Status
N#define I2C_MRIS_ARBLOSTRIS     0x00000080  // Arbitration Lost Raw Interrupt
N                                            // Status
N#define I2C_MRIS_STOPRIS        0x00000040  // STOP Detection Raw Interrupt
N                                            // Status
N#define I2C_MRIS_STARTRIS       0x00000020  // START Detection Raw Interrupt
N                                            // Status
N#define I2C_MRIS_NACKRIS        0x00000010  // Address/Data NACK Raw Interrupt
N                                            // Status
N#define I2C_MRIS_DMATXRIS       0x00000008  // Transmit DMA Raw Interrupt
N                                            // Status
N#define I2C_MRIS_DMARXRIS       0x00000004  // Receive DMA Raw Interrupt Status
N#define I2C_MRIS_CLKRIS         0x00000002  // Clock Timeout Raw Interrupt
N                                            // Status
N#define I2C_MRIS_RIS            0x00000001  // Master Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MMIS register.
N//
N//*****************************************************************************
N#define I2C_MMIS_RXFFMIS        0x00000800  // Receive FIFO Full Interrupt Mask
N#define I2C_MMIS_TXFEMIS        0x00000400  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_MMIS_RXMIS          0x00000200  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_MMIS_TXMIS          0x00000100  // Transmit Request Interrupt Mask
N#define I2C_MMIS_ARBLOSTMIS     0x00000080  // Arbitration Lost Interrupt Mask
N#define I2C_MMIS_STOPMIS        0x00000040  // STOP Detection Interrupt Mask
N#define I2C_MMIS_STARTMIS       0x00000020  // START Detection Interrupt Mask
N#define I2C_MMIS_NACKMIS        0x00000010  // Address/Data NACK Interrupt Mask
N#define I2C_MMIS_DMATXMIS       0x00000008  // Transmit DMA Interrupt Status
N#define I2C_MMIS_DMARXMIS       0x00000004  // Receive DMA Interrupt Status
N#define I2C_MMIS_CLKMIS         0x00000002  // Clock Timeout Masked Interrupt
N                                            // Status
N#define I2C_MMIS_MIS            0x00000001  // Masked Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MICR register.
N//
N//*****************************************************************************
N#define I2C_MICR_RXFFIC         0x00000800  // Receive FIFO Full Interrupt
N                                            // Clear
N#define I2C_MICR_TXFEIC         0x00000400  // Transmit FIFO Empty Interrupt
N                                            // Clear
N#define I2C_MICR_RXIC           0x00000200  // Receive FIFO Request Interrupt
N                                            // Clear
N#define I2C_MICR_TXIC           0x00000100  // Transmit FIFO Request Interrupt
N                                            // Clear
N#define I2C_MICR_ARBLOSTIC      0x00000080  // Arbitration Lost Interrupt Clear
N#define I2C_MICR_STOPIC         0x00000040  // STOP Detection Interrupt Clear
N#define I2C_MICR_STARTIC        0x00000020  // START Detection Interrupt Clear
N#define I2C_MICR_NACKIC         0x00000010  // Address/Data NACK Interrupt
N                                            // Clear
N#define I2C_MICR_DMATXIC        0x00000008  // Transmit DMA Interrupt Clear
N#define I2C_MICR_DMARXIC        0x00000004  // Receive DMA Interrupt Clear
N#define I2C_MICR_CLKIC          0x00000002  // Clock Timeout Interrupt Clear
N#define I2C_MICR_IC             0x00000001  // Master Interrupt Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCR register.
N//
N//*****************************************************************************
N#define I2C_MCR_GFE             0x00000040  // I2C Glitch Filter Enable
N#define I2C_MCR_SFE             0x00000020  // I2C Slave Function Enable
N#define I2C_MCR_MFE             0x00000010  // I2C Master Function Enable
N#define I2C_MCR_LPBK            0x00000001  // I2C Loopback
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCLKOCNT register.
N//
N//*****************************************************************************
N#define I2C_MCLKOCNT_CNTL_M     0x000000FF  // I2C Master Count
N#define I2C_MCLKOCNT_CNTL_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MBMON register.
N//
N//*****************************************************************************
N#define I2C_MBMON_SDA           0x00000002  // I2C SDA Status
N#define I2C_MBMON_SCL           0x00000001  // I2C SCL Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MBLEN register.
N//
N//*****************************************************************************
N#define I2C_MBLEN_CNTL_M        0x000000FF  // I2C Burst Length
N#define I2C_MBLEN_CNTL_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MBCNT register.
N//
N//*****************************************************************************
N#define I2C_MBCNT_CNTL_M        0x000000FF  // I2C Master Burst Count
N#define I2C_MBCNT_CNTL_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCR2 register.
N//
N//*****************************************************************************
N#define I2C_MCR2_GFPW_M         0x00000070  // I2C Glitch Filter Pulse Width
N#define I2C_MCR2_GFPW_BYPASS    0x00000000  // Bypass
N#define I2C_MCR2_GFPW_1         0x00000010  // 1 clock
N#define I2C_MCR2_GFPW_2         0x00000020  // 2 clocks
N#define I2C_MCR2_GFPW_3         0x00000030  // 3 clocks
N#define I2C_MCR2_GFPW_4         0x00000040  // 4 clocks
N#define I2C_MCR2_GFPW_8         0x00000050  // 8 clocks
N#define I2C_MCR2_GFPW_16        0x00000060  // 16 clocks
N#define I2C_MCR2_GFPW_31        0x00000070  // 31 clocks
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SOAR register.
N//
N//*****************************************************************************
N#define I2C_SOAR_OAR_M          0x0000007F  // I2C Slave Own Address
N#define I2C_SOAR_OAR_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SCSR register.
N//
N//*****************************************************************************
N#define I2C_SCSR_ACTDMARX       0x80000000  // DMA RX Active Status
N#define I2C_SCSR_ACTDMATX       0x40000000  // DMA TX Active Status
N#define I2C_SCSR_QCMDRW         0x00000020  // Quick Command Read / Write
N#define I2C_SCSR_QCMDST         0x00000010  // Quick Command Status
N#define I2C_SCSR_OAR2SEL        0x00000008  // OAR2 Address Matched
N#define I2C_SCSR_FBR            0x00000004  // First Byte Received
N#define I2C_SCSR_RXFIFO         0x00000004  // RX FIFO Enable
N#define I2C_SCSR_TXFIFO         0x00000002  // TX FIFO Enable
N#define I2C_SCSR_TREQ           0x00000002  // Transmit Request
N#define I2C_SCSR_DA             0x00000001  // Device Active
N#define I2C_SCSR_RREQ           0x00000001  // Receive Request
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SDR register.
N//
N//*****************************************************************************
N#define I2C_SDR_DATA_M          0x000000FF  // Data for Transfer
N#define I2C_SDR_DATA_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SIMR register.
N//
N//*****************************************************************************
N#define I2C_SIMR_RXFFIM         0x00000100  // Receive FIFO Full Interrupt Mask
N#define I2C_SIMR_TXFEIM         0x00000080  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_SIMR_RXIM           0x00000040  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_SIMR_TXIM           0x00000020  // Transmit FIFO Request Interrupt
N                                            // Mask
N#define I2C_SIMR_DMATXIM        0x00000010  // Transmit DMA Interrupt Mask
N#define I2C_SIMR_DMARXIM        0x00000008  // Receive DMA Interrupt Mask
N#define I2C_SIMR_STOPIM         0x00000004  // Stop Condition Interrupt Mask
N#define I2C_SIMR_STARTIM        0x00000002  // Start Condition Interrupt Mask
N#define I2C_SIMR_DATAIM         0x00000001  // Data Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SRIS register.
N//
N//*****************************************************************************
N#define I2C_SRIS_RXFFRIS        0x00000100  // Receive FIFO Full Raw Interrupt
N                                            // Status
N#define I2C_SRIS_TXFERIS        0x00000080  // Transmit FIFO Empty Raw
N                                            // Interrupt Status
N#define I2C_SRIS_RXRIS          0x00000040  // Receive FIFO Request Raw
N                                            // Interrupt Status
N#define I2C_SRIS_TXRIS          0x00000020  // Transmit Request Raw Interrupt
N                                            // Status
N#define I2C_SRIS_DMATXRIS       0x00000010  // Transmit DMA Raw Interrupt
N                                            // Status
N#define I2C_SRIS_DMARXRIS       0x00000008  // Receive DMA Raw Interrupt Status
N#define I2C_SRIS_STOPRIS        0x00000004  // Stop Condition Raw Interrupt
N                                            // Status
N#define I2C_SRIS_STARTRIS       0x00000002  // Start Condition Raw Interrupt
N                                            // Status
N#define I2C_SRIS_DATARIS        0x00000001  // Data Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SMIS register.
N//
N//*****************************************************************************
N#define I2C_SMIS_RXFFMIS        0x00000100  // Receive FIFO Full Interrupt Mask
N#define I2C_SMIS_TXFEMIS        0x00000080  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_SMIS_RXMIS          0x00000040  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_SMIS_TXMIS          0x00000020  // Transmit FIFO Request Interrupt
N                                            // Mask
N#define I2C_SMIS_DMATXMIS       0x00000010  // Transmit DMA Masked Interrupt
N                                            // Status
N#define I2C_SMIS_DMARXMIS       0x00000008  // Receive DMA Masked Interrupt
N                                            // Status
N#define I2C_SMIS_STOPMIS        0x00000004  // Stop Condition Masked Interrupt
N                                            // Status
N#define I2C_SMIS_STARTMIS       0x00000002  // Start Condition Masked Interrupt
N                                            // Status
N#define I2C_SMIS_DATAMIS        0x00000001  // Data Masked Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SICR register.
N//
N//*****************************************************************************
N#define I2C_SICR_RXFFIC         0x00000100  // Receive FIFO Full Interrupt Mask
N#define I2C_SICR_TXFEIC         0x00000080  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_SICR_RXIC           0x00000040  // Receive Request Interrupt Mask
N#define I2C_SICR_TXIC           0x00000020  // Transmit Request Interrupt Mask
N#define I2C_SICR_DMATXIC        0x00000010  // Transmit DMA Interrupt Clear
N#define I2C_SICR_DMARXIC        0x00000008  // Receive DMA Interrupt Clear
N#define I2C_SICR_STOPIC         0x00000004  // Stop Condition Interrupt Clear
N#define I2C_SICR_STARTIC        0x00000002  // Start Condition Interrupt Clear
N#define I2C_SICR_DATAIC         0x00000001  // Data Interrupt Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SOAR2 register.
N//
N//*****************************************************************************
N#define I2C_SOAR2_OAR2EN        0x00000080  // I2C Slave Own Address 2 Enable
N#define I2C_SOAR2_OAR2_M        0x0000007F  // I2C Slave Own Address 2
N#define I2C_SOAR2_OAR2_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SACKCTL register.
N//
N//*****************************************************************************
N#define I2C_SACKCTL_ACKOVAL     0x00000002  // I2C Slave ACK Override Value
N#define I2C_SACKCTL_ACKOEN      0x00000001  // I2C Slave ACK Override Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_FIFODATA register.
N//
N//*****************************************************************************
N#define I2C_FIFODATA_DATA_M     0x000000FF  // I2C TX FIFO Write Data Byte
N#define I2C_FIFODATA_DATA_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_FIFOCTL register.
N//
N//*****************************************************************************
N#define I2C_FIFOCTL_RXASGNMT    0x80000000  // RX Control Assignment
N#define I2C_FIFOCTL_RXFLUSH     0x40000000  // RX FIFO Flush
N#define I2C_FIFOCTL_DMARXENA    0x20000000  // DMA RX Channel Enable
N#define I2C_FIFOCTL_RXTRIG_M    0x00070000  // RX FIFO Trigger
N#define I2C_FIFOCTL_TXASGNMT    0x00008000  // TX Control Assignment
N#define I2C_FIFOCTL_TXFLUSH     0x00004000  // TX FIFO Flush
N#define I2C_FIFOCTL_DMATXENA    0x00002000  // DMA TX Channel Enable
N#define I2C_FIFOCTL_TXTRIG_M    0x00000007  // TX FIFO Trigger
N#define I2C_FIFOCTL_RXTRIG_S    16
N#define I2C_FIFOCTL_TXTRIG_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_FIFOSTATUS
N// register.
N//
N//*****************************************************************************
N#define I2C_FIFOSTATUS_RXABVTRIG                                              \
N                                0x00040000  // RX FIFO Above Trigger Level
X#define I2C_FIFOSTATUS_RXABVTRIG                                                                              0x00040000  
N#define I2C_FIFOSTATUS_RXFF     0x00020000  // RX FIFO Full
N#define I2C_FIFOSTATUS_RXFE     0x00010000  // RX FIFO Empty
N#define I2C_FIFOSTATUS_TXBLWTRIG                                              \
N                                0x00000004  // TX FIFO Below Trigger Level
X#define I2C_FIFOSTATUS_TXBLWTRIG                                                                              0x00000004  
N#define I2C_FIFOSTATUS_TXFF     0x00000002  // TX FIFO Full
N#define I2C_FIFOSTATUS_TXFE     0x00000001  // TX FIFO Empty
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_PP register.
N//
N//*****************************************************************************
N#define I2C_PP_HS               0x00000001  // High-Speed Capable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_PC register.
N//
N//*****************************************************************************
N#define I2C_PC_HS               0x00000001  // High-Speed Capable
N
N#endif // __HW_I2C_H__
L 26 "..\inc_h\system.h" 2
N#include <hw_timer.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_timer.h" 1
N//*****************************************************************************
N//
N// hw_timer.h - Defines and macros used when accessing the timer.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_TIMER_H__
N#define __HW_TIMER_H__
N
N//*****************************************************************************
N//
N// The following are defines for the Timer register offsets.
N//
N//*****************************************************************************
N#define TIMER_O_CFG             0x00000000  // GPTM Configuration
N#define TIMER_O_TAMR            0x00000004  // GPTM Timer A Mode
N#define TIMER_O_TBMR            0x00000008  // GPTM Timer B Mode
N#define TIMER_O_CTL             0x0000000C  // GPTM Control
N#define TIMER_O_SYNC            0x00000010  // GPTM Synchronize
N#define TIMER_O_IMR             0x00000018  // GPTM Interrupt Mask
N#define TIMER_O_RIS             0x0000001C  // GPTM Raw Interrupt Status
N#define TIMER_O_MIS             0x00000020  // GPTM Masked Interrupt Status
N#define TIMER_O_ICR             0x00000024  // GPTM Interrupt Clear
N#define TIMER_O_TAILR           0x00000028  // GPTM Timer A Interval Load
N#define TIMER_O_TBILR           0x0000002C  // GPTM Timer B Interval Load
N#define TIMER_O_TAMATCHR        0x00000030  // GPTM Timer A Match
N#define TIMER_O_TBMATCHR        0x00000034  // GPTM Timer B Match
N#define TIMER_O_TAPR            0x00000038  // GPTM Timer A Prescale
N#define TIMER_O_TBPR            0x0000003C  // GPTM Timer B Prescale
N#define TIMER_O_TAPMR           0x00000040  // GPTM TimerA Prescale Match
N#define TIMER_O_TBPMR           0x00000044  // GPTM TimerB Prescale Match
N#define TIMER_O_TAR             0x00000048  // GPTM Timer A
N#define TIMER_O_TBR             0x0000004C  // GPTM Timer B
N#define TIMER_O_TAV             0x00000050  // GPTM Timer A Value
N#define TIMER_O_TBV             0x00000054  // GPTM Timer B Value
N#define TIMER_O_RTCPD           0x00000058  // GPTM RTC Predivide
N#define TIMER_O_TAPS            0x0000005C  // GPTM Timer A Prescale Snapshot
N#define TIMER_O_TBPS            0x00000060  // GPTM Timer B Prescale Snapshot
N#define TIMER_O_TAPV            0x00000064  // GPTM Timer A Prescale Value
N#define TIMER_O_TBPV            0x00000068  // GPTM Timer B Prescale Value
N#define TIMER_O_DMAEV           0x0000006C  // GPTM DMA Event
N#define TIMER_O_ADCEV           0x00000070  // GPTM ADC Event
N#define TIMER_O_PP              0x00000FC0  // GPTM Peripheral Properties
N#define TIMER_O_CC              0x00000FC8  // GPTM Clock Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_CFG register.
N//
N//*****************************************************************************
N#define TIMER_CFG_M             0x00000007  // GPTM Configuration
N#define TIMER_CFG_32_BIT_TIMER  0x00000000  // For a 16/32-bit timer, this
N                                            // value selects the 32-bit timer
N                                            // configuration
N#define TIMER_CFG_32_BIT_RTC    0x00000001  // For a 16/32-bit timer, this
N                                            // value selects the 32-bit
N                                            // real-time clock (RTC) counter
N                                            // configuration
N#define TIMER_CFG_16_BIT        0x00000004  // For a 16/32-bit timer, this
N                                            // value selects the 16-bit timer
N                                            // configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAMR register.
N//
N//*****************************************************************************
N#define TIMER_TAMR_TCACT_M      0x0000E000  // Timer Compare Action Select
N#define TIMER_TAMR_TCACT_NONE   0x00000000  // Disable compare operations
N#define TIMER_TAMR_TCACT_TOGGLE 0x00002000  // Toggle State on Time-Out
N#define TIMER_TAMR_TCACT_CLRTO  0x00004000  // Clear CCP on Time-Out
N#define TIMER_TAMR_TCACT_SETTO  0x00006000  // Set CCP on Time-Out
N#define TIMER_TAMR_TCACT_SETTOGTO                                             \
N                                0x00008000  // Set CCP immediately and toggle
X#define TIMER_TAMR_TCACT_SETTOGTO                                                                             0x00008000  
N                                            // on Time-Out
N#define TIMER_TAMR_TCACT_CLRTOGTO                                             \
N                                0x0000A000  // Clear CCP immediately and toggle
X#define TIMER_TAMR_TCACT_CLRTOGTO                                                                             0x0000A000  
N                                            // on Time-Out
N#define TIMER_TAMR_TCACT_SETCLRTO                                             \
N                                0x0000C000  // Set CCP immediately and clear on
X#define TIMER_TAMR_TCACT_SETCLRTO                                                                             0x0000C000  
N                                            // Time-Out
N#define TIMER_TAMR_TCACT_CLRSETTO                                             \
N                                0x0000E000  // Clear CCP immediately and set on
X#define TIMER_TAMR_TCACT_CLRSETTO                                                                             0x0000E000  
N                                            // Time-Out
N#define TIMER_TAMR_TACINTD      0x00001000  // One-shot/Periodic Interrupt
N                                            // Disable
N#define TIMER_TAMR_TAPLO        0x00000800  // GPTM Timer A PWM Legacy
N                                            // Operation
N#define TIMER_TAMR_TAMRSU       0x00000400  // GPTM Timer A Match Register
N                                            // Update
N#define TIMER_TAMR_TAPWMIE      0x00000200  // GPTM Timer A PWM Interrupt
N                                            // Enable
N#define TIMER_TAMR_TAILD        0x00000100  // GPTM Timer A Interval Load Write
N#define TIMER_TAMR_TASNAPS      0x00000080  // GPTM Timer A Snap-Shot Mode
N#define TIMER_TAMR_TAWOT        0x00000040  // GPTM Timer A Wait-on-Trigger
N#define TIMER_TAMR_TAMIE        0x00000020  // GPTM Timer A Match Interrupt
N                                            // Enable
N#define TIMER_TAMR_TACDIR       0x00000010  // GPTM Timer A Count Direction
N#define TIMER_TAMR_TAAMS        0x00000008  // GPTM Timer A Alternate Mode
N                                            // Select
N#define TIMER_TAMR_TACMR        0x00000004  // GPTM Timer A Capture Mode
N#define TIMER_TAMR_TAMR_M       0x00000003  // GPTM Timer A Mode
N#define TIMER_TAMR_TAMR_1_SHOT  0x00000001  // One-Shot Timer mode
N#define TIMER_TAMR_TAMR_PERIOD  0x00000002  // Periodic Timer mode
N#define TIMER_TAMR_TAMR_CAP     0x00000003  // Capture mode
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBMR register.
N//
N//*****************************************************************************
N#define TIMER_TBMR_TCACT_M      0x0000E000  // Timer Compare Action Select
N#define TIMER_TBMR_TCACT_NONE   0x00000000  // Disable compare operations
N#define TIMER_TBMR_TCACT_TOGGLE 0x00002000  // Toggle State on Time-Out
N#define TIMER_TBMR_TCACT_CLRTO  0x00004000  // Clear CCP on Time-Out
N#define TIMER_TBMR_TCACT_SETTO  0x00006000  // Set CCP on Time-Out
N#define TIMER_TBMR_TCACT_SETTOGTO                                             \
N                                0x00008000  // Set CCP immediately and toggle
X#define TIMER_TBMR_TCACT_SETTOGTO                                                                             0x00008000  
N                                            // on Time-Out
N#define TIMER_TBMR_TCACT_CLRTOGTO                                             \
N                                0x0000A000  // Clear CCP immediately and toggle
X#define TIMER_TBMR_TCACT_CLRTOGTO                                                                             0x0000A000  
N                                            // on Time-Out
N#define TIMER_TBMR_TCACT_SETCLRTO                                             \
N                                0x0000C000  // Set CCP immediately and clear on
X#define TIMER_TBMR_TCACT_SETCLRTO                                                                             0x0000C000  
N                                            // Time-Out
N#define TIMER_TBMR_TCACT_CLRSETTO                                             \
N                                0x0000E000  // Clear CCP immediately and set on
X#define TIMER_TBMR_TCACT_CLRSETTO                                                                             0x0000E000  
N                                            // Time-Out
N#define TIMER_TBMR_TBCINTD      0x00001000  // One-Shot/Periodic Interrupt
N                                            // Disable
N#define TIMER_TBMR_TBPLO        0x00000800  // GPTM Timer B PWM Legacy
N                                            // Operation
N#define TIMER_TBMR_TBMRSU       0x00000400  // GPTM Timer B Match Register
N                                            // Update
N#define TIMER_TBMR_TBPWMIE      0x00000200  // GPTM Timer B PWM Interrupt
N                                            // Enable
N#define TIMER_TBMR_TBILD        0x00000100  // GPTM Timer B Interval Load Write
N#define TIMER_TBMR_TBSNAPS      0x00000080  // GPTM Timer B Snap-Shot Mode
N#define TIMER_TBMR_TBWOT        0x00000040  // GPTM Timer B Wait-on-Trigger
N#define TIMER_TBMR_TBMIE        0x00000020  // GPTM Timer B Match Interrupt
N                                            // Enable
N#define TIMER_TBMR_TBCDIR       0x00000010  // GPTM Timer B Count Direction
N#define TIMER_TBMR_TBAMS        0x00000008  // GPTM Timer B Alternate Mode
N                                            // Select
N#define TIMER_TBMR_TBCMR        0x00000004  // GPTM Timer B Capture Mode
N#define TIMER_TBMR_TBMR_M       0x00000003  // GPTM Timer B Mode
N#define TIMER_TBMR_TBMR_1_SHOT  0x00000001  // One-Shot Timer mode
N#define TIMER_TBMR_TBMR_PERIOD  0x00000002  // Periodic Timer mode
N#define TIMER_TBMR_TBMR_CAP     0x00000003  // Capture mode
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_CTL register.
N//
N//*****************************************************************************
N#define TIMER_CTL_TBPWML        0x00004000  // GPTM Timer B PWM Output Level
N#define TIMER_CTL_TBOTE         0x00002000  // GPTM Timer B Output Trigger
N                                            // Enable
N#define TIMER_CTL_TBEVENT_M     0x00000C00  // GPTM Timer B Event Mode
N#define TIMER_CTL_TBEVENT_POS   0x00000000  // Positive edge
N#define TIMER_CTL_TBEVENT_NEG   0x00000400  // Negative edge
N#define TIMER_CTL_TBEVENT_BOTH  0x00000C00  // Both edges
N#define TIMER_CTL_TBSTALL       0x00000200  // GPTM Timer B Stall Enable
N#define TIMER_CTL_TBEN          0x00000100  // GPTM Timer B Enable
N#define TIMER_CTL_TAPWML        0x00000040  // GPTM Timer A PWM Output Level
N#define TIMER_CTL_TAOTE         0x00000020  // GPTM Timer A Output Trigger
N                                            // Enable
N#define TIMER_CTL_RTCEN         0x00000010  // GPTM RTC Stall Enable
N#define TIMER_CTL_TAEVENT_M     0x0000000C  // GPTM Timer A Event Mode
N#define TIMER_CTL_TAEVENT_POS   0x00000000  // Positive edge
N#define TIMER_CTL_TAEVENT_NEG   0x00000004  // Negative edge
N#define TIMER_CTL_TAEVENT_BOTH  0x0000000C  // Both edges
N#define TIMER_CTL_TASTALL       0x00000002  // GPTM Timer A Stall Enable
N#define TIMER_CTL_TAEN          0x00000001  // GPTM Timer A Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_SYNC register.
N//
N//*****************************************************************************
N#define TIMER_SYNC_SYNCWT5_M    0x00C00000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 5
N#define TIMER_SYNC_SYNCWT5_NONE 0x00000000  // GPTM 32/64-Bit Timer 5 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT5_TA   0x00400000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 5 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT5_TB   0x00800000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 5 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT5_TATB 0x00C00000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 5 is triggered
N#define TIMER_SYNC_SYNCWT4_M    0x00300000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 4
N#define TIMER_SYNC_SYNCWT4_NONE 0x00000000  // GPTM 32/64-Bit Timer 4 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT4_TA   0x00100000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 4 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT4_TB   0x00200000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 4 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT4_TATB 0x00300000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 4 is triggered
N#define TIMER_SYNC_SYNCWT3_M    0x000C0000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 3
N#define TIMER_SYNC_SYNCWT3_NONE 0x00000000  // GPTM 32/64-Bit Timer 3 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT3_TA   0x00040000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 3 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT3_TB   0x00080000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 3 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT3_TATB 0x000C0000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 3 is triggered
N#define TIMER_SYNC_SYNCWT2_M    0x00030000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 2
N#define TIMER_SYNC_SYNCWT2_NONE 0x00000000  // GPTM 32/64-Bit Timer 2 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT2_TA   0x00010000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 2 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT2_TB   0x00020000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 2 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT2_TATB 0x00030000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 2 is triggered
N#define TIMER_SYNC_SYNCT7_M     0x0000C000  // Synchronize GPTM Timer 7
N#define TIMER_SYNC_SYNCT7_NONE  0x00000000  // GPT7 is not affected
N#define TIMER_SYNC_SYNCT7_TA    0x00004000  // A timeout event for Timer A of
N                                            // GPTM7 is triggered
N#define TIMER_SYNC_SYNCT7_TB    0x00008000  // A timeout event for Timer B of
N                                            // GPTM7 is triggered
N#define TIMER_SYNC_SYNCT7_TATB  0x0000C000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM7 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT1_M    0x0000C000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 1
N#define TIMER_SYNC_SYNCWT1_NONE 0x00000000  // GPTM 32/64-Bit Timer 1 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT1_TA   0x00004000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 1 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT1_TB   0x00008000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 1 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT1_TATB 0x0000C000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 1 is triggered
N#define TIMER_SYNC_SYNCWT0_M    0x00003000  // Synchronize GPTM 32/64-Bit Timer
N                                            // 0
N#define TIMER_SYNC_SYNCWT0_NONE 0x00000000  // GPTM 32/64-Bit Timer 0 is not
N                                            // affected
N#define TIMER_SYNC_SYNCWT0_TA   0x00001000  // A timeout event for Timer A of
N                                            // GPTM 32/64-Bit Timer 0 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT0_TB   0x00002000  // A timeout event for Timer B of
N                                            // GPTM 32/64-Bit Timer 0 is
N                                            // triggered
N#define TIMER_SYNC_SYNCWT0_TATB 0x00003000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 32/64-Bit
N                                            // Timer 0 is triggered
N#define TIMER_SYNC_SYNCT6_M     0x00003000  // Synchronize GPTM Timer 6
N#define TIMER_SYNC_SYNCT6_NONE  0x00000000  // GPTM6 is not affected
N#define TIMER_SYNC_SYNCT6_TA    0x00001000  // A timeout event for Timer A of
N                                            // GPTM6 is triggered
N#define TIMER_SYNC_SYNCT6_TB    0x00002000  // A timeout event for Timer B of
N                                            // GPTM6 is triggered
N#define TIMER_SYNC_SYNCT6_TATB  0x00003000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM6 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT5_M     0x00000C00  // Synchronize GPTM Timer 5
N#define TIMER_SYNC_SYNCT5_NONE  0x00000000  // GPTM5 is not affected
N#define TIMER_SYNC_SYNCT5_TA    0x00000400  // A timeout event for Timer A of
N                                            // GPTM5 is triggered
N#define TIMER_SYNC_SYNCT5_TB    0x00000800  // A timeout event for Timer B of
N                                            // GPTM5 is triggered
N#define TIMER_SYNC_SYNCT5_TATB  0x00000C00  // A timeout event for both Timer A
N                                            // and Timer B of GPTM5 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT4_M     0x00000300  // Synchronize GPTM Timer 4
N#define TIMER_SYNC_SYNCT4_NONE  0x00000000  // GPTM4 is not affected
N#define TIMER_SYNC_SYNCT4_TA    0x00000100  // A timeout event for Timer A of
N                                            // GPTM4 is triggered
N#define TIMER_SYNC_SYNCT4_TB    0x00000200  // A timeout event for Timer B of
N                                            // GPTM4 is triggered
N#define TIMER_SYNC_SYNCT4_TATB  0x00000300  // A timeout event for both Timer A
N                                            // and Timer B of GPTM4 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT3_M     0x000000C0  // Synchronize GPTM Timer 3
N#define TIMER_SYNC_SYNCT3_NONE  0x00000000  // GPTM3 is not affected
N#define TIMER_SYNC_SYNCT3_TA    0x00000040  // A timeout event for Timer A of
N                                            // GPTM3 is triggered
N#define TIMER_SYNC_SYNCT3_TB    0x00000080  // A timeout event for Timer B of
N                                            // GPTM3 is triggered
N#define TIMER_SYNC_SYNCT3_TATB  0x000000C0  // A timeout event for both Timer A
N                                            // and Timer B of GPTM3 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT2_M     0x00000030  // Synchronize GPTM Timer 2
N#define TIMER_SYNC_SYNCT2_NONE  0x00000000  // GPTM2 is not affected
N#define TIMER_SYNC_SYNCT2_TA    0x00000010  // A timeout event for Timer A of
N                                            // GPTM2 is triggered
N#define TIMER_SYNC_SYNCT2_TB    0x00000020  // A timeout event for Timer B of
N                                            // GPTM2 is triggered
N#define TIMER_SYNC_SYNCT2_TATB  0x00000030  // A timeout event for both Timer A
N                                            // and Timer B of GPTM2 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT1_M     0x0000000C  // Synchronize GPTM Timer 1
N#define TIMER_SYNC_SYNCT1_NONE  0x00000000  // GPTM1 is not affected
N#define TIMER_SYNC_SYNCT1_TA    0x00000004  // A timeout event for Timer A of
N                                            // GPTM1 is triggered
N#define TIMER_SYNC_SYNCT1_TB    0x00000008  // A timeout event for Timer B of
N                                            // GPTM1 is triggered
N#define TIMER_SYNC_SYNCT1_TATB  0x0000000C  // A timeout event for both Timer A
N                                            // and Timer B of GPTM1 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT0_M     0x00000003  // Synchronize GPTM Timer 0
N#define TIMER_SYNC_SYNCT0_NONE  0x00000000  // GPTM0 is not affected
N#define TIMER_SYNC_SYNCT0_TA    0x00000001  // A timeout event for Timer A of
N                                            // GPTM0 is triggered
N#define TIMER_SYNC_SYNCT0_TB    0x00000002  // A timeout event for Timer B of
N                                            // GPTM0 is triggered
N#define TIMER_SYNC_SYNCT0_TATB  0x00000003  // A timeout event for both Timer A
N                                            // and Timer B of GPTM0 is
N                                            // triggered
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_IMR register.
N//
N//*****************************************************************************
N#define TIMER_IMR_WUEIM         0x00010000  // 32/64-Bit Wide GPTM Write Update
N                                            // Error Interrupt Mask
N#define TIMER_IMR_DMABIM        0x00002000  // GPTM Timer B DMA Done Interrupt
N                                            // Mask
N#define TIMER_IMR_TBMIM         0x00000800  // GPTM Timer B Match Interrupt
N                                            // Mask
N#define TIMER_IMR_CBEIM         0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Interrupt Mask
N#define TIMER_IMR_CBMIM         0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Interrupt Mask
N#define TIMER_IMR_TBTOIM        0x00000100  // GPTM Timer B Time-Out Interrupt
N                                            // Mask
N#define TIMER_IMR_DMAAIM        0x00000020  // GPTM Timer A DMA Done Interrupt
N                                            // Mask
N#define TIMER_IMR_TAMIM         0x00000010  // GPTM Timer A Match Interrupt
N                                            // Mask
N#define TIMER_IMR_RTCIM         0x00000008  // GPTM RTC Interrupt Mask
N#define TIMER_IMR_CAEIM         0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Interrupt Mask
N#define TIMER_IMR_CAMIM         0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Interrupt Mask
N#define TIMER_IMR_TATOIM        0x00000001  // GPTM Timer A Time-Out Interrupt
N                                            // Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_RIS register.
N//
N//*****************************************************************************
N#define TIMER_RIS_WUERIS        0x00010000  // 32/64-Bit Wide GPTM Write Update
N                                            // Error Raw Interrupt Status
N#define TIMER_RIS_DMABRIS       0x00002000  // GPTM Timer B DMA Done Raw
N                                            // Interrupt Status
N#define TIMER_RIS_TBMRIS        0x00000800  // GPTM Timer B Match Raw Interrupt
N#define TIMER_RIS_CBERIS        0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Raw Interrupt
N#define TIMER_RIS_CBMRIS        0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Raw Interrupt
N#define TIMER_RIS_TBTORIS       0x00000100  // GPTM Timer B Time-Out Raw
N                                            // Interrupt
N#define TIMER_RIS_DMAARIS       0x00000020  // GPTM Timer A DMA Done Raw
N                                            // Interrupt Status
N#define TIMER_RIS_TAMRIS        0x00000010  // GPTM Timer A Match Raw Interrupt
N#define TIMER_RIS_RTCRIS        0x00000008  // GPTM RTC Raw Interrupt
N#define TIMER_RIS_CAERIS        0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Raw Interrupt
N#define TIMER_RIS_CAMRIS        0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Raw Interrupt
N#define TIMER_RIS_TATORIS       0x00000001  // GPTM Timer A Time-Out Raw
N                                            // Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_MIS register.
N//
N//*****************************************************************************
N#define TIMER_MIS_WUEMIS        0x00010000  // 32/64-Bit Wide GPTM Write Update
N                                            // Error Masked Interrupt Status
N#define TIMER_MIS_DMABMIS       0x00002000  // GPTM Timer B DMA Done Masked
N                                            // Interrupt
N#define TIMER_MIS_TBMMIS        0x00000800  // GPTM Timer B Match Masked
N                                            // Interrupt
N#define TIMER_MIS_CBEMIS        0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Masked Interrupt
N#define TIMER_MIS_CBMMIS        0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Masked Interrupt
N#define TIMER_MIS_TBTOMIS       0x00000100  // GPTM Timer B Time-Out Masked
N                                            // Interrupt
N#define TIMER_MIS_DMAAMIS       0x00000020  // GPTM Timer A DMA Done Masked
N                                            // Interrupt
N#define TIMER_MIS_TAMMIS        0x00000010  // GPTM Timer A Match Masked
N                                            // Interrupt
N#define TIMER_MIS_RTCMIS        0x00000008  // GPTM RTC Masked Interrupt
N#define TIMER_MIS_CAEMIS        0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Masked Interrupt
N#define TIMER_MIS_CAMMIS        0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Masked Interrupt
N#define TIMER_MIS_TATOMIS       0x00000001  // GPTM Timer A Time-Out Masked
N                                            // Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_ICR register.
N//
N//*****************************************************************************
N#define TIMER_ICR_WUECINT       0x00010000  // 32/64-Bit Wide GPTM Write Update
N                                            // Error Interrupt Clear
N#define TIMER_ICR_DMABINT       0x00002000  // GPTM Timer B DMA Done Interrupt
N                                            // Clear
N#define TIMER_ICR_TBMCINT       0x00000800  // GPTM Timer B Match Interrupt
N                                            // Clear
N#define TIMER_ICR_CBECINT       0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Interrupt Clear
N#define TIMER_ICR_CBMCINT       0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Interrupt Clear
N#define TIMER_ICR_TBTOCINT      0x00000100  // GPTM Timer B Time-Out Interrupt
N                                            // Clear
N#define TIMER_ICR_DMAAINT       0x00000020  // GPTM Timer A DMA Done Interrupt
N                                            // Clear
N#define TIMER_ICR_TAMCINT       0x00000010  // GPTM Timer A Match Interrupt
N                                            // Clear
N#define TIMER_ICR_RTCCINT       0x00000008  // GPTM RTC Interrupt Clear
N#define TIMER_ICR_CAECINT       0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Interrupt Clear
N#define TIMER_ICR_CAMCINT       0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Interrupt Clear
N#define TIMER_ICR_TATOCINT      0x00000001  // GPTM Timer A Time-Out Raw
N                                            // Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAILR register.
N//
N//*****************************************************************************
N#define TIMER_TAILR_M           0xFFFFFFFF  // GPTM Timer A Interval Load
N                                            // Register
N#define TIMER_TAILR_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBILR register.
N//
N//*****************************************************************************
N#define TIMER_TBILR_M           0xFFFFFFFF  // GPTM Timer B Interval Load
N                                            // Register
N#define TIMER_TBILR_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAMATCHR
N// register.
N//
N//*****************************************************************************
N#define TIMER_TAMATCHR_TAMR_M   0xFFFFFFFF  // GPTM Timer A Match Register
N#define TIMER_TAMATCHR_TAMR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBMATCHR
N// register.
N//
N//*****************************************************************************
N#define TIMER_TBMATCHR_TBMR_M   0xFFFFFFFF  // GPTM Timer B Match Register
N#define TIMER_TBMATCHR_TBMR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPR register.
N//
N//*****************************************************************************
N#define TIMER_TAPR_TAPSRH_M     0x0000FF00  // GPTM Timer A Prescale High Byte
N#define TIMER_TAPR_TAPSR_M      0x000000FF  // GPTM Timer A Prescale
N#define TIMER_TAPR_TAPSRH_S     8
N#define TIMER_TAPR_TAPSR_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPR register.
N//
N//*****************************************************************************
N#define TIMER_TBPR_TBPSRH_M     0x0000FF00  // GPTM Timer B Prescale High Byte
N#define TIMER_TBPR_TBPSR_M      0x000000FF  // GPTM Timer B Prescale
N#define TIMER_TBPR_TBPSRH_S     8
N#define TIMER_TBPR_TBPSR_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPMR register.
N//
N//*****************************************************************************
N#define TIMER_TAPMR_TAPSMRH_M   0x0000FF00  // GPTM Timer A Prescale Match High
N                                            // Byte
N#define TIMER_TAPMR_TAPSMR_M    0x000000FF  // GPTM TimerA Prescale Match
N#define TIMER_TAPMR_TAPSMRH_S   8
N#define TIMER_TAPMR_TAPSMR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPMR register.
N//
N//*****************************************************************************
N#define TIMER_TBPMR_TBPSMRH_M   0x0000FF00  // GPTM Timer B Prescale Match High
N                                            // Byte
N#define TIMER_TBPMR_TBPSMR_M    0x000000FF  // GPTM TimerB Prescale Match
N#define TIMER_TBPMR_TBPSMRH_S   8
N#define TIMER_TBPMR_TBPSMR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAR register.
N//
N//*****************************************************************************
N#define TIMER_TAR_M             0xFFFFFFFF  // GPTM Timer A Register
N#define TIMER_TAR_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBR register.
N//
N//*****************************************************************************
N#define TIMER_TBR_M             0xFFFFFFFF  // GPTM Timer B Register
N#define TIMER_TBR_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAV register.
N//
N//*****************************************************************************
N#define TIMER_TAV_M             0xFFFFFFFF  // GPTM Timer A Value
N#define TIMER_TAV_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBV register.
N//
N//*****************************************************************************
N#define TIMER_TBV_M             0xFFFFFFFF  // GPTM Timer B Value
N#define TIMER_TBV_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_RTCPD register.
N//
N//*****************************************************************************
N#define TIMER_RTCPD_RTCPD_M     0x0000FFFF  // RTC Predivide Counter Value
N#define TIMER_RTCPD_RTCPD_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPS register.
N//
N//*****************************************************************************
N#define TIMER_TAPS_PSS_M        0x0000FFFF  // GPTM Timer A Prescaler Snapshot
N#define TIMER_TAPS_PSS_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPS register.
N//
N//*****************************************************************************
N#define TIMER_TBPS_PSS_M        0x0000FFFF  // GPTM Timer A Prescaler Value
N#define TIMER_TBPS_PSS_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPV register.
N//
N//*****************************************************************************
N#define TIMER_TAPV_PSV_M        0x0000FFFF  // GPTM Timer A Prescaler Value
N#define TIMER_TAPV_PSV_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPV register.
N//
N//*****************************************************************************
N#define TIMER_TBPV_PSV_M        0x0000FFFF  // GPTM Timer B Prescaler Value
N#define TIMER_TBPV_PSV_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_DMAEV register.
N//
N//*****************************************************************************
N#define TIMER_DMAEV_TBMDMAEN    0x00000800  // GPTM B Mode Match Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_CBEDMAEN    0x00000400  // GPTM B Capture Event DMA Trigger
N                                            // Enable
N#define TIMER_DMAEV_CBMDMAEN    0x00000200  // GPTM B Capture Match Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_TBTODMAEN   0x00000100  // GPTM B Time-Out Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_TAMDMAEN    0x00000010  // GPTM A Mode Match Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_RTCDMAEN    0x00000008  // GPTM A RTC Match Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_CAEDMAEN    0x00000004  // GPTM A Capture Event DMA Trigger
N                                            // Enable
N#define TIMER_DMAEV_CAMDMAEN    0x00000002  // GPTM A Capture Match Event DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_TATODMAEN   0x00000001  // GPTM A Time-Out Event DMA
N                                            // Trigger Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_ADCEV register.
N//
N//*****************************************************************************
N#define TIMER_ADCEV_TBMADCEN    0x00000800  // GPTM B Mode Match Event ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_CBEADCEN    0x00000400  // GPTM B Capture Event ADC Trigger
N                                            // Enable
N#define TIMER_ADCEV_CBMADCEN    0x00000200  // GPTM B Capture Match Event ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_TBTOADCEN   0x00000100  // GPTM B Time-Out Event ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_TAMADCEN    0x00000010  // GPTM A Mode Match Event ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_RTCADCEN    0x00000008  // GPTM RTC Match Event ADC Trigger
N                                            // Enable
N#define TIMER_ADCEV_CAEADCEN    0x00000004  // GPTM A Capture Event ADC Trigger
N                                            // Enable
N#define TIMER_ADCEV_CAMADCEN    0x00000002  // GPTM A Capture Match Event ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_TATOADCEN   0x00000001  // GPTM A Time-Out Event ADC
N                                            // Trigger Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_PP register.
N//
N//*****************************************************************************
N#define TIMER_PP_ALTCLK         0x00000040  // Alternate Clock Source
N#define TIMER_PP_SYNCCNT        0x00000020  // Synchronize Start
N#define TIMER_PP_CHAIN          0x00000010  // Chain with Other Timers
N#define TIMER_PP_SIZE_M         0x0000000F  // Count Size
N#define TIMER_PP_SIZE_16        0x00000000  // Timer A and Timer B counters are
N                                            // 16 bits each with an 8-bit
N                                            // prescale counter
N#define TIMER_PP_SIZE_32        0x00000001  // Timer A and Timer B counters are
N                                            // 32 bits each with a 16-bit
N                                            // prescale counter
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_CC register.
N//
N//*****************************************************************************
N#define TIMER_CC_ALTCLK         0x00000001  // Alternate Clock Source
N
N#endif // __HW_TIMER_H__
L 27 "..\inc_h\system.h" 2
N#include <i2c.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\i2c.h" 1
N//*****************************************************************************
N//
N// i2c.h - Prototypes for the I2C Driver.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_I2C_H__
N#define __DRIVERLIB_I2C_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Defines for the API.
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// Interrupt defines.
N//
N//*****************************************************************************
N#define I2C_INT_MASTER          0x00000001
N#define I2C_INT_SLAVE           0x00000002
N
N//*****************************************************************************
N//
N// I2C Master commands.
N//
N//*****************************************************************************
N#define I2C_MASTER_CMD_SINGLE_SEND                                            \
N                                0x00000007
X#define I2C_MASTER_CMD_SINGLE_SEND                                                                            0x00000007
N#define I2C_MASTER_CMD_SINGLE_RECEIVE                                         \
N                                0x00000007
X#define I2C_MASTER_CMD_SINGLE_RECEIVE                                                                         0x00000007
N#define I2C_MASTER_CMD_BURST_SEND_START                                       \
N                                0x00000003
X#define I2C_MASTER_CMD_BURST_SEND_START                                                                       0x00000003
N#define I2C_MASTER_CMD_BURST_SEND_CONT                                        \
N                                0x00000001
X#define I2C_MASTER_CMD_BURST_SEND_CONT                                                                        0x00000001
N#define I2C_MASTER_CMD_BURST_SEND_FINISH                                      \
N                                0x00000005
X#define I2C_MASTER_CMD_BURST_SEND_FINISH                                                                      0x00000005
N#define I2C_MASTER_CMD_BURST_SEND_STOP                                        \
N                                0x00000004
X#define I2C_MASTER_CMD_BURST_SEND_STOP                                                                        0x00000004
N#define I2C_MASTER_CMD_BURST_SEND_ERROR_STOP                                  \
N                                0x00000004
X#define I2C_MASTER_CMD_BURST_SEND_ERROR_STOP                                                                  0x00000004
N#define I2C_MASTER_CMD_BURST_RECEIVE_START                                    \
N                                0x0000000b
X#define I2C_MASTER_CMD_BURST_RECEIVE_START                                                                    0x0000000b
N#define I2C_MASTER_CMD_BURST_RECEIVE_CONT                                     \
N                                0x00000009
X#define I2C_MASTER_CMD_BURST_RECEIVE_CONT                                                                     0x00000009
N#define I2C_MASTER_CMD_BURST_RECEIVE_FINISH                                   \
N                                0x00000005
X#define I2C_MASTER_CMD_BURST_RECEIVE_FINISH                                                                   0x00000005
N#define I2C_MASTER_CMD_BURST_RECEIVE_ERROR_STOP                               \
N                                0x00000004
X#define I2C_MASTER_CMD_BURST_RECEIVE_ERROR_STOP                                                               0x00000004
N#define I2C_MASTER_CMD_QUICK_COMMAND                                          \
N                                0x00000027
X#define I2C_MASTER_CMD_QUICK_COMMAND                                                                          0x00000027
N#define I2C_MASTER_CMD_HS_MASTER_CODE_SEND                                    \
N                                0x00000013
X#define I2C_MASTER_CMD_HS_MASTER_CODE_SEND                                                                    0x00000013
N#define I2C_MASTER_CMD_FIFO_SINGLE_SEND                                       \
N                                0x00000046
X#define I2C_MASTER_CMD_FIFO_SINGLE_SEND                                                                       0x00000046
N#define I2C_MASTER_CMD_FIFO_SINGLE_RECEIVE                                    \
N                                0x00000046
X#define I2C_MASTER_CMD_FIFO_SINGLE_RECEIVE                                                                    0x00000046
N#define I2C_MASTER_CMD_FIFO_BURST_SEND_START                                  \
N                                0x00000042
X#define I2C_MASTER_CMD_FIFO_BURST_SEND_START                                                                  0x00000042
N#define I2C_MASTER_CMD_FIFO_BURST_SEND_CONT                                   \
N                                0x00000040
X#define I2C_MASTER_CMD_FIFO_BURST_SEND_CONT                                                                   0x00000040
N#define I2C_MASTER_CMD_FIFO_BURST_SEND_FINISH                                 \
N                                0x00000044
X#define I2C_MASTER_CMD_FIFO_BURST_SEND_FINISH                                                                 0x00000044
N#define I2C_MASTER_CMD_FIFO_BURST_SEND_ERROR_STOP                             \
N                                0x00000004
X#define I2C_MASTER_CMD_FIFO_BURST_SEND_ERROR_STOP                                                             0x00000004
N#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_START                               \
N                                0x0000004a
X#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_START                                                               0x0000004a
N#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_CONT                                \
N                                0x00000048
X#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_CONT                                                                0x00000048
N#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_FINISH                              \
N                                0x00000044
X#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_FINISH                                                              0x00000044
N#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_ERROR_STOP                          \
N                                0x00000004
X#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_ERROR_STOP                                                          0x00000004
N
N//*****************************************************************************
N//
N// I2C Master glitch filter configuration.
N//
N//*****************************************************************************
N#define I2C_MASTER_GLITCH_FILTER_DISABLED                                     \
N                                0
X#define I2C_MASTER_GLITCH_FILTER_DISABLED                                                                     0
N#define I2C_MASTER_GLITCH_FILTER_1                                            \
N                                0x00010000
X#define I2C_MASTER_GLITCH_FILTER_1                                                                            0x00010000
N#define I2C_MASTER_GLITCH_FILTER_2                                            \
N                                0x00020000
X#define I2C_MASTER_GLITCH_FILTER_2                                                                            0x00020000
N#define I2C_MASTER_GLITCH_FILTER_3                                            \
N                                0x00030000
X#define I2C_MASTER_GLITCH_FILTER_3                                                                            0x00030000
N#define I2C_MASTER_GLITCH_FILTER_4                                            \
N                                0x00040000
X#define I2C_MASTER_GLITCH_FILTER_4                                                                            0x00040000
N#define I2C_MASTER_GLITCH_FILTER_8                                            \
N                                0x00050000
X#define I2C_MASTER_GLITCH_FILTER_8                                                                            0x00050000
N#define I2C_MASTER_GLITCH_FILTER_16                                           \
N                                0x00060000
X#define I2C_MASTER_GLITCH_FILTER_16                                                                           0x00060000
N#define I2C_MASTER_GLITCH_FILTER_32                                           \
N                                0x00070000
X#define I2C_MASTER_GLITCH_FILTER_32                                                                           0x00070000
N
N//*****************************************************************************
N//
N// I2C Master error status.
N//
N//*****************************************************************************
N#define I2C_MASTER_ERR_NONE     0
N#define I2C_MASTER_ERR_ADDR_ACK 0x00000004
N#define I2C_MASTER_ERR_DATA_ACK 0x00000008
N#define I2C_MASTER_ERR_ARB_LOST 0x00000010
N#define I2C_MASTER_ERR_CLK_TOUT 0x00000080
N
N//*****************************************************************************
N//
N// I2C Slave action requests
N//
N//*****************************************************************************
N#define I2C_SLAVE_ACT_NONE      0
N#define I2C_SLAVE_ACT_RREQ      0x00000001  // Master has sent data
N#define I2C_SLAVE_ACT_TREQ      0x00000002  // Master has requested data
N#define I2C_SLAVE_ACT_RREQ_FBR  0x00000005  // Master has sent first byte
N#define I2C_SLAVE_ACT_OWN2SEL   0x00000008  // Master requested secondary slave
N#define I2C_SLAVE_ACT_QCMD      0x00000010  // Master has sent a Quick Command
N#define I2C_SLAVE_ACT_QCMD_DATA 0x00000020  // Master Quick Command value
N
N//*****************************************************************************
N//
N// Miscellaneous I2C driver definitions.
N//
N//*****************************************************************************
N#define I2C_MASTER_MAX_RETRIES  1000        // Number of retries
N
N//*****************************************************************************
N//
N// I2C Master interrupts.
N//
N//*****************************************************************************
N#define I2C_MASTER_INT_RX_FIFO_FULL                                           \
N                                0x00000800  // RX FIFO Full Interrupt
X#define I2C_MASTER_INT_RX_FIFO_FULL                                                                           0x00000800  
N#define I2C_MASTER_INT_TX_FIFO_EMPTY                                          \
N                                0x00000400  // TX FIFO Empty Interrupt
X#define I2C_MASTER_INT_TX_FIFO_EMPTY                                                                          0x00000400  
N#define I2C_MASTER_INT_RX_FIFO_REQ                                            \
N                                0x00000200  // RX FIFO Request Interrupt
X#define I2C_MASTER_INT_RX_FIFO_REQ                                                                            0x00000200  
N#define I2C_MASTER_INT_TX_FIFO_REQ                                            \
N                                0x00000100  // TX FIFO Request Interrupt
X#define I2C_MASTER_INT_TX_FIFO_REQ                                                                            0x00000100  
N#define I2C_MASTER_INT_ARB_LOST                                               \
N                                0x00000080  // Arb Lost Interrupt
X#define I2C_MASTER_INT_ARB_LOST                                                                               0x00000080  
N#define I2C_MASTER_INT_STOP     0x00000040  // Stop Condition Interrupt
N#define I2C_MASTER_INT_START    0x00000020  // Start Condition Interrupt
N#define I2C_MASTER_INT_NACK     0x00000010  // Addr/Data NACK Interrupt
N#define I2C_MASTER_INT_TX_DMA_DONE                                            \
N                                0x00000008  // TX DMA Complete Interrupt
X#define I2C_MASTER_INT_TX_DMA_DONE                                                                            0x00000008  
N#define I2C_MASTER_INT_RX_DMA_DONE                                            \
N                                0x00000004  // RX DMA Complete Interrupt
X#define I2C_MASTER_INT_RX_DMA_DONE                                                                            0x00000004  
N#define I2C_MASTER_INT_TIMEOUT  0x00000002  // Clock Timeout Interrupt
N#define I2C_MASTER_INT_DATA     0x00000001  // Data Interrupt
N
N//*****************************************************************************
N//
N// I2C Slave interrupts.
N//
N//*****************************************************************************
N#define I2C_SLAVE_INT_RX_FIFO_FULL                                            \
N                                0x00000100  // RX FIFO Full Interrupt
X#define I2C_SLAVE_INT_RX_FIFO_FULL                                                                            0x00000100  
N#define I2C_SLAVE_INT_TX_FIFO_EMPTY                                           \
N                                0x00000080  // TX FIFO Empty Interrupt
X#define I2C_SLAVE_INT_TX_FIFO_EMPTY                                                                           0x00000080  
N#define I2C_SLAVE_INT_RX_FIFO_REQ                                             \
N                                0x00000040  // RX FIFO Request Interrupt
X#define I2C_SLAVE_INT_RX_FIFO_REQ                                                                             0x00000040  
N#define I2C_SLAVE_INT_TX_FIFO_REQ                                             \
N                                0x00000020  // TX FIFO Request Interrupt
X#define I2C_SLAVE_INT_TX_FIFO_REQ                                                                             0x00000020  
N#define I2C_SLAVE_INT_TX_DMA_DONE                                             \
N                                0x00000010  // TX DMA Complete Interrupt
X#define I2C_SLAVE_INT_TX_DMA_DONE                                                                             0x00000010  
N#define I2C_SLAVE_INT_RX_DMA_DONE                                             \
N                                0x00000008  // RX DMA Complete Interrupt
X#define I2C_SLAVE_INT_RX_DMA_DONE                                                                             0x00000008  
N#define I2C_SLAVE_INT_STOP      0x00000004  // Stop Condition Interrupt
N#define I2C_SLAVE_INT_START     0x00000002  // Start Condition Interrupt
N#define I2C_SLAVE_INT_DATA      0x00000001  // Data Interrupt
N
N//*****************************************************************************
N//
N// I2C Slave FIFO configuration macros.
N//
N//*****************************************************************************
N#define I2C_SLAVE_TX_FIFO_ENABLE                                              \
N                                0x00000002
X#define I2C_SLAVE_TX_FIFO_ENABLE                                                                              0x00000002
N#define I2C_SLAVE_RX_FIFO_ENABLE                                              \
N                                0x00000004
X#define I2C_SLAVE_RX_FIFO_ENABLE                                                                              0x00000004
N
N//*****************************************************************************
N//
N// I2C FIFO configuration macros.
N//
N//*****************************************************************************
N#define I2C_FIFO_CFG_TX_MASTER  0x00000000
N#define I2C_FIFO_CFG_TX_SLAVE   0x00008000
N#define I2C_FIFO_CFG_RX_MASTER  0x00000000
N#define I2C_FIFO_CFG_RX_SLAVE   0x80000000
N#define I2C_FIFO_CFG_TX_MASTER_DMA                                            \
N                                0x00002000
X#define I2C_FIFO_CFG_TX_MASTER_DMA                                                                            0x00002000
N#define I2C_FIFO_CFG_TX_SLAVE_DMA                                             \
N                                0x0000a000
X#define I2C_FIFO_CFG_TX_SLAVE_DMA                                                                             0x0000a000
N#define I2C_FIFO_CFG_RX_MASTER_DMA                                            \
N                                0x20000000
X#define I2C_FIFO_CFG_RX_MASTER_DMA                                                                            0x20000000
N#define I2C_FIFO_CFG_RX_SLAVE_DMA                                             \
N                                0xa0000000
X#define I2C_FIFO_CFG_RX_SLAVE_DMA                                                                             0xa0000000
N#define I2C_FIFO_CFG_TX_NO_TRIG 0x00000000
N#define I2C_FIFO_CFG_TX_TRIG_1  0x00000001
N#define I2C_FIFO_CFG_TX_TRIG_2  0x00000002
N#define I2C_FIFO_CFG_TX_TRIG_3  0x00000003
N#define I2C_FIFO_CFG_TX_TRIG_4  0x00000004
N#define I2C_FIFO_CFG_TX_TRIG_5  0x00000005
N#define I2C_FIFO_CFG_TX_TRIG_6  0x00000006
N#define I2C_FIFO_CFG_TX_TRIG_7  0x00000007
N#define I2C_FIFO_CFG_TX_TRIG_8  0x00000008
N#define I2C_FIFO_CFG_RX_NO_TRIG 0x00000000
N#define I2C_FIFO_CFG_RX_TRIG_1  0x00010000
N#define I2C_FIFO_CFG_RX_TRIG_2  0x00020000
N#define I2C_FIFO_CFG_RX_TRIG_3  0x00030000
N#define I2C_FIFO_CFG_RX_TRIG_4  0x00040000
N#define I2C_FIFO_CFG_RX_TRIG_5  0x00050000
N#define I2C_FIFO_CFG_RX_TRIG_6  0x00060000
N#define I2C_FIFO_CFG_RX_TRIG_7  0x00070000
N#define I2C_FIFO_CFG_RX_TRIG_8  0x00080000
N
N//*****************************************************************************
N//
N// I2C FIFO status.
N//
N//*****************************************************************************
N#define I2C_FIFO_RX_BELOW_TRIG_LEVEL                                          \
N                                0x00040000
X#define I2C_FIFO_RX_BELOW_TRIG_LEVEL                                                                          0x00040000
N#define I2C_FIFO_RX_FULL        0x00020000
N#define I2C_FIFO_RX_EMPTY       0x00010000
N#define I2C_FIFO_TX_BELOW_TRIG_LEVEL                                          \
N                                0x00000004
X#define I2C_FIFO_TX_BELOW_TRIG_LEVEL                                                                          0x00000004
N#define I2C_FIFO_TX_FULL        0x00000002
N#define I2C_FIFO_TX_EMPTY       0x00000001
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void I2CIntRegister(uint32_t ui32Base, void(pfnHandler)(void));
Nextern void I2CIntUnregister(uint32_t ui32Base);
Nextern void I2CTxFIFOConfigSet(uint32_t ui32Base, uint32_t ui32Config);
Nextern void I2CTxFIFOFlush(uint32_t ui32Base);
Nextern void I2CRxFIFOConfigSet(uint32_t ui32Base, uint32_t ui32Config);
Nextern void I2CRxFIFOFlush(uint32_t ui32Base);
Nextern uint32_t I2CFIFOStatus(uint32_t ui32Base);
Nextern void I2CFIFODataPut(uint32_t ui32Base, uint8_t ui8Data);
Nextern uint32_t I2CFIFODataPutNonBlocking(uint32_t ui32Base,
N                                          uint8_t ui8Data);
Nextern uint32_t I2CFIFODataGet(uint32_t ui32Base);
Nextern uint32_t I2CFIFODataGetNonBlocking(uint32_t ui32Base,
N                                          uint8_t *pui8Data);
Nextern void I2CMasterBurstLengthSet(uint32_t ui32Base,
N                                    uint8_t ui8Length);
Nextern uint32_t I2CMasterBurstCountGet(uint32_t ui32Base);
Nextern void I2CMasterGlitchFilterConfigSet(uint32_t ui32Base,
N                                           uint32_t ui32Config);
Nextern void I2CSlaveFIFOEnable(uint32_t ui32Base, uint32_t ui32Config);
Nextern void I2CSlaveFIFODisable(uint32_t ui32Base);
Nextern bool I2CMasterBusBusy(uint32_t ui32Base);
Xextern _Bool I2CMasterBusBusy(uint32_t ui32Base);
Nextern bool I2CMasterBusy(uint32_t ui32Base);
Xextern _Bool I2CMasterBusy(uint32_t ui32Base);
Nextern void I2CMasterControl(uint32_t ui32Base, uint32_t ui32Cmd);
Nextern uint32_t I2CMasterDataGet(uint32_t ui32Base);
Nextern void I2CMasterDataPut(uint32_t ui32Base, uint8_t ui8Data);
Nextern void I2CMasterDisable(uint32_t ui32Base);
Nextern void I2CMasterEnable(uint32_t ui32Base);
Nextern uint32_t I2CMasterErr(uint32_t ui32Base);
Nextern void I2CMasterInitExpClk(uint32_t ui32Base, uint32_t ui32I2CClk,
N                                bool bFast);
X                                _Bool bFast);
Nextern void I2CMasterIntClear(uint32_t ui32Base);
Nextern void I2CMasterIntDisable(uint32_t ui32Base);
Nextern void I2CMasterIntEnable(uint32_t ui32Base);
Nextern bool I2CMasterIntStatus(uint32_t ui32Base, bool bMasked);
Xextern _Bool I2CMasterIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void I2CMasterIntEnableEx(uint32_t ui32Base,
N                                 uint32_t ui32IntFlags);
Nextern void I2CMasterIntDisableEx(uint32_t ui32Base,
N                                  uint32_t ui32IntFlags);
Nextern uint32_t I2CMasterIntStatusEx(uint32_t ui32Base,
N                                       bool bMasked);
X                                       _Bool bMasked);
Nextern void I2CMasterIntClearEx(uint32_t ui32Base,
N                                uint32_t ui32IntFlags);
Nextern void I2CMasterTimeoutSet(uint32_t ui32Base, uint32_t ui32Value);
Nextern void I2CSlaveACKOverride(uint32_t ui32Base, bool bEnable);
Xextern void I2CSlaveACKOverride(uint32_t ui32Base, _Bool bEnable);
Nextern void I2CSlaveACKValueSet(uint32_t ui32Base, bool bACK);
Xextern void I2CSlaveACKValueSet(uint32_t ui32Base, _Bool bACK);
Nextern uint32_t I2CMasterLineStateGet(uint32_t ui32Base);
Nextern void I2CMasterSlaveAddrSet(uint32_t ui32Base,
N                                  uint8_t ui8SlaveAddr,
N                                  bool bReceive);
X                                  _Bool bReceive);
Nextern uint32_t I2CSlaveDataGet(uint32_t ui32Base);
Nextern void I2CSlaveDataPut(uint32_t ui32Base, uint8_t ui8Data);
Nextern void I2CSlaveDisable(uint32_t ui32Base);
Nextern void I2CSlaveEnable(uint32_t ui32Base);
Nextern void I2CSlaveInit(uint32_t ui32Base, uint8_t ui8SlaveAddr);
Nextern void I2CSlaveAddressSet(uint32_t ui32Base, uint8_t ui8AddrNum,
N                                 uint8_t ui8SlaveAddr);
Nextern void I2CSlaveIntClear(uint32_t ui32Base);
Nextern void I2CSlaveIntDisable(uint32_t ui32Base);
Nextern void I2CSlaveIntEnable(uint32_t ui32Base);
Nextern void I2CSlaveIntClearEx(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void I2CSlaveIntDisableEx(uint32_t ui32Base,
N                                 uint32_t ui32IntFlags);
Nextern void I2CSlaveIntEnableEx(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern bool I2CSlaveIntStatus(uint32_t ui32Base, bool bMasked);
Xextern _Bool I2CSlaveIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern uint32_t I2CSlaveIntStatusEx(uint32_t ui32Base,
N                                      bool bMasked);
X                                      _Bool bMasked);
Nextern uint32_t I2CSlaveStatus(uint32_t ui32Base);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_I2C_H__
L 28 "..\inc_h\system.h" 2
N#include <can.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\can.h" 1
N//*****************************************************************************
N//
N// can.h - Defines and Macros for the CAN controller.
N//
N// Copyright (c) 2006-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_CAN_H__
N#define __DRIVERLIB_CAN_H__
N
N//*****************************************************************************
N//
N//! \addtogroup can_api
N//! @{
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Miscellaneous defines for Message ID Types
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// These are the flags used by the tCANMsgObject.ui32Flags value when calling
N// the CANMessageSet() and CANMessageGet() functions.
N//
N//*****************************************************************************
N
N//
N//! This indicates that transmit interrupts are enabled.
N//
N#define MSG_OBJ_TX_INT_ENABLE   0x00000001
N
N//
N//! This indicates that receive interrupts are enabled.
N//
N#define MSG_OBJ_RX_INT_ENABLE   0x00000002
N
N//
N//! This indicates that a message object is using an extended identifier.
N//
N#define MSG_OBJ_EXTENDED_ID     0x00000004
N
N//
N//! This indicates that a message object is using filtering based on the
N//! object's message identifier.
N//
N#define MSG_OBJ_USE_ID_FILTER   0x00000008
N
N//
N//! This indicates that new data was available in the message object.
N//
N#define MSG_OBJ_NEW_DATA        0x00000080
N
N//
N//! This indicates that data was lost since this message object was last
N//! read.
N//
N#define MSG_OBJ_DATA_LOST       0x00000100
N
N//
N//! This indicates that a message object uses or is using filtering
N//! based on the direction of the transfer.  If the direction filtering is
N//! used, then ID filtering must also be enabled.
N//
N#define MSG_OBJ_USE_DIR_FILTER  (0x00000010 | MSG_OBJ_USE_ID_FILTER)
N
N//
N//! This indicates that a message object uses or is using message
N//! identifier filtering based on the extended identifier.  If the extended
N//! identifier filtering is used, then ID filtering must also be enabled.
N//
N#define MSG_OBJ_USE_EXT_FILTER  (0x00000020 | MSG_OBJ_USE_ID_FILTER)
N
N//
N//! This indicates that a message object is a remote frame.
N//
N#define MSG_OBJ_REMOTE_FRAME    0x00000040
N
N//
N//! This indicates that this message object is part of a FIFO structure and
N//! not the final message object in a FIFO.
N//
N#define MSG_OBJ_FIFO            0x00000200
N
N//
N//! This indicates that a message object has no flags set.
N//
N#define MSG_OBJ_NO_FLAGS        0x00000000
N
N//*****************************************************************************
N//
N//! This define is used with the flag values to allow checking only status
N//! flags and not configuration flags.
N//
N//*****************************************************************************
N#define MSG_OBJ_STATUS_MASK     (MSG_OBJ_NEW_DATA | MSG_OBJ_DATA_LOST)
N
N//*****************************************************************************
N//
N//! The structure used for encapsulating all the items associated with a CAN
N//! message object in the CAN controller.
N//
N//*****************************************************************************
Ntypedef struct
N{
N    //
N    //! The CAN message identifier used for 11 or 29 bit identifiers.
N    //
N    uint32_t ui32MsgID;
N
N    //
N    //! The message identifier mask used when identifier filtering is enabled.
N    //
N    uint32_t ui32MsgIDMask;
N
N    //
N    //! This value holds various status flags and settings specified by
N    //! tCANObjFlags.
N    //
N    uint32_t ui32Flags;
N
N    //
N    //! This value is the number of bytes of data in the message object.
N    //
N    uint32_t ui32MsgLen;
N
N    //
N    //! This is a pointer to the message object's data.
N    //
N    uint8_t *pui8MsgData;
N}
NtCANMsgObject;
N
N//*****************************************************************************
N//
N//! This structure is used for encapsulating the values associated with setting
N//! up the bit timing for a CAN controller.  The structure is used when calling
N//! the CANGetBitTiming and CANSetBitTiming functions.
N//
N//*****************************************************************************
Ntypedef struct
N{
N    //
N    //! This value holds the sum of the Synchronization, Propagation, and Phase
N    //! Buffer 1 segments, measured in time quanta.  The valid values for this
N    //! setting range from 2 to 16.
N    //
N    uint32_t ui32SyncPropPhase1Seg;
N
N    //
N    //! This value holds the Phase Buffer 2 segment in time quanta.  The valid
N    //! values for this setting range from 1 to 8.
N    //
N    uint32_t ui32Phase2Seg;
N
N    //
N    //! This value holds the Resynchronization Jump Width in time quanta.  The
N    //! valid values for this setting range from 1 to 4.
N    //
N    uint32_t ui32SJW;
N
N    //
N    //! This value holds the CAN_CLK divider used to determine time quanta.
N    //! The valid values for this setting range from 1 to 1023.
N    //
N    uint32_t ui32QuantumPrescaler;
N}
NtCANBitClkParms;
N
N//*****************************************************************************
N//
N//! This data type is used to identify the interrupt status register.  This is
N//! used when calling the CANIntStatus() function.
N//
N//*****************************************************************************
Ntypedef enum
N{
N    //
N    //! Read the CAN interrupt status information.
N    //
N    CAN_INT_STS_CAUSE,
N
N    //
N    //! Read a message object's interrupt status.
N    //
N    CAN_INT_STS_OBJECT
N}
NtCANIntStsReg;
N
N//*****************************************************************************
N//
N//! This data type is used to identify which of several status registers to
N//! read when calling the CANStatusGet() function.
N//
N//*****************************************************************************
Ntypedef enum
N{
N    //
N    //! Read the full CAN controller status.
N    //
N    CAN_STS_CONTROL,
N
N    //
N    //! Read the full 32-bit mask of message objects with a transmit request
N    //! set.
N    //
N    CAN_STS_TXREQUEST,
N
N    //
N    //! Read the full 32-bit mask of message objects with new data available.
N    //
N    CAN_STS_NEWDAT,
N
N    //
N    //! Read the full 32-bit mask of message objects that are enabled.
N    //
N    CAN_STS_MSGVAL
N}
NtCANStsReg;
N
N//*****************************************************************************
N//
N// These definitions are used to specify interrupt sources to CANIntEnable()
N// and CANIntDisable().
N//
N//*****************************************************************************
N//
N//! This flag is used to allow a CAN controller to generate error
N//! interrupts.
N//
N#define CAN_INT_ERROR           0x00000008
N
N//
N//! This flag is used to allow a CAN controller to generate status
N//! interrupts.
N//
N#define CAN_INT_STATUS          0x00000004
N
N//
N//! This flag is used to allow a CAN controller to generate any CAN
N//! interrupts.  If this is not set, then no interrupts are generated
N//! by the CAN controller.
N//
N#define CAN_INT_MASTER          0x00000002
N
N//*****************************************************************************
N//
N//! This definition is used to determine the type of message object that is
N//! set up via a call to the CANMessageSet() API.
N//
N//*****************************************************************************
Ntypedef enum
N{
N    //
N    //! Transmit message object.
N    //
N    MSG_OBJ_TYPE_TX,
N
N    //
N    //! Transmit remote request message object
N    //
N    MSG_OBJ_TYPE_TX_REMOTE,
N
N    //
N    //! Receive message object.
N    //
N    MSG_OBJ_TYPE_RX,
N
N    //
N    //! Receive remote request message object.
N    //
N    MSG_OBJ_TYPE_RX_REMOTE,
N
N    //
N    //! Remote frame receive remote, with auto-transmit message object.
N    //
N    MSG_OBJ_TYPE_RXTX_REMOTE
N}
NtMsgObjType;
N
N//*****************************************************************************
N//
N// The following enumeration contains all error or status indicators that can
N// be returned when calling the CANStatusGet() function.
N//
N//*****************************************************************************
N//
N//! CAN controller has entered a Bus Off state.
N//
N#define CAN_STATUS_BUS_OFF      0x00000080
N
N//
N//! CAN controller error level has reached warning level.
N//
N#define CAN_STATUS_EWARN        0x00000040
N
N//
N//! CAN controller error level has reached error passive level.
N//
N#define CAN_STATUS_EPASS        0x00000020
N
N//
N//! A message was received successfully since the last read of this status.
N//
N#define CAN_STATUS_RXOK         0x00000010
N
N//
N//! A message was transmitted successfully since the last read of this
N//! status.
N//
N#define CAN_STATUS_TXOK         0x00000008
N
N//
N//! This is the mask for the last error code field.
N//
N#define CAN_STATUS_LEC_MSK      0x00000007
N
N//
N//! There was no error.
N//
N#define CAN_STATUS_LEC_NONE     0x00000000
N
N//
N//! A bit stuffing error has occurred.
N//
N#define CAN_STATUS_LEC_STUFF    0x00000001
N
N//
N//! A formatting error has occurred.
N//
N#define CAN_STATUS_LEC_FORM     0x00000002
N
N//
N//! An acknowledge error has occurred.
N//
N#define CAN_STATUS_LEC_ACK      0x00000003
N
N//
N//! The bus remained a bit level of 1 for longer than is allowed.
N//
N#define CAN_STATUS_LEC_BIT1     0x00000004
N
N//
N//! The bus remained a bit level of 0 for longer than is allowed.
N//
N#define CAN_STATUS_LEC_BIT0     0x00000005
N
N//
N//! A CRC error has occurred.
N//
N#define CAN_STATUS_LEC_CRC      0x00000006
N
N//
N//! This is the mask for the CAN Last Error Code (LEC).
N//
N#define CAN_STATUS_LEC_MASK     0x00000007
N
N//*****************************************************************************
N//
N// Close the Doxygen group.
N//! @}
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// API Function prototypes
N//
N//*****************************************************************************
Nextern void CANBitTimingGet(uint32_t ui32Base, tCANBitClkParms *psClkParms);
Nextern void CANBitTimingSet(uint32_t ui32Base, tCANBitClkParms *psClkParms);
Nextern uint32_t CANBitRateSet(uint32_t ui32Base, uint32_t ui32SourceClock,
N                              uint32_t ui32BitRate);
Nextern void CANDisable(uint32_t ui32Base);
Nextern void CANEnable(uint32_t ui32Base);
Nextern bool CANErrCntrGet(uint32_t ui32Base, uint32_t *pui32RxCount,
Xextern _Bool CANErrCntrGet(uint32_t ui32Base, uint32_t *pui32RxCount,
N                          uint32_t *pui32TxCount);
Nextern void CANInit(uint32_t ui32Base);
Nextern void CANIntClear(uint32_t ui32Base, uint32_t ui32IntClr);
Nextern void CANIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void CANIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void CANIntRegister(uint32_t ui32Base, void (*pfnHandler)(void));
Nextern uint32_t CANIntStatus(uint32_t ui32Base, tCANIntStsReg eIntStsReg);
Nextern void CANIntUnregister(uint32_t ui32Base);
Nextern void CANMessageClear(uint32_t ui32Base, uint32_t ui32ObjID);
Nextern void CANMessageGet(uint32_t ui32Base, uint32_t ui32ObjID,
N                          tCANMsgObject *psMsgObject, bool bClrPendingInt);
X                          tCANMsgObject *psMsgObject, _Bool bClrPendingInt);
Nextern void CANMessageSet(uint32_t ui32Base, uint32_t ui32ObjID,
N                          tCANMsgObject *psMsgObject, tMsgObjType eMsgType);
Nextern bool CANRetryGet(uint32_t ui32Base);
Xextern _Bool CANRetryGet(uint32_t ui32Base);
Nextern void CANRetrySet(uint32_t ui32Base, bool bAutoRetry);
Xextern void CANRetrySet(uint32_t ui32Base, _Bool bAutoRetry);
Nextern uint32_t CANStatusGet(uint32_t ui32Base, tCANStsReg eStatusReg);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_CAN_H__
L 29 "..\inc_h\system.h" 2
N#include <interrupt.h>
N#include <cpu.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\cpu.h" 1
N//*****************************************************************************
N//
N// cpu.h - Prototypes for the CPU instruction wrapper functions.
N//
N// Copyright (c) 2006-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_CPU_H__
N#define __DRIVERLIB_CPU_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Prototypes.
N//
N//*****************************************************************************
Nextern uint32_t CPUcpsid(void);
Nextern uint32_t CPUcpsie(void);
Nextern uint32_t CPUprimask(void);
Nextern void CPUwfi(void);
Nextern uint32_t CPUbasepriGet(void);
Nextern void CPUbasepriSet(uint32_t ui32NewBasepri);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_CPU_H__
L 31 "..\inc_h\system.h" 2
N#include <timer.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\timer.h" 1
N//*****************************************************************************
N//
N// timer.h - Prototypes for the timer module
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_TIMER_H__
N#define __DRIVERLIB_TIMER_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerConfigure as the ui32Config parameter.
N//
N//*****************************************************************************
N#define TIMER_CFG_ONE_SHOT       0x00000021  // Full-width one-shot timer
N#define TIMER_CFG_ONE_SHOT_UP    0x00000031  // Full-width one-shot up-count
N                                            // timer
N#define TIMER_CFG_PERIODIC       0x00000022  // Full-width periodic timer
N#define TIMER_CFG_PERIODIC_UP    0x00000032  // Full-width periodic up-count
N                                            // timer
N#define TIMER_CFG_RTC            0x01000000  // Full-width RTC timer
N#define TIMER_CFG_SPLIT_PAIR     0x04000000  // Two half-width timers
N#define TIMER_CFG_A_ONE_SHOT     0x00000021  // Timer A one-shot timer
N#define TIMER_CFG_A_ONE_SHOT_UP  0x00000031  // Timer A one-shot up-count timer
N#define TIMER_CFG_A_PERIODIC     0x00000022  // Timer A periodic timer
N#define TIMER_CFG_A_PERIODIC_UP  0x00000032  // Timer A periodic up-count timer
N#define TIMER_CFG_A_CAP_COUNT    0x00000003  // Timer A event counter
N#define TIMER_CFG_A_CAP_COUNT_UP 0x00000013  // Timer A event up-counter
N#define TIMER_CFG_A_CAP_TIME     0x00000007  // Timer A event timer
N#define TIMER_CFG_A_CAP_TIME_UP  0x00000017  // Timer A event up-count timer
N#define TIMER_CFG_A_PWM          0x0000000A  // Timer A PWM output
N#define TIMER_CFG_B_ONE_SHOT     0x00002100  // Timer B one-shot timer
N#define TIMER_CFG_B_ONE_SHOT_UP  0x00003100  // Timer B one-shot up-count timer
N#define TIMER_CFG_B_PERIODIC     0x00002200  // Timer B periodic timer
N#define TIMER_CFG_B_PERIODIC_UP  0x00003200  // Timer B periodic up-count timer
N#define TIMER_CFG_B_CAP_COUNT    0x00000300  // Timer B event counter
N#define TIMER_CFG_B_CAP_COUNT_UP 0x00001300  // Timer B event up-counter
N#define TIMER_CFG_B_CAP_TIME     0x00000700  // Timer B event timer
N#define TIMER_CFG_B_CAP_TIME_UP  0x00001700  // Timer B event up-count timer
N#define TIMER_CFG_B_PWM          0x00000A00  // Timer B PWM output
N#define TIMER_CFG_A_ACT_TOINTD   0x00010000  // Timer A compare action disable
N                                             // time-out interrupt.
N#define TIMER_CFG_A_ACT_NONE     0x00000000  // Timer A compare action none.
N#define TIMER_CFG_A_ACT_TOGGLE   0x00020000  // Timer A compare action toggle.
N#define TIMER_CFG_A_ACT_CLRTO    0x00040000  // Timer A compare action CCP
N                                             // clear on time-out.
N#define TIMER_CFG_A_ACT_SETTO    0x00060000  // Timer A compare action CCP set
N                                             // on time-out.
N#define TIMER_CFG_A_ACT_SETTOGTO 0x00080000  // Timer A compare action set CCP
N                                             // toggle on time-out.
N#define TIMER_CFG_A_ACT_CLRTOGTO 0x000A0000  // Timer A compare action clear
N                                             // CCP toggle on time-out.
N#define TIMER_CFG_A_ACT_SETCLRTO 0x000C0000  // Timer A compare action set CCP
N                                             // clear on time-out.
N#define TIMER_CFG_A_ACT_CLRSETTO 0x000E0000  // Timer A compare action clear
N                                             // CCP set on time-out.
N#define TIMER_CFG_B_ACT_TOINTD   0x00100000  // Timer B compare action disable
N                                             // time-out interrupt.
N#define TIMER_CFG_B_ACT_NONE     0x00000000  // Timer A compare action none.
N#define TIMER_CFG_B_ACT_TOGGLE   0x00200000  // Timer A compare action toggle.
N#define TIMER_CFG_B_ACT_CLRTO    0x00400000  // Timer A compare action CCP
N                                             // clear on time-out.
N#define TIMER_CFG_B_ACT_SETTO    0x00600000  // Timer A compare action CCP set
N                                             // on time-out.
N#define TIMER_CFG_B_ACT_SETTOGTO 0x00800000  // Timer A compare action set CCP
N                                             // toggle on time-out.
N#define TIMER_CFG_B_ACT_CLRTOGTO 0x00A00000  // Timer A compare action clear
N                                             // CCP toggle on time-out.
N#define TIMER_CFG_B_ACT_SETCLRTO 0x00C00000  // Timer A compare action set CCP
N                                             // clear on time-out.
N#define TIMER_CFG_B_ACT_CLRSETTO 0x0000E000  // Timer A compare action clear
N                                             // CCP set on time-out.
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerIntEnable, TimerIntDisable, and
N// TimerIntClear as the ui32IntFlags parameter, and returned from
N// TimerIntStatus.
N//
N//*****************************************************************************
N#define TIMER_TIMB_DMA          0x00002000 // TimerB DMA Complete Interrupt.
N#define TIMER_TIMB_MATCH        0x00000800  // TimerB match interrupt
N#define TIMER_CAPB_EVENT        0x00000400  // CaptureB event interrupt
N#define TIMER_CAPB_MATCH        0x00000200  // CaptureB match interrupt
N#define TIMER_TIMB_TIMEOUT      0x00000100  // TimerB time out interrupt
N#define TIMER_TIMA_DMA          0x00000020 // TimerA DMA Complete Interrupt.
N#define TIMER_TIMA_MATCH        0x00000010  // TimerA match interrupt
N#define TIMER_RTC_MATCH         0x00000008  // RTC interrupt mask
N#define TIMER_CAPA_EVENT        0x00000004  // CaptureA event interrupt
N#define TIMER_CAPA_MATCH        0x00000002  // CaptureA match interrupt
N#define TIMER_TIMA_TIMEOUT      0x00000001  // TimerA time out interrupt
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerControlEvent as the ui32Event parameter.
N//
N//*****************************************************************************
N#define TIMER_EVENT_POS_EDGE    0x00000000  // Count positive edges
N#define TIMER_EVENT_NEG_EDGE    0x00000404  // Count negative edges
N#define TIMER_EVENT_BOTH_EDGES  0x00000C0C  // Count both edges
N
N//*****************************************************************************
N//
N// Values that can be passed to most of the timer APIs as the ui32Timer
N// parameter.
N//
N//*****************************************************************************
N#define TIMER_A                 0x000000ff  // Timer A
N#define TIMER_B                 0x0000ff00  // Timer B
N#define TIMER_BOTH              0x0000ffff  // Timer Both
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerSynchronize as the ui32Timers parameter.
N//
N//*****************************************************************************
N#define TIMER_0A_SYNC           0x00000001  // Synchronize Timer 0A
N#define TIMER_0B_SYNC           0x00000002  // Synchronize Timer 0B
N#define TIMER_1A_SYNC           0x00000004  // Synchronize Timer 1A
N#define TIMER_1B_SYNC           0x00000008  // Synchronize Timer 1B
N#define TIMER_2A_SYNC           0x00000010  // Synchronize Timer 2A
N#define TIMER_2B_SYNC           0x00000020  // Synchronize Timer 2B
N#define TIMER_3A_SYNC           0x00000040  // Synchronize Timer 3A
N#define TIMER_3B_SYNC           0x00000080  // Synchronize Timer 3B
N#define TIMER_4A_SYNC           0x00000100  // Synchronize Timer 4A
N#define TIMER_4B_SYNC           0x00000200  // Synchronize Timer 4B
N#define TIMER_5A_SYNC           0x00000400  // Synchronize Timer 5A
N#define TIMER_5B_SYNC           0x00000800  // Synchronize Timer 5B
N#define WTIMER_0A_SYNC          0x00001000  // Synchronize Wide Timer 0A
N#define WTIMER_0B_SYNC          0x00002000  // Synchronize Wide Timer 0B
N#define WTIMER_1A_SYNC          0x00004000  // Synchronize Wide Timer 1A
N#define WTIMER_1B_SYNC          0x00008000  // Synchronize Wide Timer 1B
N#define WTIMER_2A_SYNC          0x00010000  // Synchronize Wide Timer 2A
N#define WTIMER_2B_SYNC          0x00020000  // Synchronize Wide Timer 2B
N#define WTIMER_3A_SYNC          0x00040000  // Synchronize Wide Timer 3A
N#define WTIMER_3B_SYNC          0x00080000  // Synchronize Wide Timer 3B
N#define WTIMER_4A_SYNC          0x00100000  // Synchronize Wide Timer 4A
N#define WTIMER_4B_SYNC          0x00200000  // Synchronize Wide Timer 4B
N#define WTIMER_5A_SYNC          0x00400000  // Synchronize Wide Timer 5A
N#define WTIMER_5B_SYNC          0x00800000  // Synchronize Wide Timer 5B
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerClockSourceSet() or returned from
N// TimerClockSourceGet().
N//
N//*****************************************************************************
N#define TIMER_CLOCK_SYSTEM      0x00000000
N#define TIMER_CLOCK_PIOSC       0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerDMAEventSet() or returned from
N// TimerDMAEventGet().
N//
N//*****************************************************************************
N#define TIMER_DMA_MODEMATCH_B   0x00000800
N#define TIMER_DMA_CAPEVENT_B    0x00000400
N#define TIMER_DMA_CAPMATCH_B    0x00000200
N#define TIMER_DMA_TIMEOUT_B     0x00000100
N#define TIMER_DMA_MODEMATCH_A   0x00000010
N#define TIMER_DMA_RTC_A         0x00000008
N#define TIMER_DMA_CAPEVENT_A    0x00000004
N#define TIMER_DMA_CAPMATCH_A    0x00000002
N#define TIMER_DMA_TIMEOUT_A     0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerADCEventSet() or returned from
N// TimerADCEventGet().
N//
N//*****************************************************************************
N#define TIMER_ADC_MODEMATCH_B   0x00000800
N#define TIMER_ADC_CAPEVENT_B    0x00000400
N#define TIMER_ADC_CAPMATCH_B    0x00000200
N#define TIMER_ADC_TIMEOUT_B     0x00000100
N#define TIMER_ADC_MODEMATCH_A   0x00000010
N#define TIMER_ADC_RTC_A         0x00000008
N#define TIMER_ADC_CAPEVENT_A    0x00000004
N#define TIMER_ADC_CAPMATCH_A    0x00000002
N#define TIMER_ADC_TIMEOUT_A     0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerUpdateMode().
N//
N//*****************************************************************************
N#define TIMER_UP_LOAD_IMMEDIATE 0x00000000
N#define TIMER_UP_LOAD_TIMEOUT   0x00000100
N#define TIMER_UP_MATCH_IMMEDIATE                                              \
N                                0x00000000
X#define TIMER_UP_MATCH_IMMEDIATE                                                                              0x00000000
N#define TIMER_UP_MATCH_TIMEOUT  0x00000400
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void TimerEnable(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerDisable(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerConfigure(uint32_t ui32Base, uint32_t ui32Config);
Nextern void TimerControlLevel(uint32_t ui32Base, uint32_t ui32Timer,
N                              bool bInvert);
X                              _Bool bInvert);
Nextern void TimerControlTrigger(uint32_t ui32Base, uint32_t ui32Timer,
N                                bool bEnable);
X                                _Bool bEnable);
Nextern void TimerControlEvent(uint32_t ui32Base, uint32_t ui32Timer,
N                              uint32_t ui32Event);
Nextern void TimerControlStall(uint32_t ui32Base, uint32_t ui32Timer,
N                              bool bStall);
X                              _Bool bStall);
Nextern void TimerControlWaitOnTrigger(uint32_t ui32Base, uint32_t ui32Timer,
N                                      bool bWait);
X                                      _Bool bWait);
Nextern void TimerRTCEnable(uint32_t ui32Base);
Nextern void TimerRTCDisable(uint32_t ui32Base);
Nextern void TimerPrescaleSet(uint32_t ui32Base, uint32_t ui32Timer,
N                             uint32_t ui32Value);
Nextern uint32_t TimerPrescaleGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerPrescaleMatchSet(uint32_t ui32Base, uint32_t ui32Timer,
N                                  uint32_t ui32Value);
Nextern uint32_t TimerPrescaleMatchGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerLoadSet(uint32_t ui32Base, uint32_t ui32Timer,
N                         uint32_t ui32Value);
Nextern uint32_t TimerLoadGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerLoadSet64(uint32_t ui32Base, uint64_t ui64Value);
Nextern uint64_t TimerLoadGet64(uint32_t ui32Base);
Nextern uint32_t TimerValueGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern uint64_t TimerValueGet64(uint32_t ui32Base);
Nextern void TimerMatchSet(uint32_t ui32Base, uint32_t ui32Timer,
N                          uint32_t ui32Value);
Nextern uint32_t TimerMatchGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerMatchSet64(uint32_t ui32Base, uint64_t ui64Value);
Nextern uint64_t TimerMatchGet64(uint32_t ui32Base);
Nextern void TimerIntRegister(uint32_t ui32Base, uint32_t ui32Timer,
N                             void (*pfnHandler)(void));
Nextern void TimerIntUnregister(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void TimerIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern uint32_t TimerIntStatus(uint32_t ui32Base, bool bMasked);
Xextern uint32_t TimerIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void TimerIntClear(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void TimerSynchronize(uint32_t ui32Base, uint32_t ui32Timers);
Nextern uint32_t TimerClockSourceGet(uint32_t ui32Base);
Nextern void TimerClockSourceSet(uint32_t ui32Base, uint32_t ui32Source);
Nextern uint32_t TimerADCEventGet(uint32_t ui32Base);
Nextern void TimerADCEventSet(uint32_t ui32Base, uint32_t ui32ADCEvent);
Nextern uint32_t TimerDMAEventGet(uint32_t ui32Base);
Nextern void TimerDMAEventSet(uint32_t ui32Base, uint32_t ui32DMAEvent);
Nextern void TimerUpdateMode(uint32_t ui32Base, uint32_t ui32Timer,
N                            uint32_t ui32Config);
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_TIMER_H__
L 32 "..\inc_h\system.h" 2
N#include <uart.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\uart.h" 1
N//*****************************************************************************
N//
N// uart.h - Defines and Macros for the UART.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_UART_H__
N#define __DRIVERLIB_UART_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTIntEnable, UARTIntDisable, and UARTIntClear
N// as the ui32IntFlags parameter, and returned from UARTIntStatus.
N//
N//*****************************************************************************
N#define UART_INT_DMATX          0x20000     // DMA TX interrupt
N#define UART_INT_DMARX          0x10000     // DMA RX interrupt
N#define UART_INT_9BIT           0x1000      // 9-bit address match interrupt
N#define UART_INT_OE             0x400       // Overrun Error Interrupt Mask
N#define UART_INT_BE             0x200       // Break Error Interrupt Mask
N#define UART_INT_PE             0x100       // Parity Error Interrupt Mask
N#define UART_INT_FE             0x080       // Framing Error Interrupt Mask
N#define UART_INT_RT             0x040       // Receive Timeout Interrupt Mask
N#define UART_INT_TX             0x020       // Transmit Interrupt Mask
N#define UART_INT_RX             0x010       // Receive Interrupt Mask
N#define UART_INT_DSR            0x008       // DSR Modem Interrupt Mask
N#define UART_INT_DCD            0x004       // DCD Modem Interrupt Mask
N#define UART_INT_CTS            0x002       // CTS Modem Interrupt Mask
N#define UART_INT_RI             0x001       // RI Modem Interrupt Mask
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTConfigSetExpClk as the ui32Config parameter
N// and returned by UARTConfigGetExpClk in the pui32Config parameter.
N// Additionally, the UART_CONFIG_PAR_* subset can be passed to
N// UARTParityModeSet as the ui32Parity parameter, and are returned by
N// UARTParityModeGet.
N//
N//*****************************************************************************
N#define UART_CONFIG_WLEN_MASK   0x00000060  // Mask for extracting word length
N#define UART_CONFIG_WLEN_8      0x00000060  // 8 bit data
N#define UART_CONFIG_WLEN_7      0x00000040  // 7 bit data
N#define UART_CONFIG_WLEN_6      0x00000020  // 6 bit data
N#define UART_CONFIG_WLEN_5      0x00000000  // 5 bit data
N#define UART_CONFIG_STOP_MASK   0x00000008  // Mask for extracting stop bits
N#define UART_CONFIG_STOP_ONE    0x00000000  // One stop bit
N#define UART_CONFIG_STOP_TWO    0x00000008  // Two stop bits
N#define UART_CONFIG_PAR_MASK    0x00000086  // Mask for extracting parity
N#define UART_CONFIG_PAR_NONE    0x00000000  // No parity
N#define UART_CONFIG_PAR_EVEN    0x00000006  // Even parity
N#define UART_CONFIG_PAR_ODD     0x00000002  // Odd parity
N#define UART_CONFIG_PAR_ONE     0x00000082  // Parity bit is one
N#define UART_CONFIG_PAR_ZERO    0x00000086  // Parity bit is zero
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTFIFOLevelSet as the ui32TxLevel parameter
N// and returned by UARTFIFOLevelGet in the pui32TxLevel.
N//
N//*****************************************************************************
N#define UART_FIFO_TX1_8         0x00000000  // Transmit interrupt at 1/8 Full
N#define UART_FIFO_TX2_8         0x00000001  // Transmit interrupt at 1/4 Full
N#define UART_FIFO_TX4_8         0x00000002  // Transmit interrupt at 1/2 Full
N#define UART_FIFO_TX6_8         0x00000003  // Transmit interrupt at 3/4 Full
N#define UART_FIFO_TX7_8         0x00000004  // Transmit interrupt at 7/8 Full
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTFIFOLevelSet as the ui32RxLevel parameter
N// and returned by UARTFIFOLevelGet in the pui32RxLevel.
N//
N//*****************************************************************************
N#define UART_FIFO_RX1_8         0x00000000  // Receive interrupt at 1/8 Full
N#define UART_FIFO_RX2_8         0x00000008  // Receive interrupt at 1/4 Full
N#define UART_FIFO_RX4_8         0x00000010  // Receive interrupt at 1/2 Full
N#define UART_FIFO_RX6_8         0x00000018  // Receive interrupt at 3/4 Full
N#define UART_FIFO_RX7_8         0x00000020  // Receive interrupt at 7/8 Full
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTDMAEnable() and UARTDMADisable().
N//
N//*****************************************************************************
N#define UART_DMA_ERR_RXSTOP     0x00000004  // Stop DMA receive if UART error
N#define UART_DMA_TX             0x00000002  // Enable DMA for transmit
N#define UART_DMA_RX             0x00000001  // Enable DMA for receive
N
N//*****************************************************************************
N//
N// Values returned from UARTRxErrorGet().
N//
N//*****************************************************************************
N#define UART_RXERROR_OVERRUN    0x00000008
N#define UART_RXERROR_BREAK      0x00000004
N#define UART_RXERROR_PARITY     0x00000002
N#define UART_RXERROR_FRAMING    0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTHandshakeOutputsSet() or returned from
N// UARTHandshakeOutputGet().
N//
N//*****************************************************************************
N#define UART_OUTPUT_RTS         0x00000800
N#define UART_OUTPUT_DTR         0x00000400
N
N//*****************************************************************************
N//
N// Values that can be returned from UARTHandshakeInputsGet().
N//
N//*****************************************************************************
N#define UART_INPUT_RI           0x00000100
N#define UART_INPUT_DCD          0x00000004
N#define UART_INPUT_DSR          0x00000002
N#define UART_INPUT_CTS          0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTFlowControl() or returned from
N// UARTFlowControlGet().
N//
N//*****************************************************************************
N#define UART_FLOWCONTROL_TX     0x00008000
N#define UART_FLOWCONTROL_RX     0x00004000
N#define UART_FLOWCONTROL_NONE   0x00000000
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTTxIntModeSet() or returned from
N// UARTTxIntModeGet().
N//
N//*****************************************************************************
N#define UART_TXINT_MODE_FIFO    0x00000000
N#define UART_TXINT_MODE_EOT     0x00000010
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTClockSourceSet() or returned from
N// UARTClockSourceGet().
N//
N//*****************************************************************************
N#define UART_CLOCK_SYSTEM       0x00000000
N#define UART_CLOCK_PIOSC        0x00000005
N
N//*****************************************************************************
N//
N// API Function prototypes
N//
N//*****************************************************************************
Nextern void UARTParityModeSet(uint32_t ui32Base, uint32_t ui32Parity);
Nextern uint32_t UARTParityModeGet(uint32_t ui32Base);
Nextern void UARTFIFOLevelSet(uint32_t ui32Base, uint32_t ui32TxLevel,
N                             uint32_t ui32RxLevel);
Nextern void UARTFIFOLevelGet(uint32_t ui32Base, uint32_t *pui32TxLevel,
N                             uint32_t *pui32RxLevel);
Nextern void UARTConfigSetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
N                                uint32_t ui32Baud, uint32_t ui32Config);
Nextern void UARTConfigGetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
N                                uint32_t *pui32Baud, uint32_t *pui32Config);
Nextern void UARTEnable(uint32_t ui32Base);
Nextern void UARTDisable(uint32_t ui32Base);
Nextern void UARTFIFOEnable(uint32_t ui32Base);
Nextern void UARTFIFODisable(uint32_t ui32Base);
Nextern void UARTEnableSIR(uint32_t ui32Base, bool bLowPower);
Xextern void UARTEnableSIR(uint32_t ui32Base, _Bool bLowPower);
Nextern void UARTDisableSIR(uint32_t ui32Base);
Nextern bool UARTCharsAvail(uint32_t ui32Base);
Xextern _Bool UARTCharsAvail(uint32_t ui32Base);
Nextern bool UARTSpaceAvail(uint32_t ui32Base);
Xextern _Bool UARTSpaceAvail(uint32_t ui32Base);
Nextern int32_t UARTCharGetNonBlocking(uint32_t ui32Base);
Nextern int32_t UARTCharGet(uint32_t ui32Base);
Nextern bool UARTCharPutNonBlocking(uint32_t ui32Base, unsigned char ucData);
Xextern _Bool UARTCharPutNonBlocking(uint32_t ui32Base, unsigned char ucData);
Nextern void UARTCharPut(uint32_t ui32Base, unsigned char ucData);
Nextern void UARTBreakCtl(uint32_t ui32Base, bool bBreakState);
Xextern void UARTBreakCtl(uint32_t ui32Base, _Bool bBreakState);
Nextern bool UARTBusy(uint32_t ui32Base);
Xextern _Bool UARTBusy(uint32_t ui32Base);
Nextern void UARTIntRegister(uint32_t ui32Base, void (*pfnHandler)(void));
Nextern void UARTIntUnregister(uint32_t ui32Base);
Nextern void UARTIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void UARTIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern uint32_t UARTIntStatus(uint32_t ui32Base, bool bMasked);
Xextern uint32_t UARTIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void UARTIntClear(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void UARTDMAEnable(uint32_t ui32Base, uint32_t ui32DMAFlags);
Nextern void UARTDMADisable(uint32_t ui32Base, uint32_t ui32DMAFlags);
Nextern uint32_t UARTRxErrorGet(uint32_t ui32Base);
Nextern void UARTRxErrorClear(uint32_t ui32Base);
Nextern void UARTSmartCardEnable(uint32_t ui32Base);
Nextern void UARTSmartCardDisable(uint32_t ui32Base);
Nextern void UARTModemControlSet(uint32_t ui32Base, uint32_t ui32Control);
Nextern void UARTModemControlClear(uint32_t ui32Base, uint32_t ui32Control);
Nextern uint32_t UARTModemControlGet(uint32_t ui32Base);
Nextern uint32_t UARTModemStatusGet(uint32_t ui32Base);
Nextern void UARTFlowControlSet(uint32_t ui32Base, uint32_t ui32Mode);
Nextern uint32_t UARTFlowControlGet(uint32_t ui32Base);
Nextern void UARTTxIntModeSet(uint32_t ui32Base, uint32_t ui32Mode);
Nextern uint32_t UARTTxIntModeGet(uint32_t ui32Base);
Nextern void UARTClockSourceSet(uint32_t ui32Base, uint32_t ui32Source);
Nextern uint32_t UARTClockSourceGet(uint32_t ui32Base);
Nextern void UART9BitEnable(uint32_t ui32Base);
Nextern void UART9BitDisable(uint32_t ui32Base);
Nextern void UART9BitAddrSet(uint32_t ui32Base, uint8_t ui8Addr,
N                            uint8_t ui8Mask);
Nextern void UART9BitAddrSend(uint32_t ui32Base, uint8_t ui8Addr);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_UART_H__
L 33 "..\inc_h\system.h" 2
N#include <pin_map.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\pin_map.h" 1
N//*****************************************************************************
N//
N// pin_map.h - Mapping of peripherals to pins for all parts.
N//
N// Copyright (c) 2007-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_PIN_MAP_H__
N#define __DRIVERLIB_PIN_MAP_H__
N
N//*****************************************************************************
N//
N// TM4C1230C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230C3PM
N
N//*****************************************************************************
N//
N// TM4C1230D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230D5PM
N
N//*****************************************************************************
N//
N// TM4C1230E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230E6PM
N
N//*****************************************************************************
N//
N// TM4C1230H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230H6PM
N
N//*****************************************************************************
N//
N// TM4C1231C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231C3PM
N
N//*****************************************************************************
N//
N// TM4C1231D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231D5PM
N
N//*****************************************************************************
N//
N// TM4C1231D5PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231D5PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1231D5PZ
N
N//*****************************************************************************
N//
N// TM4C1231E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231E6PM
N
N//*****************************************************************************
N//
N// TM4C1231E6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231E6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1231E6PZ
N
N//*****************************************************************************
N//
N// TM4C1231H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231H6PM
N
N//*****************************************************************************
N//
N// TM4C1231H6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231H6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1231H6PZ
N
N//*****************************************************************************
N//
N// TM4C1232C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232C3PM
N
N//*****************************************************************************
N//
N// TM4C1232D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232D5PM
N
N//*****************************************************************************
N//
N// TM4C1232E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232E6PM
N
N//*****************************************************************************
N//
N// TM4C1232H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232H6PM
N
N//*****************************************************************************
N//
N// TM4C1233C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233C3PM
N
N//*****************************************************************************
N//
N// TM4C1233D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233D5PM
N
N//*****************************************************************************
N//
N// TM4C1233D5PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233D5PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1233D5PZ
N
N//*****************************************************************************
N//
N// TM4C1233E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233E6PM
N
N//*****************************************************************************
N//
N// TM4C1233E6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233E6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1233E6PZ
N
N//*****************************************************************************
N//
N// TM4C1233H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233H6PM
N
N//*****************************************************************************
N//
N// TM4C1233H6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233H6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1233H6PZ
N
N//*****************************************************************************
N//
N// TM4C1236D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1236D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C1236D5PM
N
N//*****************************************************************************
N//
N// TM4C1236E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1236E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C1236E6PM
N
N//*****************************************************************************
N//
N// TM4C1236H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1236H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C1236H6PM
N
N//*****************************************************************************
N//
N// TM4C1237D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C1237D5PM
N
N//*****************************************************************************
N//
N// TM4C1237D5PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237D5PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1237D5PZ
N
N//*****************************************************************************
N//
N// TM4C1237E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C1237E6PM
N
N//*****************************************************************************
N//
N// TM4C1237E6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237E6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1237E6PZ
N
N//*****************************************************************************
N//
N// TM4C1237H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C1237H6PM
N
N//*****************************************************************************
N//
N// TM4C1237H6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237H6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1237H6PZ
N
N//*****************************************************************************
N//
N// TM4C123AE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123AE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C123AE6PM
N
N//*****************************************************************************
N//
N// TM4C123AH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123AH6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C123AH6PM
N
N//*****************************************************************************
N//
N// TM4C123BE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C123BE6PM
N
N//*****************************************************************************
N//
N// TM4C123BE6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BE6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123BE6PZ
N
N//*****************************************************************************
N//
N// TM4C123BH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C123BH6PM
N
N//*****************************************************************************
N//
N// TM4C123BH6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123BH6PZ
N
N//*****************************************************************************
N//
N// TM4C123FE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123FE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C123FE6PM
N
N//*****************************************************************************
N//
N// TM4C123FH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123FH6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C123FH6PM
N
N//*****************************************************************************
N//
N// TM4C123GE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C123GE6PM
N
N//*****************************************************************************
N//
N// TM4C123GE6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GE6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123GE6PZ
N
N//*****************************************************************************
N//
N// TM4C123GH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6PM
N
N#define GPIO_PA0_U0RX           0x00000001
N#define GPIO_PA0_CAN1RX         0x00000008
N
N#define GPIO_PA1_U0TX           0x00000401
N#define GPIO_PA1_CAN1TX         0x00000408
N
N#define GPIO_PA2_SSI0CLK        0x00000802
N
N#define GPIO_PA3_SSI0FSS        0x00000C02
N
N#define GPIO_PA4_SSI0RX         0x00001002
N
N#define GPIO_PA5_SSI0TX         0x00001402
N
N#define GPIO_PA6_I2C1SCL        0x00001803
N#define GPIO_PA6_M1PWM2         0x00001805
N
N#define GPIO_PA7_I2C1SDA        0x00001C03
N#define GPIO_PA7_M1PWM3         0x00001C05
N
N#define GPIO_PB0_U1RX           0x00010001
N#define GPIO_PB0_T2CCP0         0x00010007
N
N#define GPIO_PB1_U1TX           0x00010401
N#define GPIO_PB1_T2CCP1         0x00010407
N
N#define GPIO_PB2_I2C0SCL        0x00010803
N#define GPIO_PB2_T3CCP0         0x00010807
N
N#define GPIO_PB3_I2C0SDA        0x00010C03
N#define GPIO_PB3_T3CCP1         0x00010C07
N
N#define GPIO_PB4_SSI2CLK        0x00011002
N#define GPIO_PB4_M0PWM2         0x00011004
N#define GPIO_PB4_T1CCP0         0x00011007
N#define GPIO_PB4_CAN0RX         0x00011008
N
N#define GPIO_PB5_SSI2FSS        0x00011402
N#define GPIO_PB5_M0PWM3         0x00011404
N#define GPIO_PB5_T1CCP1         0x00011407
N#define GPIO_PB5_CAN0TX         0x00011408
N
N#define GPIO_PB6_SSI2RX         0x00011802
N#define GPIO_PB6_M0PWM0         0x00011804
N#define GPIO_PB6_T0CCP0         0x00011807
N
N#define GPIO_PB7_SSI2TX         0x00011C02
N#define GPIO_PB7_M0PWM1         0x00011C04
N#define GPIO_PB7_T0CCP1         0x00011C07
N
N#define GPIO_PC0_TCK            0x00020001
N#define GPIO_PC0_SWCLK          0x00020001
N#define GPIO_PC0_T4CCP0         0x00020007
N
N#define GPIO_PC1_TMS            0x00020401
N#define GPIO_PC1_SWDIO          0x00020401
N#define GPIO_PC1_T4CCP1         0x00020407
N
N#define GPIO_PC2_TDI            0x00020801
N#define GPIO_PC2_T5CCP0         0x00020807
N
N#define GPIO_PC3_SWO            0x00020C01
N#define GPIO_PC3_TDO            0x00020C01
N#define GPIO_PC3_T5CCP1         0x00020C07
N
N#define GPIO_PC4_U4RX           0x00021001
N#define GPIO_PC4_U1RX           0x00021002
N#define GPIO_PC4_M0PWM6         0x00021004
N#define GPIO_PC4_IDX1           0x00021006
N#define GPIO_PC4_WT0CCP0        0x00021007
N#define GPIO_PC4_U1RTS          0x00021008
N
N#define GPIO_PC5_U4TX           0x00021401
N#define GPIO_PC5_U1TX           0x00021402
N#define GPIO_PC5_M0PWM7         0x00021404
N#define GPIO_PC5_PHA1           0x00021406
N#define GPIO_PC5_WT0CCP1        0x00021407
N#define GPIO_PC5_U1CTS          0x00021408
N
N#define GPIO_PC6_U3RX           0x00021801
N#define GPIO_PC6_PHB1           0x00021806
N#define GPIO_PC6_WT1CCP0        0x00021807
N#define GPIO_PC6_USB0EPEN       0x00021808
N
N#define GPIO_PC7_U3TX           0x00021C01
N#define GPIO_PC7_WT1CCP1        0x00021C07
N#define GPIO_PC7_USB0PFLT       0x00021C08
N
N#define GPIO_PD0_SSI3CLK        0x00030001
N#define GPIO_PD0_SSI1CLK        0x00030002
N#define GPIO_PD0_I2C3SCL        0x00030003
N#define GPIO_PD0_M0PWM6         0x00030004
N#define GPIO_PD0_M1PWM0         0x00030005
N#define GPIO_PD0_WT2CCP0        0x00030007
N
N#define GPIO_PD1_SSI3FSS        0x00030401
N#define GPIO_PD1_SSI1FSS        0x00030402
N#define GPIO_PD1_I2C3SDA        0x00030403
N#define GPIO_PD1_M0PWM7         0x00030404
N#define GPIO_PD1_M1PWM1         0x00030405
N#define GPIO_PD1_WT2CCP1        0x00030407
N
N#define GPIO_PD2_SSI3RX         0x00030801
N#define GPIO_PD2_SSI1RX         0x00030802
N#define GPIO_PD2_M0FAULT0       0x00030804
N#define GPIO_PD2_WT3CCP0        0x00030807
N#define GPIO_PD2_USB0EPEN       0x00030808
N
N#define GPIO_PD3_SSI3TX         0x00030C01
N#define GPIO_PD3_SSI1TX         0x00030C02
N#define GPIO_PD3_IDX0           0x00030C06
N#define GPIO_PD3_WT3CCP1        0x00030C07
N#define GPIO_PD3_USB0PFLT       0x00030C08
N
N#define GPIO_PD4_U6RX           0x00031001
N#define GPIO_PD4_WT4CCP0        0x00031007
N
N#define GPIO_PD5_U6TX           0x00031401
N#define GPIO_PD5_WT4CCP1        0x00031407
N
N#define GPIO_PD6_U2RX           0x00031801
N#define GPIO_PD6_M0FAULT0       0x00031804
N#define GPIO_PD6_PHA0           0x00031806
N#define GPIO_PD6_WT5CCP0        0x00031807
N
N#define GPIO_PD7_U2TX           0x00031C01
N#define GPIO_PD7_PHB0           0x00031C06
N#define GPIO_PD7_WT5CCP1        0x00031C07
N#define GPIO_PD7_NMI            0x00031C08
N
N#define GPIO_PE0_U7RX           0x00040001
N
N#define GPIO_PE1_U7TX           0x00040401
N
N#define GPIO_PE4_U5RX           0x00041001
N#define GPIO_PE4_I2C2SCL        0x00041003
N#define GPIO_PE4_M0PWM4         0x00041004
N#define GPIO_PE4_M1PWM2         0x00041005
N#define GPIO_PE4_CAN0RX         0x00041008
N
N#define GPIO_PE5_U5TX           0x00041401
N#define GPIO_PE5_I2C2SDA        0x00041403
N#define GPIO_PE5_M0PWM5         0x00041404
N#define GPIO_PE5_M1PWM3         0x00041405
N#define GPIO_PE5_CAN0TX         0x00041408
N
N#define GPIO_PF0_U1RTS          0x00050001
N#define GPIO_PF0_SSI1RX         0x00050002
N#define GPIO_PF0_CAN0RX         0x00050003
N#define GPIO_PF0_M1PWM4         0x00050005
N#define GPIO_PF0_PHA0           0x00050006
N#define GPIO_PF0_T0CCP0         0x00050007
N#define GPIO_PF0_NMI            0x00050008
N#define GPIO_PF0_C0O            0x00050009
N
N#define GPIO_PF1_U1CTS          0x00050401
N#define GPIO_PF1_SSI1TX         0x00050402
N#define GPIO_PF1_M1PWM5         0x00050405
N#define GPIO_PF1_PHB0           0x00050406
N#define GPIO_PF1_T0CCP1         0x00050407
N#define GPIO_PF1_C1O            0x00050409
N#define GPIO_PF1_TRD1           0x0005040E
N
N#define GPIO_PF2_SSI1CLK        0x00050802
N#define GPIO_PF2_M0FAULT0       0x00050804
N#define GPIO_PF2_M1PWM6         0x00050805
N#define GPIO_PF2_T1CCP0         0x00050807
N#define GPIO_PF2_TRD0           0x0005080E
N
N#define GPIO_PF3_SSI1FSS        0x00050C02
N#define GPIO_PF3_CAN0TX         0x00050C03
N#define GPIO_PF3_M1PWM7         0x00050C05
N#define GPIO_PF3_T1CCP1         0x00050C07
N#define GPIO_PF3_TRCLK          0x00050C0E
N
N#define GPIO_PF4_M1FAULT0       0x00051005
N#define GPIO_PF4_IDX0           0x00051006
N#define GPIO_PF4_T2CCP0         0x00051007
N#define GPIO_PF4_USB0EPEN       0x00051008
N
N#endif // PART_TM4C123GH6PM
N
N//*****************************************************************************
N//
N// TM4C123GH6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123GH6PZ
N
N//*****************************************************************************
N//
N// TM4C1231H6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231H6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C1231H6PGE
N
N//*****************************************************************************
N//
N// TM4C1233H6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233H6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C1233H6PGE
N
N//*****************************************************************************
N//
N// TM4C1237H6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237H6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C1237H6PGE
N
N//*****************************************************************************
N//
N// TM4C123BH6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C123BH6PGE
N
N//*****************************************************************************
N//
N// TM4C123BH6ZRB Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6ZRB
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
S#define GPIO_PP3_M0PWM3         0x000D0C01
S#define GPIO_PP3_T5CCP1         0x000D0C07
S
S#define GPIO_PP4_M0PWM4         0x000D1001
S#define GPIO_PP4_WT0CCP0        0x000D1007
S
S#define GPIO_PP5_M0PWM5         0x000D1401
S#define GPIO_PP5_WT0CCP1        0x000D1407
S
S#define GPIO_PP6_M0PWM6         0x000D1801
S#define GPIO_PP6_WT1CCP0        0x000D1807
S
S#define GPIO_PP7_M0PWM7         0x000D1C01
S#define GPIO_PP7_WT1CCP1        0x000D1C07
S
S#define GPIO_PQ0_M1PWM0         0x000E0001
S#define GPIO_PQ0_WT2CCP0        0x000E0007
S
S#define GPIO_PQ1_M1PWM1         0x000E0401
S#define GPIO_PQ1_WT2CCP1        0x000E0407
S
S#define GPIO_PQ2_M1PWM2         0x000E0801
S#define GPIO_PQ2_WT3CCP0        0x000E0807
S
S#define GPIO_PQ3_M1PWM3         0x000E0C01
S#define GPIO_PQ3_WT3CCP1        0x000E0C07
S
S#define GPIO_PQ4_M1PWM4         0x000E1001
S#define GPIO_PQ4_WT4CCP0        0x000E1007
S
S#define GPIO_PQ5_M1PWM5         0x000E1401
S#define GPIO_PQ5_WT4CCP1        0x000E1407
S
S#define GPIO_PQ6_M1PWM6         0x000E1801
S#define GPIO_PQ6_WT5CCP0        0x000E1807
S
S#define GPIO_PQ7_M1PWM7         0x000E1C01
S#define GPIO_PQ7_WT5CCP1        0x000E1C07
S
N#endif // PART_TM4C123BH6ZRB
N
N//*****************************************************************************
N//
N// TM4C123GH6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C123GH6PGE
N
N//*****************************************************************************
N//
N// TM4C123GH6ZRB Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6ZRB
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
S#define GPIO_PP3_M0PWM3         0x000D0C01
S#define GPIO_PP3_T5CCP1         0x000D0C07
S
S#define GPIO_PP4_M0PWM4         0x000D1001
S#define GPIO_PP4_WT0CCP0        0x000D1007
S
S#define GPIO_PP5_M0PWM5         0x000D1401
S#define GPIO_PP5_WT0CCP1        0x000D1407
S
S#define GPIO_PP6_M0PWM6         0x000D1801
S#define GPIO_PP6_WT1CCP0        0x000D1807
S
S#define GPIO_PP7_M0PWM7         0x000D1C01
S#define GPIO_PP7_WT1CCP1        0x000D1C07
S
S#define GPIO_PQ0_M1PWM0         0x000E0001
S#define GPIO_PQ0_WT2CCP0        0x000E0007
S
S#define GPIO_PQ1_M1PWM1         0x000E0401
S#define GPIO_PQ1_WT2CCP1        0x000E0407
S
S#define GPIO_PQ2_M1PWM2         0x000E0801
S#define GPIO_PQ2_WT3CCP0        0x000E0807
S
S#define GPIO_PQ3_M1PWM3         0x000E0C01
S#define GPIO_PQ3_WT3CCP1        0x000E0C07
S
S#define GPIO_PQ4_M1PWM4         0x000E1001
S#define GPIO_PQ4_WT4CCP0        0x000E1007
S
S#define GPIO_PQ5_M1PWM5         0x000E1401
S#define GPIO_PQ5_WT4CCP1        0x000E1407
S
S#define GPIO_PQ6_M1PWM6         0x000E1801
S#define GPIO_PQ6_WT5CCP0        0x000E1807
S
S#define GPIO_PQ7_M1PWM7         0x000E1C01
S#define GPIO_PQ7_WT5CCP1        0x000E1C07
S
N#endif // PART_TM4C123GH6ZRB
N
N//*****************************************************************************
N//
N// TM4C1290NCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1290NCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
N#endif // PART_TM4C1290NCPDT
N
N//*****************************************************************************
N//
N// TM4C1290NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1290NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C1290NCZAD
N
N//*****************************************************************************
N//
N// TM4C1292NCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1292NCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
N#endif // PART_TM4C1292NCPDT
N
N//*****************************************************************************
N//
N// TM4C1292NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1292NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_EN0TXER        0x000C180E
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_EN0TXEN        0x000F1C0E
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_EN0TXD0        0x0010100E
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_EN0TXD1        0x0010140E
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_EN0RXER        0x0010180E
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_EN0RXDV        0x00101C0E
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_EN0RXD0        0x0011000E
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_EN0RXD1        0x0011040E
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C1292NCZAD
N
N//*****************************************************************************
N//
N// TM4C1294KCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1294KCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
N#endif // PART_TM4C1294KCPDT
N
N//*****************************************************************************
N//
N// TM4C1294NCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1294NCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
N#endif // PART_TM4C1294NCPDT
N
N//*****************************************************************************
N//
N// TM4C1294NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1294NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C1294NCZAD
N
N//*****************************************************************************
N//
N// TM4C1297NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1297NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C1297NCZAD
N
N//*****************************************************************************
N//
N// TM4C1299KCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1299KCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C1299KCZAD
N
N//*****************************************************************************
N//
N// TM4C1299NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1299NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C1299NCZAD
N
N//*****************************************************************************
N//
N// TM4C129CNCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129CNCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
N#endif // PART_TM4C129CNCPDT
N
N//*****************************************************************************
N//
N// TM4C129CNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129CNCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C129CNCZAD
N
N//*****************************************************************************
N//
N// TM4C129DNCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129DNCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
N#endif // PART_TM4C129DNCPDT
N
N//*****************************************************************************
N//
N// TM4C129DNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129DNCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_EN0TXER        0x000C180E
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_EN0TXEN        0x000F1C0E
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_EN0TXD0        0x0010100E
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_EN0TXD1        0x0010140E
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_EN0RXER        0x0010180E
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_EN0RXDV        0x00101C0E
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_EN0RXD0        0x0011000E
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_EN0RXD1        0x0011040E
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C129DNCZAD
N
N//*****************************************************************************
N//
N// TM4C129EKCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129EKCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
N#endif // PART_TM4C129EKCPDT
N
N//*****************************************************************************
N//
N// TM4C129ENCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129ENCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
N#endif // PART_TM4C129ENCPDT
N
N//*****************************************************************************
N//
N// TM4C129ENCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129ENCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C129ENCZAD
N
N//*****************************************************************************
N//
N// TM4C129LNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129LNCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C129LNCZAD
N
N//*****************************************************************************
N//
N// TM4C129XKCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129XKCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S#define GPIO_PE3_OWIRE          0x00040C05
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_OWIRE          0x00061005
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_OWALT          0x00061405
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_OWIRE          0x00061805
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_OWIRE          0x00061C05
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_EN0TXER        0x000C180E
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_OWIRE          0x000D1004
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_OWALT          0x000D1404
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PP7_OWIRE          0x000D1C05
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_EN0TXEN        0x000F1C0E
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_EN0TXD0        0x0010100E
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_EN0TXD1        0x0010140E
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_EN0RXER        0x0010180E
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_EN0RXDV        0x00101C0E
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_EN0RXD0        0x0011000E
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_EN0RXD1        0x0011040E
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C129XKCZAD
N
N//*****************************************************************************
N//
N// TM4C129XNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129XNCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S#define GPIO_PE3_OWIRE          0x00040C05
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PF6_LCDMCLK        0x0005180F
S
S#define GPIO_PF7_LCDDATA02      0x00051C0F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_OWIRE          0x00061005
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_OWALT          0x00061405
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_OWIRE          0x00061805
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_OWIRE          0x00061C05
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S#define GPIO_PJ2_LCDDATA14      0x0008080F
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S#define GPIO_PJ3_LCDDATA15      0x00080C0F
S
S#define GPIO_PJ4_U3RTS          0x00081001
S#define GPIO_PJ4_LCDDATA16      0x0008100F
S
S#define GPIO_PJ5_U3CTS          0x00081401
S#define GPIO_PJ5_LCDDATA17      0x0008140F
S
S#define GPIO_PJ6_U4RTS          0x00081801
S#define GPIO_PJ6_LCDAC          0x0008180F
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_EN0TXER        0x000C180E
S#define GPIO_PN6_LCDDATA13      0x000C180F
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S#define GPIO_PN7_LCDDATA12      0x000C1C0F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_OWIRE          0x000D1004
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_OWALT          0x000D1404
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PP7_OWIRE          0x000D1C05
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S#define GPIO_PR0_LCDCP          0x000F000F
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S#define GPIO_PR1_LCDFP          0x000F040F
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S#define GPIO_PR2_LCDLP          0x000F080F
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S#define GPIO_PR3_LCDDATA03      0x000F0C0F
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S#define GPIO_PR4_LCDDATA00      0x000F100F
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S#define GPIO_PR5_LCDDATA01      0x000F140F
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S#define GPIO_PR6_LCDDATA04      0x000F180F
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_EN0TXEN        0x000F1C0E
S#define GPIO_PR7_LCDDATA05      0x000F1C0F
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S#define GPIO_PS0_LCDDATA20      0x0010000F
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S#define GPIO_PS1_LCDDATA21      0x0010040F
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S#define GPIO_PS2_LCDDATA22      0x0010080F
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S#define GPIO_PS3_LCDDATA23      0x00100C0F
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_EN0TXD0        0x0010100E
S#define GPIO_PS4_LCDDATA06      0x0010100F
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_EN0TXD1        0x0010140E
S#define GPIO_PS5_LCDDATA07      0x0010140F
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_EN0RXER        0x0010180E
S#define GPIO_PS6_LCDDATA08      0x0010180F
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_EN0RXDV        0x00101C0E
S#define GPIO_PS7_LCDDATA09      0x00101C0F
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_EN0RXD0        0x0011000E
S#define GPIO_PT0_LCDDATA10      0x0011000F
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_EN0RXD1        0x0011040E
S#define GPIO_PT1_LCDDATA11      0x0011040F
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S#define GPIO_PT2_LCDDATA18      0x0011080F
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S#define GPIO_PT3_LCDDATA19      0x00110C0F
S
N#endif // PART_TM4C129XNCZAD
N
N#endif // __DRIVERLIB_PIN_MAP_H__
L 34 "..\inc_h\system.h" 2
N#include <uartstdio.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\utils\uartstdio.h" 1
N//*****************************************************************************
N//
N// uartstdio.h - Prototypes for the UART console functions.
N//
N// Copyright (c) 2007-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N// Texas Instruments (TI) is supplying this software for use solely and
N// exclusively on TI's microcontroller products. The software is owned by
N// TI and/or its suppliers, and is protected under applicable copyright
N// laws. You may not combine this software with "viral" open-source
N// software in order to form a larger program.
N// 
N// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
N// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
N// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
N// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
N// DAMAGES, FOR ANY REASON WHATSOEVER.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Utility Library.
N//
N//*****************************************************************************
N
N#ifndef __UARTSTDIO_H__
N#define __UARTSTDIO_H__
N
N#include <stdarg.h>
L 1 "D:\Keil_v4\ARM\ARMCC\bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5030076
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N  typedef struct __va_list { void *__ap; } va_list;
N
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199409L)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stdarg.h */
N
L 29 "C:\ti\TivaWare_C_Series-2.1.0.12573\utils\uartstdio.h" 2
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// If built for buffered operation, the following labels define the sizes of
N// the transmit and receive buffers respectively.
N//
N//*****************************************************************************
N#ifdef UART_BUFFERED
S#ifndef UART_RX_BUFFER_SIZE
S#define UART_RX_BUFFER_SIZE     128
S#endif
S#ifndef UART_TX_BUFFER_SIZE
S#define UART_TX_BUFFER_SIZE     1024
S#endif
N#endif
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void UARTStdioConfig(uint32_t ui32Port, uint32_t ui32Baud,
N                            uint32_t ui32SrcClock);
Nextern int UARTgets(char *pcBuf, uint32_t ui32Len);
Nextern unsigned char UARTgetc(void);
Nextern void UARTprintf(const char *pcString, ...);
Nextern void UARTvprintf(const char *pcString, va_list vaArgP);
Nextern int UARTwrite(const char *pcBuf, uint32_t ui32Len);
N#ifdef UART_BUFFERED
Sextern int UARTPeek(unsigned char ucChar);
Sextern void UARTFlushTx(bool bDiscard);
Sextern void UARTFlushRx(void);
Sextern int UARTRxBytesAvail(void);
Sextern int UARTTxBytesFree(void);
Sextern void UARTEchoSet(bool bEnable);
N#endif
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __UARTSTDIO_H__
L 35 "..\inc_h\system.h" 2
N#include <systick.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\systick.h" 1
N//*****************************************************************************
N//
N// systick.h - Prototypes for the SysTick driver.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_SYSTICK_H__
N#define __DRIVERLIB_SYSTICK_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void SysTickEnable(void);
Nextern void SysTickDisable(void);
Nextern void SysTickIntRegister(void (*pfnHandler)(void));
Nextern void SysTickIntUnregister(void);
Nextern void SysTickIntEnable(void);
Nextern void SysTickIntDisable(void);
Nextern void SysTickPeriodSet(uint32_t ui32Period);
Nextern uint32_t SysTickPeriodGet(void);
Nextern uint32_t SysTickValueGet(void);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_SYSTICK_H__
L 36 "..\inc_h\system.h" 2
N#include <pwm.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\pwm.h" 1
N//*****************************************************************************
N//
N// pwm.h - API function protoypes for Pulse Width Modulation (PWM) ports
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_PWM_H__
N#define __DRIVERLIB_PWM_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following defines are passed to PWMGenConfigure() as the ui32Config
N// parameter and specify the configuration of the PWM generator.
N//
N//*****************************************************************************
N#define PWM_GEN_MODE_DOWN       0x00000000  // Down count mode
N#define PWM_GEN_MODE_UP_DOWN    0x00000002  // Up/Down count mode
N#define PWM_GEN_MODE_SYNC       0x00000038  // Synchronous updates
N#define PWM_GEN_MODE_NO_SYNC    0x00000000  // Immediate updates
N#define PWM_GEN_MODE_DBG_RUN    0x00000004  // Continue running in debug mode
N#define PWM_GEN_MODE_DBG_STOP   0x00000000  // Stop running in debug mode
N#define PWM_GEN_MODE_FAULT_LATCHED \
N                                0x00040000  // Fault is latched
X#define PWM_GEN_MODE_FAULT_LATCHED                                 0x00040000  
N#define PWM_GEN_MODE_FAULT_UNLATCHED \
N                                0x00000000  // Fault is not latched
X#define PWM_GEN_MODE_FAULT_UNLATCHED                                 0x00000000  
N#define PWM_GEN_MODE_FAULT_MINPER \
N                                0x00020000  // Enable min fault period
X#define PWM_GEN_MODE_FAULT_MINPER                                 0x00020000  
N#define PWM_GEN_MODE_FAULT_NO_MINPER \
N                                0x00000000  // Disable min fault period
X#define PWM_GEN_MODE_FAULT_NO_MINPER                                 0x00000000  
N#define PWM_GEN_MODE_FAULT_EXT  0x00010000  // Enable extended fault support
N#define PWM_GEN_MODE_FAULT_LEGACY \
N                                0x00000000  // Disable extended fault support
X#define PWM_GEN_MODE_FAULT_LEGACY                                 0x00000000  
N#define PWM_GEN_MODE_DB_NO_SYNC 0x00000000  // Deadband updates occur
N                                            // immediately
N#define PWM_GEN_MODE_DB_SYNC_LOCAL \
N                                0x0000A800  // Deadband updates locally
X#define PWM_GEN_MODE_DB_SYNC_LOCAL                                 0x0000A800  
N                                            // synchronized
N#define PWM_GEN_MODE_DB_SYNC_GLOBAL \
N                                0x0000FC00  // Deadband updates globally
X#define PWM_GEN_MODE_DB_SYNC_GLOBAL                                 0x0000FC00  
N                                            // synchronized
N#define PWM_GEN_MODE_GEN_NO_SYNC \
N                                0x00000000  // Generator mode updates occur
X#define PWM_GEN_MODE_GEN_NO_SYNC                                 0x00000000  
N                                            // immediately
N#define PWM_GEN_MODE_GEN_SYNC_LOCAL \
N                                0x00000280  // Generator mode updates locally
X#define PWM_GEN_MODE_GEN_SYNC_LOCAL                                 0x00000280  
N                                            // synchronized
N#define PWM_GEN_MODE_GEN_SYNC_GLOBAL \
N                                0x000003C0  // Generator mode updates globally
X#define PWM_GEN_MODE_GEN_SYNC_GLOBAL                                 0x000003C0  
N                                            // synchronized
N
N//*****************************************************************************
N//
N// Defines for enabling, disabling, and clearing PWM generator interrupts and
N// triggers.
N//
N//*****************************************************************************
N#define PWM_INT_CNT_ZERO        0x00000001  // Int if COUNT = 0
N#define PWM_INT_CNT_LOAD        0x00000002  // Int if COUNT = LOAD
N#define PWM_INT_CNT_AU          0x00000004  // Int if COUNT = CMPA U
N#define PWM_INT_CNT_AD          0x00000008  // Int if COUNT = CMPA D
N#define PWM_INT_CNT_BU          0x00000010  // Int if COUNT = CMPA U
N#define PWM_INT_CNT_BD          0x00000020  // Int if COUNT = CMPA D
N#define PWM_TR_CNT_ZERO         0x00000100  // Trig if COUNT = 0
N#define PWM_TR_CNT_LOAD         0x00000200  // Trig if COUNT = LOAD
N#define PWM_TR_CNT_AU           0x00000400  // Trig if COUNT = CMPA U
N#define PWM_TR_CNT_AD           0x00000800  // Trig if COUNT = CMPA D
N#define PWM_TR_CNT_BU           0x00001000  // Trig if COUNT = CMPA U
N#define PWM_TR_CNT_BD           0x00002000  // Trig if COUNT = CMPA D
N
N//*****************************************************************************
N//
N// Defines for enabling, disabling, and clearing PWM interrupts.
N//
N//*****************************************************************************
N#define PWM_INT_GEN_0           0x00000001  // Generator 0 interrupt
N#define PWM_INT_GEN_1           0x00000002  // Generator 1 interrupt
N#define PWM_INT_GEN_2           0x00000004  // Generator 2 interrupt
N#define PWM_INT_GEN_3           0x00000008  // Generator 3 interrupt
N#define PWM_INT_FAULT0          0x00010000  // Fault0 interrupt
N#define PWM_INT_FAULT1          0x00020000  // Fault1 interrupt
N#define PWM_INT_FAULT2          0x00040000  // Fault2 interrupt
N#define PWM_INT_FAULT3          0x00080000  // Fault3 interrupt
N#define PWM_INT_FAULT_M         0x000F0000  // Fault interrupt source mask
N
N//*****************************************************************************
N//
N// Defines to identify the generators within a module.
N//
N//*****************************************************************************
N#define PWM_GEN_0               0x00000040  // Offset address of Gen0
N#define PWM_GEN_1               0x00000080  // Offset address of Gen1
N#define PWM_GEN_2               0x000000C0  // Offset address of Gen2
N#define PWM_GEN_3               0x00000100  // Offset address of Gen3
N
N#define PWM_GEN_0_BIT           0x00000001  // Bit-wise ID for Gen0
N#define PWM_GEN_1_BIT           0x00000002  // Bit-wise ID for Gen1
N#define PWM_GEN_2_BIT           0x00000004  // Bit-wise ID for Gen2
N#define PWM_GEN_3_BIT           0x00000008  // Bit-wise ID for Gen3
N
N#define PWM_GEN_EXT_0           0x00000800  // Offset of Gen0 ext address range
N#define PWM_GEN_EXT_1           0x00000880  // Offset of Gen1 ext address range
N#define PWM_GEN_EXT_2           0x00000900  // Offset of Gen2 ext address range
N#define PWM_GEN_EXT_3           0x00000980  // Offset of Gen3 ext address range
N
N//*****************************************************************************
N//
N// Defines to identify the outputs within a module.
N//
N//*****************************************************************************
N#define PWM_OUT_0               0x00000040  // Encoded offset address of PWM0
N#define PWM_OUT_1               0x00000041  // Encoded offset address of PWM1
N#define PWM_OUT_2               0x00000082  // Encoded offset address of PWM2
N#define PWM_OUT_3               0x00000083  // Encoded offset address of PWM3
N#define PWM_OUT_4               0x000000C4  // Encoded offset address of PWM4
N#define PWM_OUT_5               0x000000C5  // Encoded offset address of PWM5
N#define PWM_OUT_6               0x00000106  // Encoded offset address of PWM6
N#define PWM_OUT_7               0x00000107  // Encoded offset address of PWM7
N
N#define PWM_OUT_0_BIT           0x00000001  // Bit-wise ID for PWM0
N#define PWM_OUT_1_BIT           0x00000002  // Bit-wise ID for PWM1
N#define PWM_OUT_2_BIT           0x00000004  // Bit-wise ID for PWM2
N#define PWM_OUT_3_BIT           0x00000008  // Bit-wise ID for PWM3
N#define PWM_OUT_4_BIT           0x00000010  // Bit-wise ID for PWM4
N#define PWM_OUT_5_BIT           0x00000020  // Bit-wise ID for PWM5
N#define PWM_OUT_6_BIT           0x00000040  // Bit-wise ID for PWM6
N#define PWM_OUT_7_BIT           0x00000080  // Bit-wise ID for PWM7
N
N//*****************************************************************************
N//
N// Defines to identify each of the possible fault trigger conditions in
N// PWM_FAULT_GROUP_0.
N//
N//*****************************************************************************
N#define PWM_FAULT_GROUP_0       0
N
N#define PWM_FAULT_FAULT0        0x00000001
N#define PWM_FAULT_FAULT1        0x00000002
N#define PWM_FAULT_FAULT2        0x00000004
N#define PWM_FAULT_FAULT3        0x00000008
N#define PWM_FAULT_ACMP0         0x00010000
N#define PWM_FAULT_ACMP1         0x00020000
N#define PWM_FAULT_ACMP2         0x00040000
N
N//*****************************************************************************
N//
N// Defines to identify each of the possible fault trigger conditions in
N// PWM_FAULT_GROUP_1.
N//
N//*****************************************************************************
N#define PWM_FAULT_GROUP_1       1
N
N#define PWM_FAULT_DCMP0         0x00000001
N#define PWM_FAULT_DCMP1         0x00000002
N#define PWM_FAULT_DCMP2         0x00000004
N#define PWM_FAULT_DCMP3         0x00000008
N#define PWM_FAULT_DCMP4         0x00000010
N#define PWM_FAULT_DCMP5         0x00000020
N#define PWM_FAULT_DCMP6         0x00000040
N#define PWM_FAULT_DCMP7         0x00000080
N
N//*****************************************************************************
N//
N// Defines to identify the sense of each of the external FAULTn signals
N//
N//*****************************************************************************
N#define PWM_FAULT0_SENSE_HIGH   0x00000000
N#define PWM_FAULT0_SENSE_LOW    0x00000001
N#define PWM_FAULT1_SENSE_HIGH   0x00000000
N#define PWM_FAULT1_SENSE_LOW    0x00000002
N#define PWM_FAULT2_SENSE_HIGH   0x00000000
N#define PWM_FAULT2_SENSE_LOW    0x00000004
N#define PWM_FAULT3_SENSE_HIGH   0x00000000
N#define PWM_FAULT3_SENSE_LOW    0x00000008
N
N//*****************************************************************************
N//
N// Defines that can be passed to the PWMClockSet() API as the ui32Config
N// parameter, and can be returned by the PWMClockGet() API.
N//
N//*****************************************************************************
N#define PWM_SYSCLK_DIV_1        0x00000000  // PWM clock is system clock
N#define PWM_SYSCLK_DIV_2        0x00000100  // PWM clock is system clock /2
N#define PWM_SYSCLK_DIV_4        0x00000101  // PWM clock is system clock /4
N#define PWM_SYSCLK_DIV_8        0x00000102  // PWM clock is system clock /8
N#define PWM_SYSCLK_DIV_16       0x00000103  // PWM clock is system clock /16
N#define PWM_SYSCLK_DIV_32       0x00000104  // PWM clock is system clock /32
N#define PWM_SYSCLK_DIV_64       0x00000105  // PWM clock is system clock /64
N
N//*****************************************************************************
N//
N// Defines passed to PWMOutputUpdateMode() to identify the synchronization mode
N// to use when enabling or disabling outputs using PWMOutputState().
N//
N//*****************************************************************************
N#define PWM_OUTPUT_MODE_NO_SYNC 0x00000000 // Updates to occur immediately
N#define PWM_OUTPUT_MODE_SYNC_LOCAL \
N                                0x00000002 // Updates are locally synchronized
X#define PWM_OUTPUT_MODE_SYNC_LOCAL                                 0x00000002 
N#define PWM_OUTPUT_MODE_SYNC_GLOBAL \
N                                0x00000003 // Updates are globally synchronized
X#define PWM_OUTPUT_MODE_SYNC_GLOBAL                                 0x00000003 
N
N//*****************************************************************************
N//
N// API Function prototypes
N//
N//*****************************************************************************
Nextern void PWMGenConfigure(uint32_t ui32Base, uint32_t ui32Gen,
N                            uint32_t ui32Config);
Nextern void PWMGenPeriodSet(uint32_t ui32Base, uint32_t ui32Gen,
N                            uint32_t ui32Period);
Nextern uint32_t PWMGenPeriodGet(uint32_t ui32Base,
N                                uint32_t ui32Gen);
Nextern void PWMGenEnable(uint32_t ui32Base, uint32_t ui32Gen);
Nextern void PWMGenDisable(uint32_t ui32Base, uint32_t ui32Gen);
Nextern void PWMPulseWidthSet(uint32_t ui32Base, uint32_t ui32PWMOut,
N                             uint32_t ui32Width);
Nextern uint32_t PWMPulseWidthGet(uint32_t ui32Base,
N                                 uint32_t ui32PWMOut);
Nextern void PWMDeadBandEnable(uint32_t ui32Base, uint32_t ui32Gen,
N                              uint16_t ui16Rise, uint16_t ui16Fall);
Nextern void PWMDeadBandDisable(uint32_t ui32Base, uint32_t ui32Gen);
Nextern void PWMSyncUpdate(uint32_t ui32Base, uint32_t ui32GenBits);
Nextern void PWMSyncTimeBase(uint32_t ui32Base, uint32_t ui32GenBits);
Nextern void PWMOutputState(uint32_t ui32Base, uint32_t ui32PWMOutBits,
N                           bool bEnable);
X                           _Bool bEnable);
Nextern void PWMOutputInvert(uint32_t ui32Base, uint32_t ui32PWMOutBits,
N                            bool bInvert);
X                            _Bool bInvert);
Nextern void PWMOutputFaultLevel(uint32_t ui32Base,
N                                uint32_t ui32PWMOutBits,
N                                bool bDriveHigh);
X                                _Bool bDriveHigh);
Nextern void PWMOutputFault(uint32_t ui32Base, uint32_t ui32PWMOutBits,
N                           bool bFaultSuppress);
X                           _Bool bFaultSuppress);
Nextern void PWMGenIntRegister(uint32_t ui32Base, uint32_t ui32Gen,
N                              void (*pfnIntHandler)(void));
Nextern void PWMGenIntUnregister(uint32_t ui32Base, uint32_t ui32Gen);
Nextern void PWMFaultIntRegister(uint32_t ui32Base,
N                                void (*pfnIntHandler)(void));
Nextern void PWMFaultIntUnregister(uint32_t ui32Base);
Nextern void PWMGenIntTrigEnable(uint32_t ui32Base, uint32_t ui32Gen,
N                                uint32_t ui32IntTrig);
Nextern void PWMGenIntTrigDisable(uint32_t ui32Base, uint32_t ui32Gen,
N                                 uint32_t ui32IntTrig);
Nextern uint32_t PWMGenIntStatus(uint32_t ui32Base, uint32_t ui32Gen,
N                                bool bMasked);
X                                _Bool bMasked);
Nextern void PWMGenIntClear(uint32_t ui32Base, uint32_t ui32Gen,
N                           uint32_t ui32Ints);
Nextern void PWMIntEnable(uint32_t ui32Base, uint32_t ui32GenFault);
Nextern void PWMIntDisable(uint32_t ui32Base, uint32_t ui32GenFault);
Nextern void PWMFaultIntClear(uint32_t ui32Base);
Nextern uint32_t PWMIntStatus(uint32_t ui32Base, bool bMasked);
Xextern uint32_t PWMIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void PWMFaultIntClearExt(uint32_t ui32Base,
N                                uint32_t ui32FaultInts);
Nextern void PWMGenFaultConfigure(uint32_t ui32Base, uint32_t ui32Gen,
N                                 uint32_t ui32MinFaultPeriod,
N                                 uint32_t ui32FaultSenses);
Nextern void PWMGenFaultTriggerSet(uint32_t ui32Base, uint32_t ui32Gen,
N                                  uint32_t ui32Group,
N                                  uint32_t ui32FaultTriggers);
Nextern uint32_t PWMGenFaultTriggerGet(uint32_t ui32Base,
N                                      uint32_t ui32Gen,
N                                      uint32_t ui32Group);
Nextern uint32_t PWMGenFaultStatus(uint32_t ui32Base,
N                                  uint32_t ui32Gen,
N                                  uint32_t ui32Group);
Nextern void PWMGenFaultClear(uint32_t ui32Base, uint32_t ui32Gen,
N                             uint32_t ui32Group,
N                             uint32_t ui32FaultTriggers);
Nextern void PWMClockSet(uint32_t ui32Base, uint32_t ui32Config);
Nextern uint32_t PWMClockGet(uint32_t ui32Base);
Nextern void PWMOutputUpdateMode(uint32_t ui32Base,
N                                uint32_t ui32PWMOutBits,
N                                uint32_t ui32Mode);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_PWM_H__
L 37 "..\inc_h\system.h" 2
N#include <hw_pwm.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\inc\hw_pwm.h" 1
N//*****************************************************************************
N//
N// hw_pwm.h - Defines and Macros for Pulse Width Modulation (PWM) ports.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_PWM_H__
N#define __HW_PWM_H__
N
N//*****************************************************************************
N//
N// The following are defines for the PWM register offsets.
N//
N//*****************************************************************************
N#define PWM_O_CTL               0x00000000  // PWM Master Control
N#define PWM_O_SYNC              0x00000004  // PWM Time Base Sync
N#define PWM_O_ENABLE            0x00000008  // PWM Output Enable
N#define PWM_O_INVERT            0x0000000C  // PWM Output Inversion
N#define PWM_O_FAULT             0x00000010  // PWM Output Fault
N#define PWM_O_INTEN             0x00000014  // PWM Interrupt Enable
N#define PWM_O_RIS               0x00000018  // PWM Raw Interrupt Status
N#define PWM_O_ISC               0x0000001C  // PWM Interrupt Status and Clear
N#define PWM_O_STATUS            0x00000020  // PWM Status
N#define PWM_O_FAULTVAL          0x00000024  // PWM Fault Condition Value
N#define PWM_O_ENUPD             0x00000028  // PWM Enable Update
N#define PWM_O_0_CTL             0x00000040  // PWM0 Control
N#define PWM_O_0_INTEN           0x00000044  // PWM0 Interrupt and Trigger
N                                            // Enable
N#define PWM_O_0_RIS             0x00000048  // PWM0 Raw Interrupt Status
N#define PWM_O_0_ISC             0x0000004C  // PWM0 Interrupt Status and Clear
N#define PWM_O_0_LOAD            0x00000050  // PWM0 Load
N#define PWM_O_0_COUNT           0x00000054  // PWM0 Counter
N#define PWM_O_0_CMPA            0x00000058  // PWM0 Compare A
N#define PWM_O_0_CMPB            0x0000005C  // PWM0 Compare B
N#define PWM_O_0_GENA            0x00000060  // PWM0 Generator A Control
N#define PWM_O_0_GENB            0x00000064  // PWM0 Generator B Control
N#define PWM_O_0_DBCTL           0x00000068  // PWM0 Dead-Band Control
N#define PWM_O_0_DBRISE          0x0000006C  // PWM0 Dead-Band Rising-Edge Delay
N#define PWM_O_0_DBFALL          0x00000070  // PWM0 Dead-Band
N                                            // Falling-Edge-Delay
N#define PWM_O_0_FLTSRC0         0x00000074  // PWM0 Fault Source 0
N#define PWM_O_0_FLTSRC1         0x00000078  // PWM0 Fault Source 1
N#define PWM_O_0_MINFLTPER       0x0000007C  // PWM0 Minimum Fault Period
N#define PWM_O_1_CTL             0x00000080  // PWM1 Control
N#define PWM_O_1_INTEN           0x00000084  // PWM1 Interrupt and Trigger
N                                            // Enable
N#define PWM_O_1_RIS             0x00000088  // PWM1 Raw Interrupt Status
N#define PWM_O_1_ISC             0x0000008C  // PWM1 Interrupt Status and Clear
N#define PWM_O_1_LOAD            0x00000090  // PWM1 Load
N#define PWM_O_1_COUNT           0x00000094  // PWM1 Counter
N#define PWM_O_1_CMPA            0x00000098  // PWM1 Compare A
N#define PWM_O_1_CMPB            0x0000009C  // PWM1 Compare B
N#define PWM_O_1_GENA            0x000000A0  // PWM1 Generator A Control
N#define PWM_O_1_GENB            0x000000A4  // PWM1 Generator B Control
N#define PWM_O_1_DBCTL           0x000000A8  // PWM1 Dead-Band Control
N#define PWM_O_1_DBRISE          0x000000AC  // PWM1 Dead-Band Rising-Edge Delay
N#define PWM_O_1_DBFALL          0x000000B0  // PWM1 Dead-Band
N                                            // Falling-Edge-Delay
N#define PWM_O_1_FLTSRC0         0x000000B4  // PWM1 Fault Source 0
N#define PWM_O_1_FLTSRC1         0x000000B8  // PWM1 Fault Source 1
N#define PWM_O_1_MINFLTPER       0x000000BC  // PWM1 Minimum Fault Period
N#define PWM_O_2_CTL             0x000000C0  // PWM2 Control
N#define PWM_O_2_INTEN           0x000000C4  // PWM2 Interrupt and Trigger
N                                            // Enable
N#define PWM_O_2_RIS             0x000000C8  // PWM2 Raw Interrupt Status
N#define PWM_O_2_ISC             0x000000CC  // PWM2 Interrupt Status and Clear
N#define PWM_O_2_LOAD            0x000000D0  // PWM2 Load
N#define PWM_O_2_COUNT           0x000000D4  // PWM2 Counter
N#define PWM_O_2_CMPA            0x000000D8  // PWM2 Compare A
N#define PWM_O_2_CMPB            0x000000DC  // PWM2 Compare B
N#define PWM_O_2_GENA            0x000000E0  // PWM2 Generator A Control
N#define PWM_O_2_GENB            0x000000E4  // PWM2 Generator B Control
N#define PWM_O_2_DBCTL           0x000000E8  // PWM2 Dead-Band Control
N#define PWM_O_2_DBRISE          0x000000EC  // PWM2 Dead-Band Rising-Edge Delay
N#define PWM_O_2_DBFALL          0x000000F0  // PWM2 Dead-Band
N                                            // Falling-Edge-Delay
N#define PWM_O_2_FLTSRC0         0x000000F4  // PWM2 Fault Source 0
N#define PWM_O_2_FLTSRC1         0x000000F8  // PWM2 Fault Source 1
N#define PWM_O_2_MINFLTPER       0x000000FC  // PWM2 Minimum Fault Period
N#define PWM_O_3_CTL             0x00000100  // PWM3 Control
N#define PWM_O_3_INTEN           0x00000104  // PWM3 Interrupt and Trigger
N                                            // Enable
N#define PWM_O_3_RIS             0x00000108  // PWM3 Raw Interrupt Status
N#define PWM_O_3_ISC             0x0000010C  // PWM3 Interrupt Status and Clear
N#define PWM_O_3_LOAD            0x00000110  // PWM3 Load
N#define PWM_O_3_COUNT           0x00000114  // PWM3 Counter
N#define PWM_O_3_CMPA            0x00000118  // PWM3 Compare A
N#define PWM_O_3_CMPB            0x0000011C  // PWM3 Compare B
N#define PWM_O_3_GENA            0x00000120  // PWM3 Generator A Control
N#define PWM_O_3_GENB            0x00000124  // PWM3 Generator B Control
N#define PWM_O_3_DBCTL           0x00000128  // PWM3 Dead-Band Control
N#define PWM_O_3_DBRISE          0x0000012C  // PWM3 Dead-Band Rising-Edge Delay
N#define PWM_O_3_DBFALL          0x00000130  // PWM3 Dead-Band
N                                            // Falling-Edge-Delay
N#define PWM_O_3_FLTSRC0         0x00000134  // PWM3 Fault Source 0
N#define PWM_O_3_FLTSRC1         0x00000138  // PWM3 Fault Source 1
N#define PWM_O_3_MINFLTPER       0x0000013C  // PWM3 Minimum Fault Period
N#define PWM_O_0_FLTSEN          0x00000800  // PWM0 Fault Pin Logic Sense
N#define PWM_O_0_FLTSTAT0        0x00000804  // PWM0 Fault Status 0
N#define PWM_O_0_FLTSTAT1        0x00000808  // PWM0 Fault Status 1
N#define PWM_O_1_FLTSEN          0x00000880  // PWM1 Fault Pin Logic Sense
N#define PWM_O_1_FLTSTAT0        0x00000884  // PWM1 Fault Status 0
N#define PWM_O_1_FLTSTAT1        0x00000888  // PWM1 Fault Status 1
N#define PWM_O_2_FLTSEN          0x00000900  // PWM2 Fault Pin Logic Sense
N#define PWM_O_2_FLTSTAT0        0x00000904  // PWM2 Fault Status 0
N#define PWM_O_2_FLTSTAT1        0x00000908  // PWM2 Fault Status 1
N#define PWM_O_3_FLTSEN          0x00000980  // PWM3 Fault Pin Logic Sense
N#define PWM_O_3_FLTSTAT0        0x00000984  // PWM3 Fault Status 0
N#define PWM_O_3_FLTSTAT1        0x00000988  // PWM3 Fault Status 1
N#define PWM_O_PP                0x00000FC0  // PWM Peripheral Properties
N#define PWM_O_CC                0x00000FC8  // PWM Clock Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_CTL register.
N//
N//*****************************************************************************
N#define PWM_CTL_GLOBALSYNC3     0x00000008  // Update PWM Generator 3
N#define PWM_CTL_GLOBALSYNC2     0x00000004  // Update PWM Generator 2
N#define PWM_CTL_GLOBALSYNC1     0x00000002  // Update PWM Generator 1
N#define PWM_CTL_GLOBALSYNC0     0x00000001  // Update PWM Generator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_SYNC register.
N//
N//*****************************************************************************
N#define PWM_SYNC_SYNC3          0x00000008  // Reset Generator 3 Counter
N#define PWM_SYNC_SYNC2          0x00000004  // Reset Generator 2 Counter
N#define PWM_SYNC_SYNC1          0x00000002  // Reset Generator 1 Counter
N#define PWM_SYNC_SYNC0          0x00000001  // Reset Generator 0 Counter
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_ENABLE register.
N//
N//*****************************************************************************
N#define PWM_ENABLE_PWM7EN       0x00000080  // MnPWM7 Output Enable
N#define PWM_ENABLE_PWM6EN       0x00000040  // MnPWM6 Output Enable
N#define PWM_ENABLE_PWM5EN       0x00000020  // MnPWM5 Output Enable
N#define PWM_ENABLE_PWM4EN       0x00000010  // MnPWM4 Output Enable
N#define PWM_ENABLE_PWM3EN       0x00000008  // MnPWM3 Output Enable
N#define PWM_ENABLE_PWM2EN       0x00000004  // MnPWM2 Output Enable
N#define PWM_ENABLE_PWM1EN       0x00000002  // MnPWM1 Output Enable
N#define PWM_ENABLE_PWM0EN       0x00000001  // MnPWM0 Output Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_INVERT register.
N//
N//*****************************************************************************
N#define PWM_INVERT_PWM7INV      0x00000080  // Invert MnPWM7 Signal
N#define PWM_INVERT_PWM6INV      0x00000040  // Invert MnPWM6 Signal
N#define PWM_INVERT_PWM5INV      0x00000020  // Invert MnPWM5 Signal
N#define PWM_INVERT_PWM4INV      0x00000010  // Invert MnPWM4 Signal
N#define PWM_INVERT_PWM3INV      0x00000008  // Invert MnPWM3 Signal
N#define PWM_INVERT_PWM2INV      0x00000004  // Invert MnPWM2 Signal
N#define PWM_INVERT_PWM1INV      0x00000002  // Invert MnPWM1 Signal
N#define PWM_INVERT_PWM0INV      0x00000001  // Invert MnPWM0 Signal
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_FAULT register.
N//
N//*****************************************************************************
N#define PWM_FAULT_FAULT7        0x00000080  // MnPWM7 Fault
N#define PWM_FAULT_FAULT6        0x00000040  // MnPWM6 Fault
N#define PWM_FAULT_FAULT5        0x00000020  // MnPWM5 Fault
N#define PWM_FAULT_FAULT4        0x00000010  // MnPWM4 Fault
N#define PWM_FAULT_FAULT3        0x00000008  // MnPWM3 Fault
N#define PWM_FAULT_FAULT2        0x00000004  // MnPWM2 Fault
N#define PWM_FAULT_FAULT1        0x00000002  // MnPWM1 Fault
N#define PWM_FAULT_FAULT0        0x00000001  // MnPWM0 Fault
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_INTEN register.
N//
N//*****************************************************************************
N#define PWM_INTEN_INTFAULT3     0x00080000  // Interrupt Fault 3
N#define PWM_INTEN_INTFAULT2     0x00040000  // Interrupt Fault 2
N#define PWM_INTEN_INTFAULT1     0x00020000  // Interrupt Fault 1
N#define PWM_INTEN_INTFAULT0     0x00010000  // Interrupt Fault 0
N#define PWM_INTEN_INTPWM3       0x00000008  // PWM3 Interrupt Enable
N#define PWM_INTEN_INTPWM2       0x00000004  // PWM2 Interrupt Enable
N#define PWM_INTEN_INTPWM1       0x00000002  // PWM1 Interrupt Enable
N#define PWM_INTEN_INTPWM0       0x00000001  // PWM0 Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_RIS register.
N//
N//*****************************************************************************
N#define PWM_RIS_INTFAULT3       0x00080000  // Interrupt Fault PWM 3
N#define PWM_RIS_INTFAULT2       0x00040000  // Interrupt Fault PWM 2
N#define PWM_RIS_INTFAULT1       0x00020000  // Interrupt Fault PWM 1
N#define PWM_RIS_INTFAULT0       0x00010000  // Interrupt Fault PWM 0
N#define PWM_RIS_INTPWM3         0x00000008  // PWM3 Interrupt Asserted
N#define PWM_RIS_INTPWM2         0x00000004  // PWM2 Interrupt Asserted
N#define PWM_RIS_INTPWM1         0x00000002  // PWM1 Interrupt Asserted
N#define PWM_RIS_INTPWM0         0x00000001  // PWM0 Interrupt Asserted
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_ISC register.
N//
N//*****************************************************************************
N#define PWM_ISC_INTFAULT3       0x00080000  // FAULT3 Interrupt Asserted
N#define PWM_ISC_INTFAULT2       0x00040000  // FAULT2 Interrupt Asserted
N#define PWM_ISC_INTFAULT1       0x00020000  // FAULT1 Interrupt Asserted
N#define PWM_ISC_INTFAULT0       0x00010000  // FAULT0 Interrupt Asserted
N#define PWM_ISC_INTPWM3         0x00000008  // PWM3 Interrupt Status
N#define PWM_ISC_INTPWM2         0x00000004  // PWM2 Interrupt Status
N#define PWM_ISC_INTPWM1         0x00000002  // PWM1 Interrupt Status
N#define PWM_ISC_INTPWM0         0x00000001  // PWM0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_STATUS register.
N//
N//*****************************************************************************
N#define PWM_STATUS_FAULT3       0x00000008  // Generator 3 Fault Status
N#define PWM_STATUS_FAULT2       0x00000004  // Generator 2 Fault Status
N#define PWM_STATUS_FAULT1       0x00000002  // Generator 1 Fault Status
N#define PWM_STATUS_FAULT0       0x00000001  // Generator 0 Fault Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_FAULTVAL register.
N//
N//*****************************************************************************
N#define PWM_FAULTVAL_PWM7       0x00000080  // MnPWM7 Fault Value
N#define PWM_FAULTVAL_PWM6       0x00000040  // MnPWM6 Fault Value
N#define PWM_FAULTVAL_PWM5       0x00000020  // MnPWM5 Fault Value
N#define PWM_FAULTVAL_PWM4       0x00000010  // MnPWM4 Fault Value
N#define PWM_FAULTVAL_PWM3       0x00000008  // MnPWM3 Fault Value
N#define PWM_FAULTVAL_PWM2       0x00000004  // MnPWM2 Fault Value
N#define PWM_FAULTVAL_PWM1       0x00000002  // MnPWM1 Fault Value
N#define PWM_FAULTVAL_PWM0       0x00000001  // MnPWM0 Fault Value
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_ENUPD register.
N//
N//*****************************************************************************
N#define PWM_ENUPD_ENUPD7_M      0x0000C000  // MnPWM7 Enable Update Mode
N#define PWM_ENUPD_ENUPD7_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD7_LSYNC  0x00008000  // Locally Synchronized
N#define PWM_ENUPD_ENUPD7_GSYNC  0x0000C000  // Globally Synchronized
N#define PWM_ENUPD_ENUPD6_M      0x00003000  // MnPWM6 Enable Update Mode
N#define PWM_ENUPD_ENUPD6_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD6_LSYNC  0x00002000  // Locally Synchronized
N#define PWM_ENUPD_ENUPD6_GSYNC  0x00003000  // Globally Synchronized
N#define PWM_ENUPD_ENUPD5_M      0x00000C00  // MnPWM5 Enable Update Mode
N#define PWM_ENUPD_ENUPD5_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD5_LSYNC  0x00000800  // Locally Synchronized
N#define PWM_ENUPD_ENUPD5_GSYNC  0x00000C00  // Globally Synchronized
N#define PWM_ENUPD_ENUPD4_M      0x00000300  // MnPWM4 Enable Update Mode
N#define PWM_ENUPD_ENUPD4_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD4_LSYNC  0x00000200  // Locally Synchronized
N#define PWM_ENUPD_ENUPD4_GSYNC  0x00000300  // Globally Synchronized
N#define PWM_ENUPD_ENUPD3_M      0x000000C0  // MnPWM3 Enable Update Mode
N#define PWM_ENUPD_ENUPD3_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD3_LSYNC  0x00000080  // Locally Synchronized
N#define PWM_ENUPD_ENUPD3_GSYNC  0x000000C0  // Globally Synchronized
N#define PWM_ENUPD_ENUPD2_M      0x00000030  // MnPWM2 Enable Update Mode
N#define PWM_ENUPD_ENUPD2_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD2_LSYNC  0x00000020  // Locally Synchronized
N#define PWM_ENUPD_ENUPD2_GSYNC  0x00000030  // Globally Synchronized
N#define PWM_ENUPD_ENUPD1_M      0x0000000C  // MnPWM1 Enable Update Mode
N#define PWM_ENUPD_ENUPD1_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD1_LSYNC  0x00000008  // Locally Synchronized
N#define PWM_ENUPD_ENUPD1_GSYNC  0x0000000C  // Globally Synchronized
N#define PWM_ENUPD_ENUPD0_M      0x00000003  // MnPWM0 Enable Update Mode
N#define PWM_ENUPD_ENUPD0_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD0_LSYNC  0x00000002  // Locally Synchronized
N#define PWM_ENUPD_ENUPD0_GSYNC  0x00000003  // Globally Synchronized
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_CTL register.
N//
N//*****************************************************************************
N#define PWM_0_CTL_LATCH         0x00040000  // Latch Fault Input
N#define PWM_0_CTL_MINFLTPER     0x00020000  // Minimum Fault Period
N#define PWM_0_CTL_FLTSRC        0x00010000  // Fault Condition Source
N#define PWM_0_CTL_DBFALLUPD_M   0x0000C000  // PWMnDBFALL Update Mode
N#define PWM_0_CTL_DBFALLUPD_I   0x00000000  // Immediate
N#define PWM_0_CTL_DBFALLUPD_LS  0x00008000  // Locally Synchronized
N#define PWM_0_CTL_DBFALLUPD_GS  0x0000C000  // Globally Synchronized
N#define PWM_0_CTL_DBRISEUPD_M   0x00003000  // PWMnDBRISE Update Mode
N#define PWM_0_CTL_DBRISEUPD_I   0x00000000  // Immediate
N#define PWM_0_CTL_DBRISEUPD_LS  0x00002000  // Locally Synchronized
N#define PWM_0_CTL_DBRISEUPD_GS  0x00003000  // Globally Synchronized
N#define PWM_0_CTL_DBCTLUPD_M    0x00000C00  // PWMnDBCTL Update Mode
N#define PWM_0_CTL_DBCTLUPD_I    0x00000000  // Immediate
N#define PWM_0_CTL_DBCTLUPD_LS   0x00000800  // Locally Synchronized
N#define PWM_0_CTL_DBCTLUPD_GS   0x00000C00  // Globally Synchronized
N#define PWM_0_CTL_GENBUPD_M     0x00000300  // PWMnGENB Update Mode
N#define PWM_0_CTL_GENBUPD_I     0x00000000  // Immediate
N#define PWM_0_CTL_GENBUPD_LS    0x00000200  // Locally Synchronized
N#define PWM_0_CTL_GENBUPD_GS    0x00000300  // Globally Synchronized
N#define PWM_0_CTL_GENAUPD_M     0x000000C0  // PWMnGENA Update Mode
N#define PWM_0_CTL_GENAUPD_I     0x00000000  // Immediate
N#define PWM_0_CTL_GENAUPD_LS    0x00000080  // Locally Synchronized
N#define PWM_0_CTL_GENAUPD_GS    0x000000C0  // Globally Synchronized
N#define PWM_0_CTL_CMPBUPD       0x00000020  // Comparator B Update Mode
N#define PWM_0_CTL_CMPAUPD       0x00000010  // Comparator A Update Mode
N#define PWM_0_CTL_LOADUPD       0x00000008  // Load Register Update Mode
N#define PWM_0_CTL_DEBUG         0x00000004  // Debug Mode
N#define PWM_0_CTL_MODE          0x00000002  // Counter Mode
N#define PWM_0_CTL_ENABLE        0x00000001  // PWM Block Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_INTEN register.
N//
N//*****************************************************************************
N#define PWM_0_INTEN_TRCMPBD     0x00002000  // Trigger for Counter=PWMnCMPB
N                                            // Down
N#define PWM_0_INTEN_TRCMPBU     0x00001000  // Trigger for Counter=PWMnCMPB Up
N#define PWM_0_INTEN_TRCMPAD     0x00000800  // Trigger for Counter=PWMnCMPA
N                                            // Down
N#define PWM_0_INTEN_TRCMPAU     0x00000400  // Trigger for Counter=PWMnCMPA Up
N#define PWM_0_INTEN_TRCNTLOAD   0x00000200  // Trigger for Counter=PWMnLOAD
N#define PWM_0_INTEN_TRCNTZERO   0x00000100  // Trigger for Counter=0
N#define PWM_0_INTEN_INTCMPBD    0x00000020  // Interrupt for Counter=PWMnCMPB
N                                            // Down
N#define PWM_0_INTEN_INTCMPBU    0x00000010  // Interrupt for Counter=PWMnCMPB
N                                            // Up
N#define PWM_0_INTEN_INTCMPAD    0x00000008  // Interrupt for Counter=PWMnCMPA
N                                            // Down
N#define PWM_0_INTEN_INTCMPAU    0x00000004  // Interrupt for Counter=PWMnCMPA
N                                            // Up
N#define PWM_0_INTEN_INTCNTLOAD  0x00000002  // Interrupt for Counter=PWMnLOAD
N#define PWM_0_INTEN_INTCNTZERO  0x00000001  // Interrupt for Counter=0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_RIS register.
N//
N//*****************************************************************************
N#define PWM_0_RIS_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N                                            // Status
N#define PWM_0_RIS_INTCMPBU      0x00000010  // Comparator B Up Interrupt Status
N#define PWM_0_RIS_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N                                            // Status
N#define PWM_0_RIS_INTCMPAU      0x00000004  // Comparator A Up Interrupt Status
N#define PWM_0_RIS_INTCNTLOAD    0x00000002  // Counter=Load Interrupt Status
N#define PWM_0_RIS_INTCNTZERO    0x00000001  // Counter=0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_ISC register.
N//
N//*****************************************************************************
N#define PWM_0_ISC_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N#define PWM_0_ISC_INTCMPBU      0x00000010  // Comparator B Up Interrupt
N#define PWM_0_ISC_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N#define PWM_0_ISC_INTCMPAU      0x00000004  // Comparator A Up Interrupt
N#define PWM_0_ISC_INTCNTLOAD    0x00000002  // Counter=Load Interrupt
N#define PWM_0_ISC_INTCNTZERO    0x00000001  // Counter=0 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_LOAD register.
N//
N//*****************************************************************************
N#define PWM_0_LOAD_M            0x0000FFFF  // Counter Load Value
N#define PWM_0_LOAD_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_COUNT register.
N//
N//*****************************************************************************
N#define PWM_0_COUNT_M           0x0000FFFF  // Counter Value
N#define PWM_0_COUNT_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_CMPA register.
N//
N//*****************************************************************************
N#define PWM_0_CMPA_M            0x0000FFFF  // Comparator A Value
N#define PWM_0_CMPA_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_CMPB register.
N//
N//*****************************************************************************
N#define PWM_0_CMPB_M            0x0000FFFF  // Comparator B Value
N#define PWM_0_CMPB_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_GENA register.
N//
N//*****************************************************************************
N#define PWM_0_GENA_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_0_GENA_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENA_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_0_GENA_ACTCMPBD_INV 0x00000400  // Invert pwmA
N#define PWM_0_GENA_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Drive pwmA Low
X#define PWM_0_GENA_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_0_GENA_ACTCMPBD_ONE 0x00000C00  // Drive pwmA High
N#define PWM_0_GENA_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_0_GENA_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENA_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_0_GENA_ACTCMPBU_INV 0x00000100  // Invert pwmA
N#define PWM_0_GENA_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Drive pwmA Low
X#define PWM_0_GENA_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_0_GENA_ACTCMPBU_ONE 0x00000300  // Drive pwmA High
N#define PWM_0_GENA_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_0_GENA_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENA_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_0_GENA_ACTCMPAD_INV 0x00000040  // Invert pwmA
N#define PWM_0_GENA_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Drive pwmA Low
X#define PWM_0_GENA_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_0_GENA_ACTCMPAD_ONE 0x000000C0  // Drive pwmA High
N#define PWM_0_GENA_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_0_GENA_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENA_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_0_GENA_ACTCMPAU_INV 0x00000010  // Invert pwmA
N#define PWM_0_GENA_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Drive pwmA Low
X#define PWM_0_GENA_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_0_GENA_ACTCMPAU_ONE 0x00000030  // Drive pwmA High
N#define PWM_0_GENA_ACTLOAD_M    0x0000000C  // Action for Counter=LOAD
N#define PWM_0_GENA_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_0_GENA_ACTLOAD_INV  0x00000004  // Invert pwmA
N#define PWM_0_GENA_ACTLOAD_ZERO 0x00000008  // Drive pwmA Low
N#define PWM_0_GENA_ACTLOAD_ONE  0x0000000C  // Drive pwmA High
N#define PWM_0_GENA_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_0_GENA_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_0_GENA_ACTZERO_INV  0x00000001  // Invert pwmA
N#define PWM_0_GENA_ACTZERO_ZERO 0x00000002  // Drive pwmA Low
N#define PWM_0_GENA_ACTZERO_ONE  0x00000003  // Drive pwmA High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_GENB register.
N//
N//*****************************************************************************
N#define PWM_0_GENB_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_0_GENB_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENB_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_0_GENB_ACTCMPBD_INV 0x00000400  // Invert pwmB
N#define PWM_0_GENB_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Drive pwmB Low
X#define PWM_0_GENB_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_0_GENB_ACTCMPBD_ONE 0x00000C00  // Drive pwmB High
N#define PWM_0_GENB_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_0_GENB_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENB_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_0_GENB_ACTCMPBU_INV 0x00000100  // Invert pwmB
N#define PWM_0_GENB_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Drive pwmB Low
X#define PWM_0_GENB_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_0_GENB_ACTCMPBU_ONE 0x00000300  // Drive pwmB High
N#define PWM_0_GENB_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_0_GENB_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENB_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_0_GENB_ACTCMPAD_INV 0x00000040  // Invert pwmB
N#define PWM_0_GENB_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Drive pwmB Low
X#define PWM_0_GENB_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_0_GENB_ACTCMPAD_ONE 0x000000C0  // Drive pwmB High
N#define PWM_0_GENB_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_0_GENB_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENB_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_0_GENB_ACTCMPAU_INV 0x00000010  // Invert pwmB
N#define PWM_0_GENB_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Drive pwmB Low
X#define PWM_0_GENB_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_0_GENB_ACTCMPAU_ONE 0x00000030  // Drive pwmB High
N#define PWM_0_GENB_ACTLOAD_M    0x0000000C  // Action for Counter=LOAD
N#define PWM_0_GENB_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_0_GENB_ACTLOAD_INV  0x00000004  // Invert pwmB
N#define PWM_0_GENB_ACTLOAD_ZERO 0x00000008  // Drive pwmB Low
N#define PWM_0_GENB_ACTLOAD_ONE  0x0000000C  // Drive pwmB High
N#define PWM_0_GENB_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_0_GENB_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_0_GENB_ACTZERO_INV  0x00000001  // Invert pwmB
N#define PWM_0_GENB_ACTZERO_ZERO 0x00000002  // Drive pwmB Low
N#define PWM_0_GENB_ACTZERO_ONE  0x00000003  // Drive pwmB High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_DBCTL register.
N//
N//*****************************************************************************
N#define PWM_0_DBCTL_ENABLE      0x00000001  // Dead-Band Generator Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_DBRISE register.
N//
N//*****************************************************************************
N#define PWM_0_DBRISE_DELAY_M    0x00000FFF  // Dead-Band Rise Delay
N#define PWM_0_DBRISE_DELAY_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_DBFALL register.
N//
N//*****************************************************************************
N#define PWM_0_DBFALL_DELAY_M    0x00000FFF  // Dead-Band Fall Delay
N#define PWM_0_DBFALL_DELAY_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_FLTSRC0
N// register.
N//
N//*****************************************************************************
N#define PWM_0_FLTSRC0_FAULT3    0x00000008  // Fault3 Input
N#define PWM_0_FLTSRC0_FAULT2    0x00000004  // Fault2 Input
N#define PWM_0_FLTSRC0_FAULT1    0x00000002  // Fault1 Input
N#define PWM_0_FLTSRC0_FAULT0    0x00000001  // Fault0 Input
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_FLTSRC1
N// register.
N//
N//*****************************************************************************
N#define PWM_0_FLTSRC1_DCMP7     0x00000080  // Digital Comparator 7
N#define PWM_0_FLTSRC1_DCMP6     0x00000040  // Digital Comparator 6
N#define PWM_0_FLTSRC1_DCMP5     0x00000020  // Digital Comparator 5
N#define PWM_0_FLTSRC1_DCMP4     0x00000010  // Digital Comparator 4
N#define PWM_0_FLTSRC1_DCMP3     0x00000008  // Digital Comparator 3
N#define PWM_0_FLTSRC1_DCMP2     0x00000004  // Digital Comparator 2
N#define PWM_0_FLTSRC1_DCMP1     0x00000002  // Digital Comparator 1
N#define PWM_0_FLTSRC1_DCMP0     0x00000001  // Digital Comparator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_MINFLTPER
N// register.
N//
N//*****************************************************************************
N#define PWM_0_MINFLTPER_M       0x0000FFFF  // Minimum Fault Period
N#define PWM_0_MINFLTPER_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_CTL register.
N//
N//*****************************************************************************
N#define PWM_1_CTL_LATCH         0x00040000  // Latch Fault Input
N#define PWM_1_CTL_MINFLTPER     0x00020000  // Minimum Fault Period
N#define PWM_1_CTL_FLTSRC        0x00010000  // Fault Condition Source
N#define PWM_1_CTL_DBFALLUPD_M   0x0000C000  // PWMnDBFALL Update Mode
N#define PWM_1_CTL_DBFALLUPD_I   0x00000000  // Immediate
N#define PWM_1_CTL_DBFALLUPD_LS  0x00008000  // Locally Synchronized
N#define PWM_1_CTL_DBFALLUPD_GS  0x0000C000  // Globally Synchronized
N#define PWM_1_CTL_DBRISEUPD_M   0x00003000  // PWMnDBRISE Update Mode
N#define PWM_1_CTL_DBRISEUPD_I   0x00000000  // Immediate
N#define PWM_1_CTL_DBRISEUPD_LS  0x00002000  // Locally Synchronized
N#define PWM_1_CTL_DBRISEUPD_GS  0x00003000  // Globally Synchronized
N#define PWM_1_CTL_DBCTLUPD_M    0x00000C00  // PWMnDBCTL Update Mode
N#define PWM_1_CTL_DBCTLUPD_I    0x00000000  // Immediate
N#define PWM_1_CTL_DBCTLUPD_LS   0x00000800  // Locally Synchronized
N#define PWM_1_CTL_DBCTLUPD_GS   0x00000C00  // Globally Synchronized
N#define PWM_1_CTL_GENBUPD_M     0x00000300  // PWMnGENB Update Mode
N#define PWM_1_CTL_GENBUPD_I     0x00000000  // Immediate
N#define PWM_1_CTL_GENBUPD_LS    0x00000200  // Locally Synchronized
N#define PWM_1_CTL_GENBUPD_GS    0x00000300  // Globally Synchronized
N#define PWM_1_CTL_GENAUPD_M     0x000000C0  // PWMnGENA Update Mode
N#define PWM_1_CTL_GENAUPD_I     0x00000000  // Immediate
N#define PWM_1_CTL_GENAUPD_LS    0x00000080  // Locally Synchronized
N#define PWM_1_CTL_GENAUPD_GS    0x000000C0  // Globally Synchronized
N#define PWM_1_CTL_CMPBUPD       0x00000020  // Comparator B Update Mode
N#define PWM_1_CTL_CMPAUPD       0x00000010  // Comparator A Update Mode
N#define PWM_1_CTL_LOADUPD       0x00000008  // Load Register Update Mode
N#define PWM_1_CTL_DEBUG         0x00000004  // Debug Mode
N#define PWM_1_CTL_MODE          0x00000002  // Counter Mode
N#define PWM_1_CTL_ENABLE        0x00000001  // PWM Block Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_INTEN register.
N//
N//*****************************************************************************
N#define PWM_1_INTEN_TRCMPBD     0x00002000  // Trigger for Counter=PWMnCMPB
N                                            // Down
N#define PWM_1_INTEN_TRCMPBU     0x00001000  // Trigger for Counter=PWMnCMPB Up
N#define PWM_1_INTEN_TRCMPAD     0x00000800  // Trigger for Counter=PWMnCMPA
N                                            // Down
N#define PWM_1_INTEN_TRCMPAU     0x00000400  // Trigger for Counter=PWMnCMPA Up
N#define PWM_1_INTEN_TRCNTLOAD   0x00000200  // Trigger for Counter=PWMnLOAD
N#define PWM_1_INTEN_TRCNTZERO   0x00000100  // Trigger for Counter=0
N#define PWM_1_INTEN_INTCMPBD    0x00000020  // Interrupt for Counter=PWMnCMPB
N                                            // Down
N#define PWM_1_INTEN_INTCMPBU    0x00000010  // Interrupt for Counter=PWMnCMPB
N                                            // Up
N#define PWM_1_INTEN_INTCMPAD    0x00000008  // Interrupt for Counter=PWMnCMPA
N                                            // Down
N#define PWM_1_INTEN_INTCMPAU    0x00000004  // Interrupt for Counter=PWMnCMPA
N                                            // Up
N#define PWM_1_INTEN_INTCNTLOAD  0x00000002  // Interrupt for Counter=PWMnLOAD
N#define PWM_1_INTEN_INTCNTZERO  0x00000001  // Interrupt for Counter=0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_RIS register.
N//
N//*****************************************************************************
N#define PWM_1_RIS_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N                                            // Status
N#define PWM_1_RIS_INTCMPBU      0x00000010  // Comparator B Up Interrupt Status
N#define PWM_1_RIS_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N                                            // Status
N#define PWM_1_RIS_INTCMPAU      0x00000004  // Comparator A Up Interrupt Status
N#define PWM_1_RIS_INTCNTLOAD    0x00000002  // Counter=Load Interrupt Status
N#define PWM_1_RIS_INTCNTZERO    0x00000001  // Counter=0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_ISC register.
N//
N//*****************************************************************************
N#define PWM_1_ISC_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N#define PWM_1_ISC_INTCMPBU      0x00000010  // Comparator B Up Interrupt
N#define PWM_1_ISC_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N#define PWM_1_ISC_INTCMPAU      0x00000004  // Comparator A Up Interrupt
N#define PWM_1_ISC_INTCNTLOAD    0x00000002  // Counter=Load Interrupt
N#define PWM_1_ISC_INTCNTZERO    0x00000001  // Counter=0 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_LOAD register.
N//
N//*****************************************************************************
N#define PWM_1_LOAD_LOAD_M       0x0000FFFF  // Counter Load Value
N#define PWM_1_LOAD_LOAD_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_COUNT register.
N//
N//*****************************************************************************
N#define PWM_1_COUNT_COUNT_M     0x0000FFFF  // Counter Value
N#define PWM_1_COUNT_COUNT_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_CMPA register.
N//
N//*****************************************************************************
N#define PWM_1_CMPA_COMPA_M      0x0000FFFF  // Comparator A Value
N#define PWM_1_CMPA_COMPA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_CMPB register.
N//
N//*****************************************************************************
N#define PWM_1_CMPB_COMPB_M      0x0000FFFF  // Comparator B Value
N#define PWM_1_CMPB_COMPB_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_GENA register.
N//
N//*****************************************************************************
N#define PWM_1_GENA_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_1_GENA_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENA_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_1_GENA_ACTCMPBD_INV 0x00000400  // Invert pwmA
N#define PWM_1_GENA_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Drive pwmA Low
X#define PWM_1_GENA_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_1_GENA_ACTCMPBD_ONE 0x00000C00  // Drive pwmA High
N#define PWM_1_GENA_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_1_GENA_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENA_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_1_GENA_ACTCMPBU_INV 0x00000100  // Invert pwmA
N#define PWM_1_GENA_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Drive pwmA Low
X#define PWM_1_GENA_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_1_GENA_ACTCMPBU_ONE 0x00000300  // Drive pwmA High
N#define PWM_1_GENA_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_1_GENA_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENA_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_1_GENA_ACTCMPAD_INV 0x00000040  // Invert pwmA
N#define PWM_1_GENA_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Drive pwmA Low
X#define PWM_1_GENA_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_1_GENA_ACTCMPAD_ONE 0x000000C0  // Drive pwmA High
N#define PWM_1_GENA_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_1_GENA_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENA_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_1_GENA_ACTCMPAU_INV 0x00000010  // Invert pwmA
N#define PWM_1_GENA_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Drive pwmA Low
X#define PWM_1_GENA_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_1_GENA_ACTCMPAU_ONE 0x00000030  // Drive pwmA High
N#define PWM_1_GENA_ACTLOAD_M    0x0000000C  // Action for Counter=LOAD
N#define PWM_1_GENA_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_1_GENA_ACTLOAD_INV  0x00000004  // Invert pwmA
N#define PWM_1_GENA_ACTLOAD_ZERO 0x00000008  // Drive pwmA Low
N#define PWM_1_GENA_ACTLOAD_ONE  0x0000000C  // Drive pwmA High
N#define PWM_1_GENA_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_1_GENA_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_1_GENA_ACTZERO_INV  0x00000001  // Invert pwmA
N#define PWM_1_GENA_ACTZERO_ZERO 0x00000002  // Drive pwmA Low
N#define PWM_1_GENA_ACTZERO_ONE  0x00000003  // Drive pwmA High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_GENB register.
N//
N//*****************************************************************************
N#define PWM_1_GENB_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_1_GENB_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENB_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_1_GENB_ACTCMPBD_INV 0x00000400  // Invert pwmB
N#define PWM_1_GENB_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Drive pwmB Low
X#define PWM_1_GENB_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_1_GENB_ACTCMPBD_ONE 0x00000C00  // Drive pwmB High
N#define PWM_1_GENB_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_1_GENB_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENB_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_1_GENB_ACTCMPBU_INV 0x00000100  // Invert pwmB
N#define PWM_1_GENB_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Drive pwmB Low
X#define PWM_1_GENB_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_1_GENB_ACTCMPBU_ONE 0x00000300  // Drive pwmB High
N#define PWM_1_GENB_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_1_GENB_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENB_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_1_GENB_ACTCMPAD_INV 0x00000040  // Invert pwmB
N#define PWM_1_GENB_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Drive pwmB Low
X#define PWM_1_GENB_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_1_GENB_ACTCMPAD_ONE 0x000000C0  // Drive pwmB High
N#define PWM_1_GENB_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_1_GENB_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENB_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_1_GENB_ACTCMPAU_INV 0x00000010  // Invert pwmB
N#define PWM_1_GENB_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Drive pwmB Low
X#define PWM_1_GENB_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_1_GENB_ACTCMPAU_ONE 0x00000030  // Drive pwmB High
N#define PWM_1_GENB_ACTLOAD_M    0x0000000C  // Action for Counter=LOAD
N#define PWM_1_GENB_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_1_GENB_ACTLOAD_INV  0x00000004  // Invert pwmB
N#define PWM_1_GENB_ACTLOAD_ZERO 0x00000008  // Drive pwmB Low
N#define PWM_1_GENB_ACTLOAD_ONE  0x0000000C  // Drive pwmB High
N#define PWM_1_GENB_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_1_GENB_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_1_GENB_ACTZERO_INV  0x00000001  // Invert pwmB
N#define PWM_1_GENB_ACTZERO_ZERO 0x00000002  // Drive pwmB Low
N#define PWM_1_GENB_ACTZERO_ONE  0x00000003  // Drive pwmB High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_DBCTL register.
N//
N//*****************************************************************************
N#define PWM_1_DBCTL_ENABLE      0x00000001  // Dead-Band Generator Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_DBRISE register.
N//
N//*****************************************************************************
N#define PWM_1_DBRISE_RISEDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Rise Delay
X#define PWM_1_DBRISE_RISEDELAY_M                                                                              0x00000FFF  
N#define PWM_1_DBRISE_RISEDELAY_S                                              \
N                                0
X#define PWM_1_DBRISE_RISEDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_DBFALL register.
N//
N//*****************************************************************************
N#define PWM_1_DBFALL_FALLDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Fall Delay
X#define PWM_1_DBFALL_FALLDELAY_M                                                                              0x00000FFF  
N#define PWM_1_DBFALL_FALLDELAY_S                                              \
N                                0
X#define PWM_1_DBFALL_FALLDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_FLTSRC0
N// register.
N//
N//*****************************************************************************
N#define PWM_1_FLTSRC0_FAULT3    0x00000008  // Fault3 Input
N#define PWM_1_FLTSRC0_FAULT2    0x00000004  // Fault2 Input
N#define PWM_1_FLTSRC0_FAULT1    0x00000002  // Fault1 Input
N#define PWM_1_FLTSRC0_FAULT0    0x00000001  // Fault0 Input
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_FLTSRC1
N// register.
N//
N//*****************************************************************************
N#define PWM_1_FLTSRC1_DCMP7     0x00000080  // Digital Comparator 7
N#define PWM_1_FLTSRC1_DCMP6     0x00000040  // Digital Comparator 6
N#define PWM_1_FLTSRC1_DCMP5     0x00000020  // Digital Comparator 5
N#define PWM_1_FLTSRC1_DCMP4     0x00000010  // Digital Comparator 4
N#define PWM_1_FLTSRC1_DCMP3     0x00000008  // Digital Comparator 3
N#define PWM_1_FLTSRC1_DCMP2     0x00000004  // Digital Comparator 2
N#define PWM_1_FLTSRC1_DCMP1     0x00000002  // Digital Comparator 1
N#define PWM_1_FLTSRC1_DCMP0     0x00000001  // Digital Comparator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_MINFLTPER
N// register.
N//
N//*****************************************************************************
N#define PWM_1_MINFLTPER_MFP_M   0x0000FFFF  // Minimum Fault Period
N#define PWM_1_MINFLTPER_MFP_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_CTL register.
N//
N//*****************************************************************************
N#define PWM_2_CTL_LATCH         0x00040000  // Latch Fault Input
N#define PWM_2_CTL_MINFLTPER     0x00020000  // Minimum Fault Period
N#define PWM_2_CTL_FLTSRC        0x00010000  // Fault Condition Source
N#define PWM_2_CTL_DBFALLUPD_M   0x0000C000  // PWMnDBFALL Update Mode
N#define PWM_2_CTL_DBFALLUPD_I   0x00000000  // Immediate
N#define PWM_2_CTL_DBFALLUPD_LS  0x00008000  // Locally Synchronized
N#define PWM_2_CTL_DBFALLUPD_GS  0x0000C000  // Globally Synchronized
N#define PWM_2_CTL_DBRISEUPD_M   0x00003000  // PWMnDBRISE Update Mode
N#define PWM_2_CTL_DBRISEUPD_I   0x00000000  // Immediate
N#define PWM_2_CTL_DBRISEUPD_LS  0x00002000  // Locally Synchronized
N#define PWM_2_CTL_DBRISEUPD_GS  0x00003000  // Globally Synchronized
N#define PWM_2_CTL_DBCTLUPD_M    0x00000C00  // PWMnDBCTL Update Mode
N#define PWM_2_CTL_DBCTLUPD_I    0x00000000  // Immediate
N#define PWM_2_CTL_DBCTLUPD_LS   0x00000800  // Locally Synchronized
N#define PWM_2_CTL_DBCTLUPD_GS   0x00000C00  // Globally Synchronized
N#define PWM_2_CTL_GENBUPD_M     0x00000300  // PWMnGENB Update Mode
N#define PWM_2_CTL_GENBUPD_I     0x00000000  // Immediate
N#define PWM_2_CTL_GENBUPD_LS    0x00000200  // Locally Synchronized
N#define PWM_2_CTL_GENBUPD_GS    0x00000300  // Globally Synchronized
N#define PWM_2_CTL_GENAUPD_M     0x000000C0  // PWMnGENA Update Mode
N#define PWM_2_CTL_GENAUPD_I     0x00000000  // Immediate
N#define PWM_2_CTL_GENAUPD_LS    0x00000080  // Locally Synchronized
N#define PWM_2_CTL_GENAUPD_GS    0x000000C0  // Globally Synchronized
N#define PWM_2_CTL_CMPBUPD       0x00000020  // Comparator B Update Mode
N#define PWM_2_CTL_CMPAUPD       0x00000010  // Comparator A Update Mode
N#define PWM_2_CTL_LOADUPD       0x00000008  // Load Register Update Mode
N#define PWM_2_CTL_DEBUG         0x00000004  // Debug Mode
N#define PWM_2_CTL_MODE          0x00000002  // Counter Mode
N#define PWM_2_CTL_ENABLE        0x00000001  // PWM Block Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_INTEN register.
N//
N//*****************************************************************************
N#define PWM_2_INTEN_TRCMPBD     0x00002000  // Trigger for Counter=PWMnCMPB
N                                            // Down
N#define PWM_2_INTEN_TRCMPBU     0x00001000  // Trigger for Counter=PWMnCMPB Up
N#define PWM_2_INTEN_TRCMPAD     0x00000800  // Trigger for Counter=PWMnCMPA
N                                            // Down
N#define PWM_2_INTEN_TRCMPAU     0x00000400  // Trigger for Counter=PWMnCMPA Up
N#define PWM_2_INTEN_TRCNTLOAD   0x00000200  // Trigger for Counter=PWMnLOAD
N#define PWM_2_INTEN_TRCNTZERO   0x00000100  // Trigger for Counter=0
N#define PWM_2_INTEN_INTCMPBD    0x00000020  // Interrupt for Counter=PWMnCMPB
N                                            // Down
N#define PWM_2_INTEN_INTCMPBU    0x00000010  // Interrupt for Counter=PWMnCMPB
N                                            // Up
N#define PWM_2_INTEN_INTCMPAD    0x00000008  // Interrupt for Counter=PWMnCMPA
N                                            // Down
N#define PWM_2_INTEN_INTCMPAU    0x00000004  // Interrupt for Counter=PWMnCMPA
N                                            // Up
N#define PWM_2_INTEN_INTCNTLOAD  0x00000002  // Interrupt for Counter=PWMnLOAD
N#define PWM_2_INTEN_INTCNTZERO  0x00000001  // Interrupt for Counter=0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_RIS register.
N//
N//*****************************************************************************
N#define PWM_2_RIS_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N                                            // Status
N#define PWM_2_RIS_INTCMPBU      0x00000010  // Comparator B Up Interrupt Status
N#define PWM_2_RIS_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N                                            // Status
N#define PWM_2_RIS_INTCMPAU      0x00000004  // Comparator A Up Interrupt Status
N#define PWM_2_RIS_INTCNTLOAD    0x00000002  // Counter=Load Interrupt Status
N#define PWM_2_RIS_INTCNTZERO    0x00000001  // Counter=0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_ISC register.
N//
N//*****************************************************************************
N#define PWM_2_ISC_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N#define PWM_2_ISC_INTCMPBU      0x00000010  // Comparator B Up Interrupt
N#define PWM_2_ISC_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N#define PWM_2_ISC_INTCMPAU      0x00000004  // Comparator A Up Interrupt
N#define PWM_2_ISC_INTCNTLOAD    0x00000002  // Counter=Load Interrupt
N#define PWM_2_ISC_INTCNTZERO    0x00000001  // Counter=0 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_LOAD register.
N//
N//*****************************************************************************
N#define PWM_2_LOAD_LOAD_M       0x0000FFFF  // Counter Load Value
N#define PWM_2_LOAD_LOAD_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_COUNT register.
N//
N//*****************************************************************************
N#define PWM_2_COUNT_COUNT_M     0x0000FFFF  // Counter Value
N#define PWM_2_COUNT_COUNT_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_CMPA register.
N//
N//*****************************************************************************
N#define PWM_2_CMPA_COMPA_M      0x0000FFFF  // Comparator A Value
N#define PWM_2_CMPA_COMPA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_CMPB register.
N//
N//*****************************************************************************
N#define PWM_2_CMPB_COMPB_M      0x0000FFFF  // Comparator B Value
N#define PWM_2_CMPB_COMPB_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_GENA register.
N//
N//*****************************************************************************
N#define PWM_2_GENA_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_2_GENA_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENA_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_2_GENA_ACTCMPBD_INV 0x00000400  // Invert pwmA
N#define PWM_2_GENA_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Drive pwmA Low
X#define PWM_2_GENA_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_2_GENA_ACTCMPBD_ONE 0x00000C00  // Drive pwmA High
N#define PWM_2_GENA_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_2_GENA_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENA_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_2_GENA_ACTCMPBU_INV 0x00000100  // Invert pwmA
N#define PWM_2_GENA_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Drive pwmA Low
X#define PWM_2_GENA_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_2_GENA_ACTCMPBU_ONE 0x00000300  // Drive pwmA High
N#define PWM_2_GENA_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_2_GENA_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENA_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_2_GENA_ACTCMPAD_INV 0x00000040  // Invert pwmA
N#define PWM_2_GENA_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Drive pwmA Low
X#define PWM_2_GENA_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_2_GENA_ACTCMPAD_ONE 0x000000C0  // Drive pwmA High
N#define PWM_2_GENA_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_2_GENA_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENA_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_2_GENA_ACTCMPAU_INV 0x00000010  // Invert pwmA
N#define PWM_2_GENA_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Drive pwmA Low
X#define PWM_2_GENA_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_2_GENA_ACTCMPAU_ONE 0x00000030  // Drive pwmA High
N#define PWM_2_GENA_ACTLOAD_M    0x0000000C  // Action for Counter=LOAD
N#define PWM_2_GENA_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_2_GENA_ACTLOAD_INV  0x00000004  // Invert pwmA
N#define PWM_2_GENA_ACTLOAD_ZERO 0x00000008  // Drive pwmA Low
N#define PWM_2_GENA_ACTLOAD_ONE  0x0000000C  // Drive pwmA High
N#define PWM_2_GENA_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_2_GENA_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_2_GENA_ACTZERO_INV  0x00000001  // Invert pwmA
N#define PWM_2_GENA_ACTZERO_ZERO 0x00000002  // Drive pwmA Low
N#define PWM_2_GENA_ACTZERO_ONE  0x00000003  // Drive pwmA High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_GENB register.
N//
N//*****************************************************************************
N#define PWM_2_GENB_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_2_GENB_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENB_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_2_GENB_ACTCMPBD_INV 0x00000400  // Invert pwmB
N#define PWM_2_GENB_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Drive pwmB Low
X#define PWM_2_GENB_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_2_GENB_ACTCMPBD_ONE 0x00000C00  // Drive pwmB High
N#define PWM_2_GENB_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_2_GENB_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENB_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_2_GENB_ACTCMPBU_INV 0x00000100  // Invert pwmB
N#define PWM_2_GENB_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Drive pwmB Low
X#define PWM_2_GENB_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_2_GENB_ACTCMPBU_ONE 0x00000300  // Drive pwmB High
N#define PWM_2_GENB_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_2_GENB_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENB_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_2_GENB_ACTCMPAD_INV 0x00000040  // Invert pwmB
N#define PWM_2_GENB_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Drive pwmB Low
X#define PWM_2_GENB_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_2_GENB_ACTCMPAD_ONE 0x000000C0  // Drive pwmB High
N#define PWM_2_GENB_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_2_GENB_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENB_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_2_GENB_ACTCMPAU_INV 0x00000010  // Invert pwmB
N#define PWM_2_GENB_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Drive pwmB Low
X#define PWM_2_GENB_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_2_GENB_ACTCMPAU_ONE 0x00000030  // Drive pwmB High
N#define PWM_2_GENB_ACTLOAD_M    0x0000000C  // Action for Counter=LOAD
N#define PWM_2_GENB_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_2_GENB_ACTLOAD_INV  0x00000004  // Invert pwmB
N#define PWM_2_GENB_ACTLOAD_ZERO 0x00000008  // Drive pwmB Low
N#define PWM_2_GENB_ACTLOAD_ONE  0x0000000C  // Drive pwmB High
N#define PWM_2_GENB_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_2_GENB_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_2_GENB_ACTZERO_INV  0x00000001  // Invert pwmB
N#define PWM_2_GENB_ACTZERO_ZERO 0x00000002  // Drive pwmB Low
N#define PWM_2_GENB_ACTZERO_ONE  0x00000003  // Drive pwmB High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_DBCTL register.
N//
N//*****************************************************************************
N#define PWM_2_DBCTL_ENABLE      0x00000001  // Dead-Band Generator Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_DBRISE register.
N//
N//*****************************************************************************
N#define PWM_2_DBRISE_RISEDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Rise Delay
X#define PWM_2_DBRISE_RISEDELAY_M                                                                              0x00000FFF  
N#define PWM_2_DBRISE_RISEDELAY_S                                              \
N                                0
X#define PWM_2_DBRISE_RISEDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_DBFALL register.
N//
N//*****************************************************************************
N#define PWM_2_DBFALL_FALLDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Fall Delay
X#define PWM_2_DBFALL_FALLDELAY_M                                                                              0x00000FFF  
N#define PWM_2_DBFALL_FALLDELAY_S                                              \
N                                0
X#define PWM_2_DBFALL_FALLDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_FLTSRC0
N// register.
N//
N//*****************************************************************************
N#define PWM_2_FLTSRC0_FAULT3    0x00000008  // Fault3 Input
N#define PWM_2_FLTSRC0_FAULT2    0x00000004  // Fault2 Input
N#define PWM_2_FLTSRC0_FAULT1    0x00000002  // Fault1 Input
N#define PWM_2_FLTSRC0_FAULT0    0x00000001  // Fault0 Input
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_FLTSRC1
N// register.
N//
N//*****************************************************************************
N#define PWM_2_FLTSRC1_DCMP7     0x00000080  // Digital Comparator 7
N#define PWM_2_FLTSRC1_DCMP6     0x00000040  // Digital Comparator 6
N#define PWM_2_FLTSRC1_DCMP5     0x00000020  // Digital Comparator 5
N#define PWM_2_FLTSRC1_DCMP4     0x00000010  // Digital Comparator 4
N#define PWM_2_FLTSRC1_DCMP3     0x00000008  // Digital Comparator 3
N#define PWM_2_FLTSRC1_DCMP2     0x00000004  // Digital Comparator 2
N#define PWM_2_FLTSRC1_DCMP1     0x00000002  // Digital Comparator 1
N#define PWM_2_FLTSRC1_DCMP0     0x00000001  // Digital Comparator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_MINFLTPER
N// register.
N//
N//*****************************************************************************
N#define PWM_2_MINFLTPER_MFP_M   0x0000FFFF  // Minimum Fault Period
N#define PWM_2_MINFLTPER_MFP_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_CTL register.
N//
N//*****************************************************************************
N#define PWM_3_CTL_LATCH         0x00040000  // Latch Fault Input
N#define PWM_3_CTL_MINFLTPER     0x00020000  // Minimum Fault Period
N#define PWM_3_CTL_FLTSRC        0x00010000  // Fault Condition Source
N#define PWM_3_CTL_DBFALLUPD_M   0x0000C000  // PWMnDBFALL Update Mode
N#define PWM_3_CTL_DBFALLUPD_I   0x00000000  // Immediate
N#define PWM_3_CTL_DBFALLUPD_LS  0x00008000  // Locally Synchronized
N#define PWM_3_CTL_DBFALLUPD_GS  0x0000C000  // Globally Synchronized
N#define PWM_3_CTL_DBRISEUPD_M   0x00003000  // PWMnDBRISE Update Mode
N#define PWM_3_CTL_DBRISEUPD_I   0x00000000  // Immediate
N#define PWM_3_CTL_DBRISEUPD_LS  0x00002000  // Locally Synchronized
N#define PWM_3_CTL_DBRISEUPD_GS  0x00003000  // Globally Synchronized
N#define PWM_3_CTL_DBCTLUPD_M    0x00000C00  // PWMnDBCTL Update Mode
N#define PWM_3_CTL_DBCTLUPD_I    0x00000000  // Immediate
N#define PWM_3_CTL_DBCTLUPD_LS   0x00000800  // Locally Synchronized
N#define PWM_3_CTL_DBCTLUPD_GS   0x00000C00  // Globally Synchronized
N#define PWM_3_CTL_GENBUPD_M     0x00000300  // PWMnGENB Update Mode
N#define PWM_3_CTL_GENBUPD_I     0x00000000  // Immediate
N#define PWM_3_CTL_GENBUPD_LS    0x00000200  // Locally Synchronized
N#define PWM_3_CTL_GENBUPD_GS    0x00000300  // Globally Synchronized
N#define PWM_3_CTL_GENAUPD_M     0x000000C0  // PWMnGENA Update Mode
N#define PWM_3_CTL_GENAUPD_I     0x00000000  // Immediate
N#define PWM_3_CTL_GENAUPD_LS    0x00000080  // Locally Synchronized
N#define PWM_3_CTL_GENAUPD_GS    0x000000C0  // Globally Synchronized
N#define PWM_3_CTL_CMPBUPD       0x00000020  // Comparator B Update Mode
N#define PWM_3_CTL_CMPAUPD       0x00000010  // Comparator A Update Mode
N#define PWM_3_CTL_LOADUPD       0x00000008  // Load Register Update Mode
N#define PWM_3_CTL_DEBUG         0x00000004  // Debug Mode
N#define PWM_3_CTL_MODE          0x00000002  // Counter Mode
N#define PWM_3_CTL_ENABLE        0x00000001  // PWM Block Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_INTEN register.
N//
N//*****************************************************************************
N#define PWM_3_INTEN_TRCMPBD     0x00002000  // Trigger for Counter=PWMnCMPB
N                                            // Down
N#define PWM_3_INTEN_TRCMPBU     0x00001000  // Trigger for Counter=PWMnCMPB Up
N#define PWM_3_INTEN_TRCMPAD     0x00000800  // Trigger for Counter=PWMnCMPA
N                                            // Down
N#define PWM_3_INTEN_TRCMPAU     0x00000400  // Trigger for Counter=PWMnCMPA Up
N#define PWM_3_INTEN_TRCNTLOAD   0x00000200  // Trigger for Counter=PWMnLOAD
N#define PWM_3_INTEN_TRCNTZERO   0x00000100  // Trigger for Counter=0
N#define PWM_3_INTEN_INTCMPBD    0x00000020  // Interrupt for Counter=PWMnCMPB
N                                            // Down
N#define PWM_3_INTEN_INTCMPBU    0x00000010  // Interrupt for Counter=PWMnCMPB
N                                            // Up
N#define PWM_3_INTEN_INTCMPAD    0x00000008  // Interrupt for Counter=PWMnCMPA
N                                            // Down
N#define PWM_3_INTEN_INTCMPAU    0x00000004  // Interrupt for Counter=PWMnCMPA
N                                            // Up
N#define PWM_3_INTEN_INTCNTLOAD  0x00000002  // Interrupt for Counter=PWMnLOAD
N#define PWM_3_INTEN_INTCNTZERO  0x00000001  // Interrupt for Counter=0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_RIS register.
N//
N//*****************************************************************************
N#define PWM_3_RIS_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N                                            // Status
N#define PWM_3_RIS_INTCMPBU      0x00000010  // Comparator B Up Interrupt Status
N#define PWM_3_RIS_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N                                            // Status
N#define PWM_3_RIS_INTCMPAU      0x00000004  // Comparator A Up Interrupt Status
N#define PWM_3_RIS_INTCNTLOAD    0x00000002  // Counter=Load Interrupt Status
N#define PWM_3_RIS_INTCNTZERO    0x00000001  // Counter=0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_ISC register.
N//
N//*****************************************************************************
N#define PWM_3_ISC_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N#define PWM_3_ISC_INTCMPBU      0x00000010  // Comparator B Up Interrupt
N#define PWM_3_ISC_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N#define PWM_3_ISC_INTCMPAU      0x00000004  // Comparator A Up Interrupt
N#define PWM_3_ISC_INTCNTLOAD    0x00000002  // Counter=Load Interrupt
N#define PWM_3_ISC_INTCNTZERO    0x00000001  // Counter=0 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_LOAD register.
N//
N//*****************************************************************************
N#define PWM_3_LOAD_LOAD_M       0x0000FFFF  // Counter Load Value
N#define PWM_3_LOAD_LOAD_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_COUNT register.
N//
N//*****************************************************************************
N#define PWM_3_COUNT_COUNT_M     0x0000FFFF  // Counter Value
N#define PWM_3_COUNT_COUNT_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_CMPA register.
N//
N//*****************************************************************************
N#define PWM_3_CMPA_COMPA_M      0x0000FFFF  // Comparator A Value
N#define PWM_3_CMPA_COMPA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_CMPB register.
N//
N//*****************************************************************************
N#define PWM_3_CMPB_COMPB_M      0x0000FFFF  // Comparator B Value
N#define PWM_3_CMPB_COMPB_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_GENA register.
N//
N//*****************************************************************************
N#define PWM_3_GENA_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_3_GENA_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENA_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_3_GENA_ACTCMPBD_INV 0x00000400  // Invert pwmA
N#define PWM_3_GENA_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Drive pwmA Low
X#define PWM_3_GENA_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_3_GENA_ACTCMPBD_ONE 0x00000C00  // Drive pwmA High
N#define PWM_3_GENA_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_3_GENA_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENA_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_3_GENA_ACTCMPBU_INV 0x00000100  // Invert pwmA
N#define PWM_3_GENA_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Drive pwmA Low
X#define PWM_3_GENA_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_3_GENA_ACTCMPBU_ONE 0x00000300  // Drive pwmA High
N#define PWM_3_GENA_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_3_GENA_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENA_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_3_GENA_ACTCMPAD_INV 0x00000040  // Invert pwmA
N#define PWM_3_GENA_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Drive pwmA Low
X#define PWM_3_GENA_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_3_GENA_ACTCMPAD_ONE 0x000000C0  // Drive pwmA High
N#define PWM_3_GENA_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_3_GENA_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENA_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_3_GENA_ACTCMPAU_INV 0x00000010  // Invert pwmA
N#define PWM_3_GENA_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Drive pwmA Low
X#define PWM_3_GENA_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_3_GENA_ACTCMPAU_ONE 0x00000030  // Drive pwmA High
N#define PWM_3_GENA_ACTLOAD_M    0x0000000C  // Action for Counter=LOAD
N#define PWM_3_GENA_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_3_GENA_ACTLOAD_INV  0x00000004  // Invert pwmA
N#define PWM_3_GENA_ACTLOAD_ZERO 0x00000008  // Drive pwmA Low
N#define PWM_3_GENA_ACTLOAD_ONE  0x0000000C  // Drive pwmA High
N#define PWM_3_GENA_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_3_GENA_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_3_GENA_ACTZERO_INV  0x00000001  // Invert pwmA
N#define PWM_3_GENA_ACTZERO_ZERO 0x00000002  // Drive pwmA Low
N#define PWM_3_GENA_ACTZERO_ONE  0x00000003  // Drive pwmA High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_GENB register.
N//
N//*****************************************************************************
N#define PWM_3_GENB_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_3_GENB_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENB_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_3_GENB_ACTCMPBD_INV 0x00000400  // Invert pwmB
N#define PWM_3_GENB_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Drive pwmB Low
X#define PWM_3_GENB_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_3_GENB_ACTCMPBD_ONE 0x00000C00  // Drive pwmB High
N#define PWM_3_GENB_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_3_GENB_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENB_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_3_GENB_ACTCMPBU_INV 0x00000100  // Invert pwmB
N#define PWM_3_GENB_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Drive pwmB Low
X#define PWM_3_GENB_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_3_GENB_ACTCMPBU_ONE 0x00000300  // Drive pwmB High
N#define PWM_3_GENB_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_3_GENB_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENB_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_3_GENB_ACTCMPAD_INV 0x00000040  // Invert pwmB
N#define PWM_3_GENB_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Drive pwmB Low
X#define PWM_3_GENB_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_3_GENB_ACTCMPAD_ONE 0x000000C0  // Drive pwmB High
N#define PWM_3_GENB_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_3_GENB_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENB_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_3_GENB_ACTCMPAU_INV 0x00000010  // Invert pwmB
N#define PWM_3_GENB_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Drive pwmB Low
X#define PWM_3_GENB_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_3_GENB_ACTCMPAU_ONE 0x00000030  // Drive pwmB High
N#define PWM_3_GENB_ACTLOAD_M    0x0000000C  // Action for Counter=LOAD
N#define PWM_3_GENB_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_3_GENB_ACTLOAD_INV  0x00000004  // Invert pwmB
N#define PWM_3_GENB_ACTLOAD_ZERO 0x00000008  // Drive pwmB Low
N#define PWM_3_GENB_ACTLOAD_ONE  0x0000000C  // Drive pwmB High
N#define PWM_3_GENB_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_3_GENB_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_3_GENB_ACTZERO_INV  0x00000001  // Invert pwmB
N#define PWM_3_GENB_ACTZERO_ZERO 0x00000002  // Drive pwmB Low
N#define PWM_3_GENB_ACTZERO_ONE  0x00000003  // Drive pwmB High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_DBCTL register.
N//
N//*****************************************************************************
N#define PWM_3_DBCTL_ENABLE      0x00000001  // Dead-Band Generator Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_DBRISE register.
N//
N//*****************************************************************************
N#define PWM_3_DBRISE_RISEDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Rise Delay
X#define PWM_3_DBRISE_RISEDELAY_M                                                                              0x00000FFF  
N#define PWM_3_DBRISE_RISEDELAY_S                                              \
N                                0
X#define PWM_3_DBRISE_RISEDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_DBFALL register.
N//
N//*****************************************************************************
N#define PWM_3_DBFALL_FALLDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Fall Delay
X#define PWM_3_DBFALL_FALLDELAY_M                                                                              0x00000FFF  
N#define PWM_3_DBFALL_FALLDELAY_S                                              \
N                                0
X#define PWM_3_DBFALL_FALLDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_FLTSRC0
N// register.
N//
N//*****************************************************************************
N#define PWM_3_FLTSRC0_FAULT3    0x00000008  // Fault3 Input
N#define PWM_3_FLTSRC0_FAULT2    0x00000004  // Fault2 Input
N#define PWM_3_FLTSRC0_FAULT1    0x00000002  // Fault1 Input
N#define PWM_3_FLTSRC0_FAULT0    0x00000001  // Fault0 Input
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_FLTSRC1
N// register.
N//
N//*****************************************************************************
N#define PWM_3_FLTSRC1_DCMP7     0x00000080  // Digital Comparator 7
N#define PWM_3_FLTSRC1_DCMP6     0x00000040  // Digital Comparator 6
N#define PWM_3_FLTSRC1_DCMP5     0x00000020  // Digital Comparator 5
N#define PWM_3_FLTSRC1_DCMP4     0x00000010  // Digital Comparator 4
N#define PWM_3_FLTSRC1_DCMP3     0x00000008  // Digital Comparator 3
N#define PWM_3_FLTSRC1_DCMP2     0x00000004  // Digital Comparator 2
N#define PWM_3_FLTSRC1_DCMP1     0x00000002  // Digital Comparator 1
N#define PWM_3_FLTSRC1_DCMP0     0x00000001  // Digital Comparator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_MINFLTPER
N// register.
N//
N//*****************************************************************************
N#define PWM_3_MINFLTPER_MFP_M   0x0000FFFF  // Minimum Fault Period
N#define PWM_3_MINFLTPER_MFP_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_FLTSEN register.
N//
N//*****************************************************************************
N#define PWM_0_FLTSEN_FAULT3     0x00000008  // Fault3 Sense
N#define PWM_0_FLTSEN_FAULT2     0x00000004  // Fault2 Sense
N#define PWM_0_FLTSEN_FAULT1     0x00000002  // Fault1 Sense
N#define PWM_0_FLTSEN_FAULT0     0x00000001  // Fault0 Sense
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_FLTSTAT0
N// register.
N//
N//*****************************************************************************
N#define PWM_0_FLTSTAT0_FAULT3   0x00000008  // Fault Input 3
N#define PWM_0_FLTSTAT0_FAULT2   0x00000004  // Fault Input 2
N#define PWM_0_FLTSTAT0_FAULT1   0x00000002  // Fault Input 1
N#define PWM_0_FLTSTAT0_FAULT0   0x00000001  // Fault Input 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_FLTSTAT1
N// register.
N//
N//*****************************************************************************
N#define PWM_0_FLTSTAT1_DCMP7    0x00000080  // Digital Comparator 7 Trigger
N#define PWM_0_FLTSTAT1_DCMP6    0x00000040  // Digital Comparator 6 Trigger
N#define PWM_0_FLTSTAT1_DCMP5    0x00000020  // Digital Comparator 5 Trigger
N#define PWM_0_FLTSTAT1_DCMP4    0x00000010  // Digital Comparator 4 Trigger
N#define PWM_0_FLTSTAT1_DCMP3    0x00000008  // Digital Comparator 3 Trigger
N#define PWM_0_FLTSTAT1_DCMP2    0x00000004  // Digital Comparator 2 Trigger
N#define PWM_0_FLTSTAT1_DCMP1    0x00000002  // Digital Comparator 1 Trigger
N#define PWM_0_FLTSTAT1_DCMP0    0x00000001  // Digital Comparator 0 Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_FLTSEN register.
N//
N//*****************************************************************************
N#define PWM_1_FLTSEN_FAULT3     0x00000008  // Fault3 Sense
N#define PWM_1_FLTSEN_FAULT2     0x00000004  // Fault2 Sense
N#define PWM_1_FLTSEN_FAULT1     0x00000002  // Fault1 Sense
N#define PWM_1_FLTSEN_FAULT0     0x00000001  // Fault0 Sense
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_FLTSTAT0
N// register.
N//
N//*****************************************************************************
N#define PWM_1_FLTSTAT0_FAULT3   0x00000008  // Fault Input 3
N#define PWM_1_FLTSTAT0_FAULT2   0x00000004  // Fault Input 2
N#define PWM_1_FLTSTAT0_FAULT1   0x00000002  // Fault Input 1
N#define PWM_1_FLTSTAT0_FAULT0   0x00000001  // Fault Input 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_FLTSTAT1
N// register.
N//
N//*****************************************************************************
N#define PWM_1_FLTSTAT1_DCMP7    0x00000080  // Digital Comparator 7 Trigger
N#define PWM_1_FLTSTAT1_DCMP6    0x00000040  // Digital Comparator 6 Trigger
N#define PWM_1_FLTSTAT1_DCMP5    0x00000020  // Digital Comparator 5 Trigger
N#define PWM_1_FLTSTAT1_DCMP4    0x00000010  // Digital Comparator 4 Trigger
N#define PWM_1_FLTSTAT1_DCMP3    0x00000008  // Digital Comparator 3 Trigger
N#define PWM_1_FLTSTAT1_DCMP2    0x00000004  // Digital Comparator 2 Trigger
N#define PWM_1_FLTSTAT1_DCMP1    0x00000002  // Digital Comparator 1 Trigger
N#define PWM_1_FLTSTAT1_DCMP0    0x00000001  // Digital Comparator 0 Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_FLTSEN register.
N//
N//*****************************************************************************
N#define PWM_2_FLTSEN_FAULT3     0x00000008  // Fault3 Sense
N#define PWM_2_FLTSEN_FAULT2     0x00000004  // Fault2 Sense
N#define PWM_2_FLTSEN_FAULT1     0x00000002  // Fault1 Sense
N#define PWM_2_FLTSEN_FAULT0     0x00000001  // Fault0 Sense
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_FLTSTAT0
N// register.
N//
N//*****************************************************************************
N#define PWM_2_FLTSTAT0_FAULT3   0x00000008  // Fault Input 3
N#define PWM_2_FLTSTAT0_FAULT2   0x00000004  // Fault Input 2
N#define PWM_2_FLTSTAT0_FAULT1   0x00000002  // Fault Input 1
N#define PWM_2_FLTSTAT0_FAULT0   0x00000001  // Fault Input 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_FLTSTAT1
N// register.
N//
N//*****************************************************************************
N#define PWM_2_FLTSTAT1_DCMP7    0x00000080  // Digital Comparator 7 Trigger
N#define PWM_2_FLTSTAT1_DCMP6    0x00000040  // Digital Comparator 6 Trigger
N#define PWM_2_FLTSTAT1_DCMP5    0x00000020  // Digital Comparator 5 Trigger
N#define PWM_2_FLTSTAT1_DCMP4    0x00000010  // Digital Comparator 4 Trigger
N#define PWM_2_FLTSTAT1_DCMP3    0x00000008  // Digital Comparator 3 Trigger
N#define PWM_2_FLTSTAT1_DCMP2    0x00000004  // Digital Comparator 2 Trigger
N#define PWM_2_FLTSTAT1_DCMP1    0x00000002  // Digital Comparator 1 Trigger
N#define PWM_2_FLTSTAT1_DCMP0    0x00000001  // Digital Comparator 0 Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_FLTSEN register.
N//
N//*****************************************************************************
N#define PWM_3_FLTSEN_FAULT3     0x00000008  // Fault3 Sense
N#define PWM_3_FLTSEN_FAULT2     0x00000004  // Fault2 Sense
N#define PWM_3_FLTSEN_FAULT1     0x00000002  // Fault1 Sense
N#define PWM_3_FLTSEN_FAULT0     0x00000001  // Fault0 Sense
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_FLTSTAT0
N// register.
N//
N//*****************************************************************************
N#define PWM_3_FLTSTAT0_FAULT3   0x00000008  // Fault Input 3
N#define PWM_3_FLTSTAT0_FAULT2   0x00000004  // Fault Input 2
N#define PWM_3_FLTSTAT0_FAULT1   0x00000002  // Fault Input 1
N#define PWM_3_FLTSTAT0_FAULT0   0x00000001  // Fault Input 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_FLTSTAT1
N// register.
N//
N//*****************************************************************************
N#define PWM_3_FLTSTAT1_DCMP7    0x00000080  // Digital Comparator 7 Trigger
N#define PWM_3_FLTSTAT1_DCMP6    0x00000040  // Digital Comparator 6 Trigger
N#define PWM_3_FLTSTAT1_DCMP5    0x00000020  // Digital Comparator 5 Trigger
N#define PWM_3_FLTSTAT1_DCMP4    0x00000010  // Digital Comparator 4 Trigger
N#define PWM_3_FLTSTAT1_DCMP3    0x00000008  // Digital Comparator 3 Trigger
N#define PWM_3_FLTSTAT1_DCMP2    0x00000004  // Digital Comparator 2 Trigger
N#define PWM_3_FLTSTAT1_DCMP1    0x00000002  // Digital Comparator 1 Trigger
N#define PWM_3_FLTSTAT1_DCMP0    0x00000001  // Digital Comparator 0 Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_PP register.
N//
N//*****************************************************************************
N#define PWM_PP_GCNT_M           0x0000000F  // Generators
N#define PWM_PP_FCNT_M           0x000000F0  // Fault Inputs (per PWM unit)
N#define PWM_PP_ESYNC            0x00000100  // Extended Synchronization
N#define PWM_PP_EFAULT           0x00000200  // Extended Fault
N#define PWM_PP_ONE              0x00000400  // One-Shot Mode
N#define PWM_PP_GCNT_S           0
N#define PWM_PP_FCNT_S           4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_CC register.
N//
N//*****************************************************************************
N#define PWM_CC_USEPWM           0x00000100  // Use PWM Clock Divisor
N#define PWM_CC_PWMDIV_M         0x00000007  // PWM Clock Divider
N#define PWM_CC_PWMDIV_2         0x00000000  // /2
N#define PWM_CC_PWMDIV_4         0x00000001  // /4
N#define PWM_CC_PWMDIV_8         0x00000002  // /8
N#define PWM_CC_PWMDIV_16        0x00000003  // /16
N#define PWM_CC_PWMDIV_32        0x00000004  // /32
N#define PWM_CC_PWMDIV_64        0x00000005  // /64
N
N//*****************************************************************************
N//
N// The following are defines for the PWM Generator standard offsets.
N//
N//*****************************************************************************
N#define PWM_O_X_CTL             0x00000000  // Gen Control Reg
N#define PWM_O_X_INTEN           0x00000004  // Gen Int/Trig Enable Reg
N#define PWM_O_X_RIS             0x00000008  // Gen Raw Int Status Reg
N#define PWM_O_X_ISC             0x0000000C  // Gen Int Status Reg
N#define PWM_O_X_LOAD            0x00000010  // Gen Load Reg
N#define PWM_O_X_COUNT           0x00000014  // Gen Counter Reg
N#define PWM_O_X_CMPA            0x00000018  // Gen Compare A Reg
N#define PWM_O_X_CMPB            0x0000001C  // Gen Compare B Reg
N#define PWM_O_X_GENA            0x00000020  // Gen Generator A Ctrl Reg
N#define PWM_O_X_GENB            0x00000024  // Gen Generator B Ctrl Reg
N#define PWM_O_X_DBCTL           0x00000028  // Gen Dead Band Ctrl Reg
N#define PWM_O_X_DBRISE          0x0000002C  // Gen DB Rising Edge Delay Reg
N#define PWM_O_X_DBFALL          0x00000030  // Gen DB Falling Edge Delay Reg
N#define PWM_O_X_FLTSRC0         0x00000034  // Fault pin, comparator condition
N#define PWM_O_X_FLTSRC1         0x00000038  // Digital comparator condition
N#define PWM_O_X_MINFLTPER       0x0000003C  // Fault minimum period extension
N#define PWM_GEN_0_OFFSET        0x00000040  // PWM0 base
N#define PWM_GEN_1_OFFSET        0x00000080  // PWM1 base
N#define PWM_GEN_2_OFFSET        0x000000C0  // PWM2 base
N#define PWM_GEN_3_OFFSET        0x00000100  // PWM3 base
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_CTL register.
N//
N//*****************************************************************************
N#define PWM_X_CTL_LATCH         0x00040000  // Latch Fault Input
N#define PWM_X_CTL_MINFLTPER     0x00020000  // Minimum Fault Period
N#define PWM_X_CTL_FLTSRC        0x00010000  // Fault Condition Source
N#define PWM_X_CTL_DBFALLUPD_M   0x0000C000  // PWMnDBFALL Update Mode
N#define PWM_X_CTL_DBFALLUPD_I   0x00000000  // Immediate
N#define PWM_X_CTL_DBFALLUPD_LS  0x00008000  // Locally Synchronized
N#define PWM_X_CTL_DBFALLUPD_GS  0x0000C000  // Globally Synchronized
N#define PWM_X_CTL_DBRISEUPD_M   0x00003000  // PWMnDBRISE Update Mode
N#define PWM_X_CTL_DBRISEUPD_I   0x00000000  // Immediate
N#define PWM_X_CTL_DBRISEUPD_LS  0x00002000  // Locally Synchronized
N#define PWM_X_CTL_DBRISEUPD_GS  0x00003000  // Globally Synchronized
N#define PWM_X_CTL_DBCTLUPD_M    0x00000C00  // PWMnDBCTL Update Mode
N#define PWM_X_CTL_DBCTLUPD_I    0x00000000  // Immediate
N#define PWM_X_CTL_DBCTLUPD_LS   0x00000800  // Locally Synchronized
N#define PWM_X_CTL_DBCTLUPD_GS   0x00000C00  // Globally Synchronized
N#define PWM_X_CTL_GENBUPD_M     0x00000300  // PWMnGENB Update Mode
N#define PWM_X_CTL_GENBUPD_I     0x00000000  // Immediate
N#define PWM_X_CTL_GENBUPD_LS    0x00000200  // Locally Synchronized
N#define PWM_X_CTL_GENBUPD_GS    0x00000300  // Globally Synchronized
N#define PWM_X_CTL_GENAUPD_M     0x000000C0  // PWMnGENA Update Mode
N#define PWM_X_CTL_GENAUPD_I     0x00000000  // Immediate
N#define PWM_X_CTL_GENAUPD_LS    0x00000080  // Locally Synchronized
N#define PWM_X_CTL_GENAUPD_GS    0x000000C0  // Globally Synchronized
N#define PWM_X_CTL_CMPBUPD       0x00000020  // Comparator B Update Mode
N#define PWM_X_CTL_CMPAUPD       0x00000010  // Comparator A Update Mode
N#define PWM_X_CTL_LOADUPD       0x00000008  // Load Register Update Mode
N#define PWM_X_CTL_DEBUG         0x00000004  // Debug Mode
N#define PWM_X_CTL_MODE          0x00000002  // Counter Mode
N#define PWM_X_CTL_ENABLE        0x00000001  // PWM Block Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_INTEN register.
N//
N//*****************************************************************************
N#define PWM_X_INTEN_TRCMPBD     0x00002000  // Trigger for Counter=PWMnCMPB
N                                            // Down
N#define PWM_X_INTEN_TRCMPBU     0x00001000  // Trigger for Counter=PWMnCMPB Up
N#define PWM_X_INTEN_TRCMPAD     0x00000800  // Trigger for Counter=PWMnCMPA
N                                            // Down
N#define PWM_X_INTEN_TRCMPAU     0x00000400  // Trigger for Counter=PWMnCMPA Up
N#define PWM_X_INTEN_TRCNTLOAD   0x00000200  // Trigger for Counter=PWMnLOAD
N#define PWM_X_INTEN_TRCNTZERO   0x00000100  // Trigger for Counter=0
N#define PWM_X_INTEN_INTCMPBD    0x00000020  // Interrupt for Counter=PWMnCMPB
N                                            // Down
N#define PWM_X_INTEN_INTCMPBU    0x00000010  // Interrupt for Counter=PWMnCMPB
N                                            // Up
N#define PWM_X_INTEN_INTCMPAD    0x00000008  // Interrupt for Counter=PWMnCMPA
N                                            // Down
N#define PWM_X_INTEN_INTCMPAU    0x00000004  // Interrupt for Counter=PWMnCMPA
N                                            // Up
N#define PWM_X_INTEN_INTCNTLOAD  0x00000002  // Interrupt for Counter=PWMnLOAD
N#define PWM_X_INTEN_INTCNTZERO  0x00000001  // Interrupt for Counter=0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_RIS register.
N//
N//*****************************************************************************
N#define PWM_X_RIS_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N                                            // Status
N#define PWM_X_RIS_INTCMPBU      0x00000010  // Comparator B Up Interrupt Status
N#define PWM_X_RIS_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N                                            // Status
N#define PWM_X_RIS_INTCMPAU      0x00000004  // Comparator A Up Interrupt Status
N#define PWM_X_RIS_INTCNTLOAD    0x00000002  // Counter=Load Interrupt Status
N#define PWM_X_RIS_INTCNTZERO    0x00000001  // Counter=0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_ISC register.
N//
N//*****************************************************************************
N#define PWM_X_ISC_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N#define PWM_X_ISC_INTCMPBU      0x00000010  // Comparator B Up Interrupt
N#define PWM_X_ISC_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N#define PWM_X_ISC_INTCMPAU      0x00000004  // Comparator A Up Interrupt
N#define PWM_X_ISC_INTCNTLOAD    0x00000002  // Counter=Load Interrupt
N#define PWM_X_ISC_INTCNTZERO    0x00000001  // Counter=0 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_LOAD register.
N//
N//*****************************************************************************
N#define PWM_X_LOAD_M            0x0000FFFF  // Counter Load Value
N#define PWM_X_LOAD_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_COUNT register.
N//
N//*****************************************************************************
N#define PWM_X_COUNT_M           0x0000FFFF  // Counter Value
N#define PWM_X_COUNT_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_CMPA register.
N//
N//*****************************************************************************
N#define PWM_X_CMPA_M            0x0000FFFF  // Comparator A Value
N#define PWM_X_CMPA_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_CMPB register.
N//
N//*****************************************************************************
N#define PWM_X_CMPB_M            0x0000FFFF  // Comparator B Value
N#define PWM_X_CMPB_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_GENA register.
N//
N//*****************************************************************************
N#define PWM_X_GENA_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_X_GENA_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_X_GENA_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_X_GENA_ACTCMPBD_INV 0x00000400  // Invert pwmA
N#define PWM_X_GENA_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Drive pwmA Low
X#define PWM_X_GENA_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_X_GENA_ACTCMPBD_ONE 0x00000C00  // Drive pwmA High
N#define PWM_X_GENA_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_X_GENA_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_X_GENA_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_X_GENA_ACTCMPBU_INV 0x00000100  // Invert pwmA
N#define PWM_X_GENA_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Drive pwmA Low
X#define PWM_X_GENA_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_X_GENA_ACTCMPBU_ONE 0x00000300  // Drive pwmA High
N#define PWM_X_GENA_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_X_GENA_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_X_GENA_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_X_GENA_ACTCMPAD_INV 0x00000040  // Invert pwmA
N#define PWM_X_GENA_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Drive pwmA Low
X#define PWM_X_GENA_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_X_GENA_ACTCMPAD_ONE 0x000000C0  // Drive pwmA High
N#define PWM_X_GENA_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_X_GENA_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_X_GENA_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_X_GENA_ACTCMPAU_INV 0x00000010  // Invert pwmA
N#define PWM_X_GENA_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Drive pwmA Low
X#define PWM_X_GENA_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_X_GENA_ACTCMPAU_ONE 0x00000030  // Drive pwmA High
N#define PWM_X_GENA_ACTLOAD_M    0x0000000C  // Action for Counter=LOAD
N#define PWM_X_GENA_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_X_GENA_ACTLOAD_INV  0x00000004  // Invert pwmA
N#define PWM_X_GENA_ACTLOAD_ZERO 0x00000008  // Drive pwmA Low
N#define PWM_X_GENA_ACTLOAD_ONE  0x0000000C  // Drive pwmA High
N#define PWM_X_GENA_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_X_GENA_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_X_GENA_ACTZERO_INV  0x00000001  // Invert pwmA
N#define PWM_X_GENA_ACTZERO_ZERO 0x00000002  // Drive pwmA Low
N#define PWM_X_GENA_ACTZERO_ONE  0x00000003  // Drive pwmA High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_GENB register.
N//
N//*****************************************************************************
N#define PWM_X_GENB_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_X_GENB_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_X_GENB_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_X_GENB_ACTCMPBD_INV 0x00000400  // Invert pwmB
N#define PWM_X_GENB_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Drive pwmB Low
X#define PWM_X_GENB_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_X_GENB_ACTCMPBD_ONE 0x00000C00  // Drive pwmB High
N#define PWM_X_GENB_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_X_GENB_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_X_GENB_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_X_GENB_ACTCMPBU_INV 0x00000100  // Invert pwmB
N#define PWM_X_GENB_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Drive pwmB Low
X#define PWM_X_GENB_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_X_GENB_ACTCMPBU_ONE 0x00000300  // Drive pwmB High
N#define PWM_X_GENB_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_X_GENB_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_X_GENB_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_X_GENB_ACTCMPAD_INV 0x00000040  // Invert pwmB
N#define PWM_X_GENB_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Drive pwmB Low
X#define PWM_X_GENB_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_X_GENB_ACTCMPAD_ONE 0x000000C0  // Drive pwmB High
N#define PWM_X_GENB_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_X_GENB_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_X_GENB_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_X_GENB_ACTCMPAU_INV 0x00000010  // Invert pwmB
N#define PWM_X_GENB_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Drive pwmB Low
X#define PWM_X_GENB_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_X_GENB_ACTCMPAU_ONE 0x00000030  // Drive pwmB High
N#define PWM_X_GENB_ACTLOAD_M    0x0000000C  // Action for Counter=LOAD
N#define PWM_X_GENB_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_X_GENB_ACTLOAD_INV  0x00000004  // Invert pwmB
N#define PWM_X_GENB_ACTLOAD_ZERO 0x00000008  // Drive pwmB Low
N#define PWM_X_GENB_ACTLOAD_ONE  0x0000000C  // Drive pwmB High
N#define PWM_X_GENB_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_X_GENB_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_X_GENB_ACTZERO_INV  0x00000001  // Invert pwmB
N#define PWM_X_GENB_ACTZERO_ZERO 0x00000002  // Drive pwmB Low
N#define PWM_X_GENB_ACTZERO_ONE  0x00000003  // Drive pwmB High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_DBCTL register.
N//
N//*****************************************************************************
N#define PWM_X_DBCTL_ENABLE      0x00000001  // Dead-Band Generator Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_DBRISE register.
N//
N//*****************************************************************************
N#define PWM_X_DBRISE_DELAY_M    0x00000FFF  // Dead-Band Rise Delay
N#define PWM_X_DBRISE_DELAY_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_DBFALL register.
N//
N//*****************************************************************************
N#define PWM_X_DBFALL_DELAY_M    0x00000FFF  // Dead-Band Fall Delay
N#define PWM_X_DBFALL_DELAY_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_FLTSRC0
N// register.
N//
N//*****************************************************************************
N#define PWM_X_FLTSRC0_FAULT3    0x00000008  // Fault3 Input
N#define PWM_X_FLTSRC0_FAULT2    0x00000004  // Fault2 Input
N#define PWM_X_FLTSRC0_FAULT1    0x00000002  // Fault1 Input
N#define PWM_X_FLTSRC0_FAULT0    0x00000001  // Fault0 Input
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_FLTSRC1
N// register.
N//
N//*****************************************************************************
N#define PWM_X_FLTSRC1_DCMP7     0x00000080  // Digital Comparator 7
N#define PWM_X_FLTSRC1_DCMP6     0x00000040  // Digital Comparator 6
N#define PWM_X_FLTSRC1_DCMP5     0x00000020  // Digital Comparator 5
N#define PWM_X_FLTSRC1_DCMP4     0x00000010  // Digital Comparator 4
N#define PWM_X_FLTSRC1_DCMP3     0x00000008  // Digital Comparator 3
N#define PWM_X_FLTSRC1_DCMP2     0x00000004  // Digital Comparator 2
N#define PWM_X_FLTSRC1_DCMP1     0x00000002  // Digital Comparator 1
N#define PWM_X_FLTSRC1_DCMP0     0x00000001  // Digital Comparator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_MINFLTPER
N// register.
N//
N//*****************************************************************************
N#define PWM_X_MINFLTPER_M       0x0000FFFF  // Minimum Fault Period
N#define PWM_X_MINFLTPER_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the PWM Generator extended offsets.
N//
N//*****************************************************************************
N#define PWM_O_X_FLTSEN          0x00000000  // Fault logic sense
N#define PWM_O_X_FLTSTAT0        0x00000004  // Pin and comparator status
N#define PWM_O_X_FLTSTAT1        0x00000008  // Digital comparator status
N#define PWM_EXT_0_OFFSET        0x00000800  // PWM0 extended base
N#define PWM_EXT_1_OFFSET        0x00000880  // PWM1 extended base
N#define PWM_EXT_2_OFFSET        0x00000900  // PWM2 extended base
N#define PWM_EXT_3_OFFSET        0x00000980  // PWM3 extended base
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_FLTSEN register.
N//
N//*****************************************************************************
N#define PWM_X_FLTSEN_FAULT3     0x00000008  // Fault3 Sense
N#define PWM_X_FLTSEN_FAULT2     0x00000004  // Fault2 Sense
N#define PWM_X_FLTSEN_FAULT1     0x00000002  // Fault1 Sense
N#define PWM_X_FLTSEN_FAULT0     0x00000001  // Fault0 Sense
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_FLTSTAT0
N// register.
N//
N//*****************************************************************************
N#define PWM_X_FLTSTAT0_FAULT3   0x00000008  // Fault Input 3
N#define PWM_X_FLTSTAT0_FAULT2   0x00000004  // Fault Input 2
N#define PWM_X_FLTSTAT0_FAULT1   0x00000002  // Fault Input 1
N#define PWM_X_FLTSTAT0_FAULT0   0x00000001  // Fault Input 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_X_FLTSTAT1
N// register.
N//
N//*****************************************************************************
N#define PWM_X_FLTSTAT1_DCMP7    0x00000080  // Digital Comparator 7 Trigger
N#define PWM_X_FLTSTAT1_DCMP6    0x00000040  // Digital Comparator 6 Trigger
N#define PWM_X_FLTSTAT1_DCMP5    0x00000020  // Digital Comparator 5 Trigger
N#define PWM_X_FLTSTAT1_DCMP4    0x00000010  // Digital Comparator 4 Trigger
N#define PWM_X_FLTSTAT1_DCMP3    0x00000008  // Digital Comparator 3 Trigger
N#define PWM_X_FLTSTAT1_DCMP2    0x00000004  // Digital Comparator 2 Trigger
N#define PWM_X_FLTSTAT1_DCMP1    0x00000002  // Digital Comparator 1 Trigger
N#define PWM_X_FLTSTAT1_DCMP0    0x00000001  // Digital Comparator 0 Trigger
N
N#endif // __HW_PWM_H__
L 38 "..\inc_h\system.h" 2
N#include <adc.h>
L 1 "C:\ti\TivaWare_C_Series-2.1.0.12573\driverlib\adc.h" 1
N//*****************************************************************************
N//
N// adc.h - ADC headers for using the ADC driver functions.
N//
N// Copyright (c) 2005-2014 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.0.12573 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_ADC_H__
N#define __DRIVERLIB_ADC_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCSequenceConfigure as the ui32Trigger
N// parameter.
N//
N//*****************************************************************************
N#define ADC_TRIGGER_PROCESSOR   0x00000000  // Processor event
N#define ADC_TRIGGER_COMP0       0x00000001  // Analog comparator 0 event
N#define ADC_TRIGGER_COMP1       0x00000002  // Analog comparator 1 event
N#define ADC_TRIGGER_COMP2       0x00000003  // Analog comparator 2 event
N#define ADC_TRIGGER_EXTERNAL    0x00000004  // External event
N#define ADC_TRIGGER_TIMER       0x00000005  // Timer event
N#define ADC_TRIGGER_PWM0        0x00000006  // PWM0 event
N#define ADC_TRIGGER_PWM1        0x00000007  // PWM1 event
N#define ADC_TRIGGER_PWM2        0x00000008  // PWM2 event
N#define ADC_TRIGGER_PWM3        0x00000009  // PWM3 event
N#define ADC_TRIGGER_NEVER       0x0000000E  // Never Trigger
N#define ADC_TRIGGER_ALWAYS      0x0000000F  // Always event
N#define ADC_TRIGGER_PWM_MOD0    0x00000000  // PWM triggers from PWM0
N#define ADC_TRIGGER_PWM_MOD1    0x00000010  // PWM triggers from PWM1
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCSequenceStepConfigure as the ui32Config
N// parameter.
N//
N//*****************************************************************************
N#define ADC_CTL_TS              0x00000080  // Temperature sensor select
N#define ADC_CTL_IE              0x00000040  // Interrupt enable
N#define ADC_CTL_END             0x00000020  // Sequence end select
N#define ADC_CTL_D               0x00000010  // Differential select
N#define ADC_CTL_CH0             0x00000000  // Input channel 0
N#define ADC_CTL_CH1             0x00000001  // Input channel 1
N#define ADC_CTL_CH2             0x00000002  // Input channel 2
N#define ADC_CTL_CH3             0x00000003  // Input channel 3
N#define ADC_CTL_CH4             0x00000004  // Input channel 4
N#define ADC_CTL_CH5             0x00000005  // Input channel 5
N#define ADC_CTL_CH6             0x00000006  // Input channel 6
N#define ADC_CTL_CH7             0x00000007  // Input channel 7
N#define ADC_CTL_CH8             0x00000008  // Input channel 8
N#define ADC_CTL_CH9             0x00000009  // Input channel 9
N#define ADC_CTL_CH10            0x0000000A  // Input channel 10
N#define ADC_CTL_CH11            0x0000000B  // Input channel 11
N#define ADC_CTL_CH12            0x0000000C  // Input channel 12
N#define ADC_CTL_CH13            0x0000000D  // Input channel 13
N#define ADC_CTL_CH14            0x0000000E  // Input channel 14
N#define ADC_CTL_CH15            0x0000000F  // Input channel 15
N#define ADC_CTL_CH16            0x00000100  // Input channel 16
N#define ADC_CTL_CH17            0x00000101  // Input channel 17
N#define ADC_CTL_CH18            0x00000102  // Input channel 18
N#define ADC_CTL_CH19            0x00000103  // Input channel 19
N#define ADC_CTL_CH20            0x00000104  // Input channel 20
N#define ADC_CTL_CH21            0x00000105  // Input channel 21
N#define ADC_CTL_CH22            0x00000106  // Input channel 22
N#define ADC_CTL_CH23            0x00000107  // Input channel 23
N#define ADC_CTL_CMP0            0x00080000  // Select Comparator 0
N#define ADC_CTL_CMP1            0x00090000  // Select Comparator 1
N#define ADC_CTL_CMP2            0x000A0000  // Select Comparator 2
N#define ADC_CTL_CMP3            0x000B0000  // Select Comparator 3
N#define ADC_CTL_CMP4            0x000C0000  // Select Comparator 4
N#define ADC_CTL_CMP5            0x000D0000  // Select Comparator 5
N#define ADC_CTL_CMP6            0x000E0000  // Select Comparator 6
N#define ADC_CTL_CMP7            0x000F0000  // Select Comparator 7
N#define ADC_CTL_SHOLD_4         0x00000000  // Sample and hold 4 ADC clocks
N#define ADC_CTL_SHOLD_8         0x00200000  // Sample and hold 8 ADC clocks
N#define ADC_CTL_SHOLD_16        0x00400000  // Sample and hold 16 ADC clocks
N#define ADC_CTL_SHOLD_32        0x00600000  // Sample and hold 32 ADC clocks
N#define ADC_CTL_SHOLD_64        0x00800000  // Sample and hold 64 ADC clocks
N#define ADC_CTL_SHOLD_128       0x00A00000  // Sample and hold 128 ADC clocks
N#define ADC_CTL_SHOLD_256       0x00C00000  // Sample and hold 256 ADC clocks
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCComparatorConfigure as part of the
N// ui32Config parameter.
N//
N//*****************************************************************************
N#define ADC_COMP_TRIG_NONE      0x00000000  // Trigger Disabled
N#define ADC_COMP_TRIG_LOW_ALWAYS \
N                                0x00001000  // Trigger Low Always
X#define ADC_COMP_TRIG_LOW_ALWAYS                                 0x00001000  
N#define ADC_COMP_TRIG_LOW_ONCE  0x00001100  // Trigger Low Once
N#define ADC_COMP_TRIG_LOW_HALWAYS \
N                                0x00001200  // Trigger Low Always (Hysteresis)
X#define ADC_COMP_TRIG_LOW_HALWAYS                                 0x00001200  
N#define ADC_COMP_TRIG_LOW_HONCE 0x00001300  // Trigger Low Once (Hysteresis)
N#define ADC_COMP_TRIG_MID_ALWAYS \
N                                0x00001400  // Trigger Mid Always
X#define ADC_COMP_TRIG_MID_ALWAYS                                 0x00001400  
N#define ADC_COMP_TRIG_MID_ONCE  0x00001500  // Trigger Mid Once
N#define ADC_COMP_TRIG_HIGH_ALWAYS \
N                                0x00001C00  // Trigger High Always
X#define ADC_COMP_TRIG_HIGH_ALWAYS                                 0x00001C00  
N#define ADC_COMP_TRIG_HIGH_ONCE 0x00001D00  // Trigger High Once
N#define ADC_COMP_TRIG_HIGH_HALWAYS \
N                                0x00001E00  // Trigger High Always (Hysteresis)
X#define ADC_COMP_TRIG_HIGH_HALWAYS                                 0x00001E00  
N#define ADC_COMP_TRIG_HIGH_HONCE \
N                                0x00001F00  // Trigger High Once (Hysteresis)
X#define ADC_COMP_TRIG_HIGH_HONCE                                 0x00001F00  
N
N#define ADC_COMP_INT_NONE       0x00000000  // Interrupt Disabled
N#define ADC_COMP_INT_LOW_ALWAYS \
N                                0x00000010  // Interrupt Low Always
X#define ADC_COMP_INT_LOW_ALWAYS                                 0x00000010  
N#define ADC_COMP_INT_LOW_ONCE   0x00000011  // Interrupt Low Once
N#define ADC_COMP_INT_LOW_HALWAYS \
N                                0x00000012  // Interrupt Low Always
X#define ADC_COMP_INT_LOW_HALWAYS                                 0x00000012  
N                                            // (Hysteresis)
N#define ADC_COMP_INT_LOW_HONCE  0x00000013  // Interrupt Low Once (Hysteresis)
N#define ADC_COMP_INT_MID_ALWAYS \
N                                0x00000014  // Interrupt Mid Always
X#define ADC_COMP_INT_MID_ALWAYS                                 0x00000014  
N#define ADC_COMP_INT_MID_ONCE   0x00000015  // Interrupt Mid Once
N#define ADC_COMP_INT_HIGH_ALWAYS \
N                                0x0000001C  // Interrupt High Always
X#define ADC_COMP_INT_HIGH_ALWAYS                                 0x0000001C  
N#define ADC_COMP_INT_HIGH_ONCE  0x0000001D  // Interrupt High Once
N#define ADC_COMP_INT_HIGH_HALWAYS \
N                                0x0000001E  // Interrupt High Always
X#define ADC_COMP_INT_HIGH_HALWAYS                                 0x0000001E  
N                                            // (Hysteresis)
N#define ADC_COMP_INT_HIGH_HONCE \
N                                0x0000001F  // Interrupt High Once (Hysteresis)
X#define ADC_COMP_INT_HIGH_HONCE                                 0x0000001F  
N
N//*****************************************************************************
N//
N// Values that can be used to modify the sequence number passed to
N// ADCProcessorTrigger in order to get cross-module synchronous processor
N// triggers.
N//
N//*****************************************************************************
N#define ADC_TRIGGER_WAIT        0x08000000  // Wait for the synchronous trigger
N#define ADC_TRIGGER_SIGNAL      0x80000000  // Signal the synchronous trigger
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCPhaseDelaySet as the ui32Phase parameter and
N// returned from ADCPhaseDelayGet.
N//
N//*****************************************************************************
N#define ADC_PHASE_0             0x00000000  // 0 degrees
N#define ADC_PHASE_22_5          0x00000001  // 22.5 degrees
N#define ADC_PHASE_45            0x00000002  // 45 degrees
N#define ADC_PHASE_67_5          0x00000003  // 67.5 degrees
N#define ADC_PHASE_90            0x00000004  // 90 degrees
N#define ADC_PHASE_112_5         0x00000005  // 112.5 degrees
N#define ADC_PHASE_135           0x00000006  // 135 degrees
N#define ADC_PHASE_157_5         0x00000007  // 157.5 degrees
N#define ADC_PHASE_180           0x00000008  // 180 degrees
N#define ADC_PHASE_202_5         0x00000009  // 202.5 degrees
N#define ADC_PHASE_225           0x0000000A  // 225 degrees
N#define ADC_PHASE_247_5         0x0000000B  // 247.5 degrees
N#define ADC_PHASE_270           0x0000000C  // 270 degrees
N#define ADC_PHASE_292_5         0x0000000D  // 292.5 degrees
N#define ADC_PHASE_315           0x0000000E  // 315 degrees
N#define ADC_PHASE_337_5         0x0000000F  // 337.5 degrees
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCReferenceSet as the ui32Ref parameter.
N//
N//*****************************************************************************
N#define ADC_REF_INT             0x00000000  // Internal reference
N#define ADC_REF_EXT_3V          0x00000001  // External 3V reference
N#define ADC_REF_EXT_1V          0x00000003  // External 1V reference
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCIntDisableEx(), ADCIntEnableEx(),
N// ADCIntClearEx() and ADCIntStatusEx().
N//
N//*****************************************************************************
N#define ADC_INT_SS0             0x00000001
N#define ADC_INT_SS1             0x00000002
N#define ADC_INT_SS2             0x00000004
N#define ADC_INT_SS3             0x00000008
N#define ADC_INT_DMA_SS0         0x00000100
N#define ADC_INT_DMA_SS1         0x00000200
N#define ADC_INT_DMA_SS2         0x00000400
N#define ADC_INT_DMA_SS3         0x00000800
N#define ADC_INT_DCON_SS0        0x00010000
N#define ADC_INT_DCON_SS1        0x00020000
N#define ADC_INT_DCON_SS2        0x00040000
N#define ADC_INT_DCON_SS3        0x00080000
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCClockConfigSet() and ADCClockConfigGet().
N//
N//*****************************************************************************
N#define ADC_CLOCK_RATE_FULL     0x00000070
N#define ADC_CLOCK_RATE_HALF     0x00000050
N#define ADC_CLOCK_RATE_FOURTH   0x00000030
N#define ADC_CLOCK_RATE_EIGHTH   0x00000010
N#define ADC_CLOCK_SRC_PLL       0x00000000
N#define ADC_CLOCK_SRC_PIOSC     0x00000001
N#define ADC_CLOCK_SRC_ALTCLK    0x00000001
N#define ADC_CLOCK_SRC_MOSC      0x00000002
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void ADCIntRegister(uint32_t ui32Base, uint32_t ui32SequenceNum,
N                           void (*pfnHandler)(void));
Nextern void ADCIntUnregister(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCIntDisable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCIntEnable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern uint32_t ADCIntStatus(uint32_t ui32Base, uint32_t ui32SequenceNum,
N                             bool bMasked);
X                             _Bool bMasked);
Nextern void ADCIntClear(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCSequenceEnable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCSequenceDisable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCSequenceConfigure(uint32_t ui32Base, uint32_t ui32SequenceNum,
N                                 uint32_t ui32Trigger, uint32_t ui32Priority);
Nextern void ADCSequenceStepConfigure(uint32_t ui32Base,
N                                     uint32_t ui32SequenceNum,
N                                     uint32_t ui32Step, uint32_t ui32Config);
Nextern int32_t ADCSequenceOverflow(uint32_t ui32Base,
N                                   uint32_t ui32SequenceNum);
Nextern void ADCSequenceOverflowClear(uint32_t ui32Base,
N                                     uint32_t ui32SequenceNum);
Nextern int32_t ADCSequenceUnderflow(uint32_t ui32Base,
N                                    uint32_t ui32SequenceNum);
Nextern void ADCSequenceUnderflowClear(uint32_t ui32Base,
N                                      uint32_t ui32SequenceNum);
Nextern int32_t ADCSequenceDataGet(uint32_t ui32Base, uint32_t ui32SequenceNum,
N                                  uint32_t *pui32Buffer);
Nextern void ADCProcessorTrigger(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCSoftwareOversampleConfigure(uint32_t ui32Base,
N                                           uint32_t ui32SequenceNum,
N                                           uint32_t ui32Factor);
Nextern void ADCSoftwareOversampleStepConfigure(uint32_t ui32Base,
N                                               uint32_t ui32SequenceNum,
N                                               uint32_t ui32Step,
N                                               uint32_t ui32Config);
Nextern void ADCSoftwareOversampleDataGet(uint32_t ui32Base,
N                                         uint32_t ui32SequenceNum,
N                                         uint32_t *pui32Buffer,
N                                         uint32_t ui32Count);
Nextern void ADCHardwareOversampleConfigure(uint32_t ui32Base,
N                                           uint32_t ui32Factor);
Nextern void ADCClockConfigSet(uint32_t ui32Base, uint32_t ui32Config,
N                              uint32_t ui32ClockDiv);
Nextern uint32_t ADCClockConfigGet(uint32_t ui32Base, uint32_t *pui32ClockDiv);
N
Nextern void ADCComparatorConfigure(uint32_t ui32Base, uint32_t ui32Comp,
N                                   uint32_t ui32Config);
Nextern void ADCComparatorRegionSet(uint32_t ui32Base, uint32_t ui32Comp,
N                                   uint32_t ui32LowRef, uint32_t ui32HighRef);
Nextern void ADCComparatorReset(uint32_t ui32Base, uint32_t ui32Comp,
N                               bool bTrigger, bool bInterrupt);
X                               _Bool bTrigger, _Bool bInterrupt);
Nextern void ADCComparatorIntDisable(uint32_t ui32Base,
N                                    uint32_t ui32SequenceNum);
Nextern void ADCComparatorIntEnable(uint32_t ui32Base,
N                                   uint32_t ui32SequenceNum);
Nextern uint32_t ADCComparatorIntStatus(uint32_t ui32Base);
Nextern void ADCComparatorIntClear(uint32_t ui32Base, uint32_t ui32Status);
Nextern void ADCIntDisableEx(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void ADCIntEnableEx(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern uint32_t ADCIntStatusEx(uint32_t ui32Base, bool bMasked);
Xextern uint32_t ADCIntStatusEx(uint32_t ui32Base, _Bool bMasked);
Nextern void ADCIntClearEx(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void ADCSequenceDMAEnable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCSequenceDMADisable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern bool ADCBusy(uint32_t ui32Base);
Xextern _Bool ADCBusy(uint32_t ui32Base);
Nextern void ADCReferenceSet(uint32_t ui32Base, uint32_t ui32Ref);
Nextern uint32_t ADCReferenceGet(uint32_t ui32Base);
Nextern void ADCPhaseDelaySet(uint32_t ui32Base, uint32_t ui32Phase);
Nextern uint32_t ADCPhaseDelayGet(uint32_t ui32Base);
Nextern void ADCSampleRateSet(uint32_t ui32Base, uint32_t ui32ADCClock,
N                             uint32_t ui32Rate);
Nextern uint32_t ADCSampleRateGet(uint32_t ui32Base);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_ADC_H__
L 39 "..\inc_h\system.h" 2
N
Ntypedef union
N{
N	uint16_t word;
N	uint8_t  byte[2];
N}UintToUchar;
N
Ntypedef union
N{
N	int16_t word;
N	int8_t  byte[2];
N}intToUchar;
N
Ntypedef union
N{
N	uint32_t word;
N  uint16_t byte16[2];
N	uint8_t  byte[4];
N}UlongToUchar;
N
Ntypedef union
N{
N	int32_t word;
N  int16_t byte16[2];
N	uint8_t byte[4];
N}longToUchar;
N
N
N
N#pragma anon_unions
Ntypedef union
N{
N   uint8_t byte;
N   struct
N   {
N       unsigned Limit1 :1;    
N       unsigned Limit2 :1;  
N       unsigned :1; 
N       unsigned :1; 
N       unsigned :1;   
N       unsigned :1;     
N       unsigned :1;
N       unsigned :1;  
N       unsigned :1;
N   };
N}MOTOR_LOCATION;
Ntypedef union tagFLAGBITS{
N	uint16_t byte[4];
N	struct
N	{
N			unsigned fg0:1;
N			unsigned fg1:1;
N			unsigned fg2:1;
N			unsigned fg3:1;
N			unsigned fg4:1;
N			unsigned fg5:1;
N			unsigned fg6:1;
N			unsigned fg7:1;
N			unsigned fg8:1;
N			unsigned fg9:1;
N			unsigned fg10:1;
N			unsigned fg11:1;
N			unsigned fg12:1;
N			unsigned fg13:1;
N			unsigned fg14:1;
N			unsigned fg15:1;
N			unsigned fg16:1;
N			unsigned fg17:1;
N			unsigned fg18:1;
N			unsigned fg19:1;
N			unsigned fg20:1;
N			unsigned fg21:1;
N			unsigned fg22:1;
N			unsigned fg23:1;
N			unsigned fg24:1;
N			unsigned fg25:1;
N			unsigned fg26:1;
N			unsigned fg27:1;
N			unsigned fg28:1;
N			unsigned fg29:1;
N			unsigned fg30:1;
N			unsigned fg31:1;	
N  };
N}FLAGBITS;
Nextern FLAGBITS Flagbits;
N#define MotorTime_Pulse1           Flagbits.fg0  //Timer0A 定时时间到
N#define MotorTime_Pulse2           Flagbits.fg1  //Timer1A 定时时间到
N#define Motor_reversal1            Flagbits.fg2  //控制电机 1 高低电平反转
N#define Motor_reversal2            Flagbits.fg3  //控制电机 2 高低电平反转
N#define Motor_Hold1                Flagbits.fg4  //电机 1 静态保持
N#define Motor_Hold2                Flagbits.fg5	 //电机 2 静态保持
N#define Motor_Direction1           Flagbits.fg6  //电机 1 转向
N#define Motor_Direction2           Flagbits.fg7  //电机 2 转向
N#define Motor_New_Cmd1             Flagbits.fg8  //电机 1 新指令到达
N#define Motor_New_Cmd2             Flagbits.fg9  //电机 2 新指令到达
N
N#define Cmd_55_Flag                Flagbits.fg10 //开机 0x55 指令标志
N#define Motor_Holdreversal         Flagbits.fg11 //电机 12 静态使能反转
N#define Drive_Limit_Time           Flagbits.fg12 //电机驱动使能延迟时间到达标志
N
N#define Timer_Send_Fre1            Flagbits.fg13 //电机 1 频率更改标志
N#define M_SS_Fre_start1            Flagbits.fg14 //电机 1 软启动标志
N#define M_SS_Fre_stop1             Flagbits.fg15 //电机 1 软停止标志 
N
N#define Timer_Send_Fre2            Flagbits.fg16 //电机 2 频率更改标志
N#define M_SS_Fre_start2            Flagbits.fg17 //电机 2 软启动标志
N#define M_SS_Fre_stop2             Flagbits.fg18 //电机 2 软停止标志 
N
N#define LED_CONTROL                Flagbits.fg19 //控制LED闪烁
N
N#define MOTOR_ISENABLE             Flagbits.fg20 //测试用电机正反转
N
N
N#define SOFTWAREVERSION   20   //软件版本
N#define HARDWAREVERSION   20   //硬件版本
N
N
N
N
N//  boot升级用
N#define DELAPPCOMA  0xaaaaaaaa
N#define DELAPPCOMB  0x55555555
N#define JMPSPIADDR     100
N
N#define BOARDCONFIGADDR     300
N#define BOARDCONFIGSIZE     5
N
N#define BOARDHARDWARE_VER   0 
N#define BOARDSOFTWARE_VER   1
N#define BOARDCANID          2
N#define BOARDSELFCANID      3
N#define BOARDMACCANID       4
N
N/****************************************************************************
N                               variable
N****************************************************************************/
N
N
N
N
N#ifdef DUBUG
Sextern uint8_t Computer_Rec_Cortex_SendHMI_Data[10];
Sextern uint8_t Computer_Rec_HMI_SendCortex_Data[10];
N#endif
Nextern  uint16_t SoftWareVersion;
Nextern  int16_t   TempAdcVal;
Nextern  UintToUchar Cpu_Tmp_Buf;
Nextern  int32_t temperature;
N
N
N
N#endif
N
N
N
N
N
L 7 "..\inc_h\fifo.h" 2
N
N
N//循环队列结构体
Ntypedef struct 
N{
N	void **ptrStart; //指向指针数组起始地址
N	void **ptrEnd;   //指向指针数组结束地址
N	void **ptrOut;   //指向被取出数据包的位置
N	void **ptrIn;    //指向插入一条数据包的位置
N	
N	uint8_t length;  //循环队列总长度
N	uint8_t count;   //当前未处理的数据包数量
N}CanFifo,*pCanFifo;
N
N
N
Nbool CanFifo_Init(pCanFifo  ptr,void **start,uint8_t size,uint8_t fifo[][8]);
X_Bool CanFifo_Init(pCanFifo  ptr,void **start,uint8_t size,uint8_t fifo[][8]);
Nbool CanFifo_Request(pCanFifo  ptr,uint8_t a[8]);
X_Bool CanFifo_Request(pCanFifo  ptr,uint8_t a[8]);
Nbool CanFifo_Post(pCanFifo  ptr,uint8_t a[8]);
X_Bool CanFifo_Post(pCanFifo  ptr,uint8_t a[8]);
N
N#endif
L 9 "..\DRIVE\fifo.c" 2
N
Nbool CanFifo_Init(pCanFifo  ptr,void **start,uint8_t size,uint8_t fifo[][8])
X_Bool CanFifo_Init(pCanFifo  ptr,void **start,uint8_t size,uint8_t fifo[][8])
N{
N	uint8_t i;
N	if(ptr == (pCanFifo) 0)
N		return false;
X		return 0;
N	if(start ==  0)
N		return false;
X		return 0;
N	if(size <= 1)
N		return false;
X		return 0;
N	if(fifo[0] == (uint8_t *)0)
N		return false;
X		return 0;
N	ptr->ptrStart = start;
N	ptr->ptrEnd   = &start[size];
N	ptr->ptrIn    = start;
N	ptr->ptrOut   = start;
N	ptr->length   = size;
N	ptr->count    = 0u;
N	for(i = 0;i < size;i++)
N		start[i] = fifo[i];
N	return true;
X	return 1;
N}
Nbool CanFifo_Request(pCanFifo  ptr,uint8_t a[8])
X_Bool CanFifo_Request(pCanFifo  ptr,uint8_t a[8])
N{
N	uint8_t *pmsg;
N	uint8_t i=0;
N	if(ptr == (pCanFifo) 0)
N		return false;
X		return 0;
N	if(ptr->count <= 0)
N		return false;
X		return 0;
N	if(a == (uint8_t *)0)
N		return false;
X		return 0;
N	
N	pmsg = *ptr->ptrOut++;
N	ptr->count --;
N	if(ptr->ptrOut == ptr->ptrEnd)
N		ptr->ptrOut = ptr->ptrStart;
N	for(i=0;i<8;i++)
N		a[i] = *(pmsg + i);
N	for(i=0;i<8;i++)
N		*(pmsg + i) = 0;
N	return true;
X	return 1;
N}
Nbool CanFifo_Post(pCanFifo  ptr,uint8_t a[8])
X_Bool CanFifo_Post(pCanFifo  ptr,uint8_t a[8])
N{
N	uint8_t *pmsg;
N	uint8_t i=0;
N	if(ptr == (pCanFifo) 0)
N		return false;
X		return 0;
N	if(ptr->count > ptr->length)
N		return false;
X		return 0;
N	if(a == (uint8_t *)0)
N		return false;
X		return 0;
N	
N	pmsg = *ptr->ptrIn++;
N	ptr->count ++;
N	if(ptr->ptrIn == ptr->ptrEnd)
N		ptr->ptrIn = ptr->ptrStart;
N	for(i=0;i<8;i++)
N		*(pmsg + i) = a[i];
N	
N	return true;
X	return 1;
N}
N
Nuint8_t CaFifo_GetCount(pCanFifo  ptr)
N{
N	if(ptr == (pCanFifo) 0)
N		return 0;
N	return ptr->count;
N}
N
N
N
N
N
N
